
adda.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fe8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008170  08008170  00018170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800818c  0800818c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800818c  0800818c  0001818c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008194  08008194  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008194  08008194  00018194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008198  08008198  00018198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800819c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000080c  20000090  0800822c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000089c  0800822c  0002089c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ab78  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035f4  00000000  00000000  0003ac38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001428  00000000  00000000  0003e230  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012c8  00000000  00000000  0003f658  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002480d  00000000  00000000  00040920  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012215  00000000  00000000  0006512d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4fe9  00000000  00000000  00077342  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014c32b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056c0  00000000  00000000  0014c3a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008158 	.word	0x08008158

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008158 	.word	0x08008158

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 fd4f 	bl	8000f70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f85b 	bl	800058c <SystemClock_Config>
  int tel;
  volatile int value1,value2;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 fa17 	bl	8000908 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004da:	f000 f999 	bl	8000810 <MX_I2C1_Init>
  MX_USB_HOST_Init();
 80004de:	f007 fa37 	bl	8007950 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 80004e2:	f000 f8bd 	bl	8000660 <MX_ADC1_Init>
  MX_ADC2_Init();
 80004e6:	f000 f90d 	bl	8000704 <MX_ADC2_Init>
  MX_DAC_Init();
 80004ea:	f000 f95d 	bl	80007a8 <MX_DAC_Init>
  MX_TIM3_Init();
 80004ee:	f000 f9bd 	bl	800086c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);				// start the interrupt timer 3
 80004f2:	4822      	ldr	r0, [pc, #136]	; (800057c <main+0xb4>)
 80004f4:	f004 f807 	bl	8004506 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */

  while (1)
    {

  	  for (tel=0;tel<1024;tel++)			// select range read the info in the datasheet
 80004f8:	2300      	movs	r3, #0
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	e037      	b.n	800056e <main+0xa6>
  	  {
  		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, tel);	// setvalue on DAC1	PA4
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	2200      	movs	r2, #0
 8000502:	2100      	movs	r1, #0
 8000504:	481e      	ldr	r0, [pc, #120]	; (8000580 <main+0xb8>)
 8000506:	f001 fb67 	bl	8001bd8 <HAL_DAC_SetValue>
  		  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);							// execute new value
 800050a:	2100      	movs	r1, #0
 800050c:	481c      	ldr	r0, [pc, #112]	; (8000580 <main+0xb8>)
 800050e:	f001 fab0 	bl	8001a72 <HAL_DAC_Start>
  		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, tel); // setvalue on DAC2	PA5
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	2200      	movs	r2, #0
 8000516:	2110      	movs	r1, #16
 8000518:	4819      	ldr	r0, [pc, #100]	; (8000580 <main+0xb8>)
 800051a:	f001 fb5d 	bl	8001bd8 <HAL_DAC_SetValue>
  		  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);							// execute new value
 800051e:	2110      	movs	r1, #16
 8000520:	4817      	ldr	r0, [pc, #92]	; (8000580 <main+0xb8>)
 8000522:	f001 faa6 	bl	8001a72 <HAL_DAC_Start>

  		  HAL_Delay(1);													// wait 1 ms
 8000526:	2001      	movs	r0, #1
 8000528:	f000 fd94 	bl	8001054 <HAL_Delay>
  		  HAL_ADC_Start(&hadc1);										// start conversion
 800052c:	4815      	ldr	r0, [pc, #84]	; (8000584 <main+0xbc>)
 800052e:	f000 fdf7 	bl	8001120 <HAL_ADC_Start>
  		  HAL_ADC_PollForConversion(&hadc1,11);							// wait for conversion to end -- mux ADC123_IN11 input PC1
 8000532:	210b      	movs	r1, #11
 8000534:	4813      	ldr	r0, [pc, #76]	; (8000584 <main+0xbc>)
 8000536:	f000 feb9 	bl	80012ac <HAL_ADC_PollForConversion>
  		  value1 = HAL_ADC_GetValue(&hadc1);							// read value
 800053a:	4812      	ldr	r0, [pc, #72]	; (8000584 <main+0xbc>)
 800053c:	f000 ff3a 	bl	80013b4 <HAL_ADC_GetValue>
 8000540:	4603      	mov	r3, r0
 8000542:	60bb      	str	r3, [r7, #8]
  		  value1 ++;
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	3301      	adds	r3, #1
 8000548:	60bb      	str	r3, [r7, #8]

  		  HAL_ADC_Start(&hadc2);
 800054a:	480f      	ldr	r0, [pc, #60]	; (8000588 <main+0xc0>)
 800054c:	f000 fde8 	bl	8001120 <HAL_ADC_Start>
  		  HAL_ADC_PollForConversion(&hadc2,12);							// wait for conversion to end -- mux ADC123_IN12 input PC2
 8000550:	210c      	movs	r1, #12
 8000552:	480d      	ldr	r0, [pc, #52]	; (8000588 <main+0xc0>)
 8000554:	f000 feaa 	bl	80012ac <HAL_ADC_PollForConversion>
  		  value2 = HAL_ADC_GetValue(&hadc2);
 8000558:	480b      	ldr	r0, [pc, #44]	; (8000588 <main+0xc0>)
 800055a:	f000 ff2b 	bl	80013b4 <HAL_ADC_GetValue>
 800055e:	4603      	mov	r3, r0
 8000560:	607b      	str	r3, [r7, #4]
  		  value2 ++;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	3301      	adds	r3, #1
 8000566:	607b      	str	r3, [r7, #4]
  	  for (tel=0;tel<1024;tel++)			// select range read the info in the datasheet
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	3301      	adds	r3, #1
 800056c:	60fb      	str	r3, [r7, #12]
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000574:	dbc3      	blt.n	80004fe <main+0x36>



  	  }
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000576:	f007 fa11 	bl	800799c <MX_USB_HOST_Process>
  	  for (tel=0;tel<1024;tel++)			// select range read the info in the datasheet
 800057a:	e7bd      	b.n	80004f8 <main+0x30>
 800057c:	2000015c 	.word	0x2000015c
 8000580:	200001e4 	.word	0x200001e4
 8000584:	2000019c 	.word	0x2000019c
 8000588:	200000c0 	.word	0x200000c0

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b094      	sub	sp, #80	; 0x50
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	2230      	movs	r2, #48	; 0x30
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f007 fd1a 	bl	8007fd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b0:	2300      	movs	r3, #0
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	4b28      	ldr	r3, [pc, #160]	; (8000658 <SystemClock_Config+0xcc>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	4a27      	ldr	r2, [pc, #156]	; (8000658 <SystemClock_Config+0xcc>)
 80005ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005be:	6413      	str	r3, [r2, #64]	; 0x40
 80005c0:	4b25      	ldr	r3, [pc, #148]	; (8000658 <SystemClock_Config+0xcc>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	4b22      	ldr	r3, [pc, #136]	; (800065c <SystemClock_Config+0xd0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a21      	ldr	r2, [pc, #132]	; (800065c <SystemClock_Config+0xd0>)
 80005d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4b1f      	ldr	r3, [pc, #124]	; (800065c <SystemClock_Config+0xd0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e8:	2301      	movs	r3, #1
 80005ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005fc:	2308      	movs	r3, #8
 80005fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000600:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000604:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000606:	2302      	movs	r3, #2
 8000608:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800060a:	2307      	movs	r3, #7
 800060c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	4618      	mov	r0, r3
 8000614:	f003 fafe 	bl	8003c14 <HAL_RCC_OscConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800061e:	f000 fa91 	bl	8000b44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000622:	230f      	movs	r3, #15
 8000624:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000626:	2302      	movs	r3, #2
 8000628:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800062e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000632:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000638:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800063a:	f107 030c 	add.w	r3, r7, #12
 800063e:	2105      	movs	r1, #5
 8000640:	4618      	mov	r0, r3
 8000642:	f003 fd57 	bl	80040f4 <HAL_RCC_ClockConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800064c:	f000 fa7a 	bl	8000b44 <Error_Handler>
  }
}
 8000650:	bf00      	nop
 8000652:	3750      	adds	r7, #80	; 0x50
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000666:	463b      	mov	r3, r7
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000672:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <MX_ADC1_Init+0x98>)
 8000674:	4a21      	ldr	r2, [pc, #132]	; (80006fc <MX_ADC1_Init+0x9c>)
 8000676:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <MX_ADC1_Init+0x98>)
 800067a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800067e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000680:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <MX_ADC1_Init+0x98>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000686:	4b1c      	ldr	r3, [pc, #112]	; (80006f8 <MX_ADC1_Init+0x98>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800068c:	4b1a      	ldr	r3, [pc, #104]	; (80006f8 <MX_ADC1_Init+0x98>)
 800068e:	2200      	movs	r2, #0
 8000690:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000692:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <MX_ADC1_Init+0x98>)
 8000694:	2200      	movs	r2, #0
 8000696:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800069a:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <MX_ADC1_Init+0x98>)
 800069c:	2200      	movs	r2, #0
 800069e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a0:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006a2:	4a17      	ldr	r2, [pc, #92]	; (8000700 <MX_ADC1_Init+0xa0>)
 80006a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006bc:	2201      	movs	r2, #1
 80006be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006c0:	480d      	ldr	r0, [pc, #52]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006c2:	f000 fce9 	bl	8001098 <HAL_ADC_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006cc:	f000 fa3a 	bl	8000b44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80006d0:	230b      	movs	r3, #11
 80006d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006dc:	463b      	mov	r3, r7
 80006de:	4619      	mov	r1, r3
 80006e0:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006e2:	f000 fe75 	bl	80013d0 <HAL_ADC_ConfigChannel>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006ec:	f000 fa2a 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	2000019c 	.word	0x2000019c
 80006fc:	40012000 	.word	0x40012000
 8000700:	0f000001 	.word	0x0f000001

08000704 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800070a:	463b      	mov	r3, r7
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000716:	4b21      	ldr	r3, [pc, #132]	; (800079c <MX_ADC2_Init+0x98>)
 8000718:	4a21      	ldr	r2, [pc, #132]	; (80007a0 <MX_ADC2_Init+0x9c>)
 800071a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800071c:	4b1f      	ldr	r3, [pc, #124]	; (800079c <MX_ADC2_Init+0x98>)
 800071e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000722:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000724:	4b1d      	ldr	r3, [pc, #116]	; (800079c <MX_ADC2_Init+0x98>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <MX_ADC2_Init+0x98>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000730:	4b1a      	ldr	r3, [pc, #104]	; (800079c <MX_ADC2_Init+0x98>)
 8000732:	2200      	movs	r2, #0
 8000734:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000736:	4b19      	ldr	r3, [pc, #100]	; (800079c <MX_ADC2_Init+0x98>)
 8000738:	2200      	movs	r2, #0
 800073a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800073e:	4b17      	ldr	r3, [pc, #92]	; (800079c <MX_ADC2_Init+0x98>)
 8000740:	2200      	movs	r2, #0
 8000742:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000744:	4b15      	ldr	r3, [pc, #84]	; (800079c <MX_ADC2_Init+0x98>)
 8000746:	4a17      	ldr	r2, [pc, #92]	; (80007a4 <MX_ADC2_Init+0xa0>)
 8000748:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_ADC2_Init+0x98>)
 800074c:	2200      	movs	r2, #0
 800074e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_ADC2_Init+0x98>)
 8000752:	2201      	movs	r2, #1
 8000754:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_ADC2_Init+0x98>)
 8000758:	2200      	movs	r2, #0
 800075a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_ADC2_Init+0x98>)
 8000760:	2201      	movs	r2, #1
 8000762:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000764:	480d      	ldr	r0, [pc, #52]	; (800079c <MX_ADC2_Init+0x98>)
 8000766:	f000 fc97 	bl	8001098 <HAL_ADC_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000770:	f000 f9e8 	bl	8000b44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000774:	230c      	movs	r3, #12
 8000776:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000778:	2301      	movs	r3, #1
 800077a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000780:	463b      	mov	r3, r7
 8000782:	4619      	mov	r1, r3
 8000784:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_ADC2_Init+0x98>)
 8000786:	f000 fe23 	bl	80013d0 <HAL_ADC_ConfigChannel>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000790:	f000 f9d8 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	200000c0 	.word	0x200000c0
 80007a0:	40012100 	.word	0x40012100
 80007a4:	0f000001 	.word	0x0f000001

080007a8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007ae:	463b      	mov	r3, r7
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007b6:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_DAC_Init+0x60>)
 80007b8:	4a14      	ldr	r2, [pc, #80]	; (800080c <MX_DAC_Init+0x64>)
 80007ba:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007bc:	4812      	ldr	r0, [pc, #72]	; (8000808 <MX_DAC_Init+0x60>)
 80007be:	f001 f936 	bl	8001a2e <HAL_DAC_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80007c8:	f000 f9bc 	bl	8000b44 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007d0:	2300      	movs	r3, #0
 80007d2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007d4:	463b      	mov	r3, r7
 80007d6:	2200      	movs	r2, #0
 80007d8:	4619      	mov	r1, r3
 80007da:	480b      	ldr	r0, [pc, #44]	; (8000808 <MX_DAC_Init+0x60>)
 80007dc:	f001 f9af 	bl	8001b3e <HAL_DAC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80007e6:	f000 f9ad 	bl	8000b44 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80007ea:	463b      	mov	r3, r7
 80007ec:	2210      	movs	r2, #16
 80007ee:	4619      	mov	r1, r3
 80007f0:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_DAC_Init+0x60>)
 80007f2:	f001 f9a4 	bl	8001b3e <HAL_DAC_ConfigChannel>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80007fc:	f000 f9a2 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200001e4 	.word	0x200001e4
 800080c:	40007400 	.word	0x40007400

08000810 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MX_I2C1_Init+0x50>)
 8000816:	4a13      	ldr	r2, [pc, #76]	; (8000864 <MX_I2C1_Init+0x54>)
 8000818:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_I2C1_Init+0x50>)
 800081c:	4a12      	ldr	r2, [pc, #72]	; (8000868 <MX_I2C1_Init+0x58>)
 800081e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_I2C1_Init+0x50>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_I2C1_Init+0x50>)
 8000828:	2200      	movs	r2, #0
 800082a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_I2C1_Init+0x50>)
 800082e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000832:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <MX_I2C1_Init+0x50>)
 8000836:	2200      	movs	r2, #0
 8000838:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_I2C1_Init+0x50>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <MX_I2C1_Init+0x50>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_I2C1_Init+0x50>)
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800084c:	4804      	ldr	r0, [pc, #16]	; (8000860 <MX_I2C1_Init+0x50>)
 800084e:	f003 f8a9 	bl	80039a4 <HAL_I2C_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000858:	f000 f974 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000108 	.word	0x20000108
 8000864:	40005400 	.word	0x40005400
 8000868:	000186a0 	.word	0x000186a0

0800086c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
	// note that the APB timerclock is used. In this example 168MHz/2 = 84MHz
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000872:	f107 0308 	add.w	r3, r7, #8
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000880:	463b      	mov	r3, r7
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */
  // timer 0.1 sec = 1000*8400 / 84000
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000888:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <MX_TIM3_Init+0x94>)
 800088a:	4a1e      	ldr	r2, [pc, #120]	; (8000904 <MX_TIM3_Init+0x98>)
 800088c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000;
 800088e:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <MX_TIM3_Init+0x94>)
 8000890:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000894:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000896:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <MX_TIM3_Init+0x94>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8400;
 800089c:	4b18      	ldr	r3, [pc, #96]	; (8000900 <MX_TIM3_Init+0x94>)
 800089e:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80008a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a4:	4b16      	ldr	r3, [pc, #88]	; (8000900 <MX_TIM3_Init+0x94>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008aa:	4b15      	ldr	r3, [pc, #84]	; (8000900 <MX_TIM3_Init+0x94>)
 80008ac:	2280      	movs	r2, #128	; 0x80
 80008ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008b0:	4813      	ldr	r0, [pc, #76]	; (8000900 <MX_TIM3_Init+0x94>)
 80008b2:	f003 fdfd 	bl	80044b0 <HAL_TIM_Base_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80008bc:	f000 f942 	bl	8000b44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008c6:	f107 0308 	add.w	r3, r7, #8
 80008ca:	4619      	mov	r1, r3
 80008cc:	480c      	ldr	r0, [pc, #48]	; (8000900 <MX_TIM3_Init+0x94>)
 80008ce:	f003 ff46 	bl	800475e <HAL_TIM_ConfigClockSource>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80008d8:	f000 f934 	bl	8000b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008dc:	2300      	movs	r3, #0
 80008de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008e4:	463b      	mov	r3, r7
 80008e6:	4619      	mov	r1, r3
 80008e8:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_TIM3_Init+0x94>)
 80008ea:	f004 f95b 	bl	8004ba4 <HAL_TIMEx_MasterConfigSynchronization>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80008f4:	f000 f926 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	3718      	adds	r7, #24
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	2000015c 	.word	0x2000015c
 8000904:	40000400 	.word	0x40000400

08000908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08c      	sub	sp, #48	; 0x30
 800090c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	61bb      	str	r3, [r7, #24]
 8000922:	4b81      	ldr	r3, [pc, #516]	; (8000b28 <MX_GPIO_Init+0x220>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a80      	ldr	r2, [pc, #512]	; (8000b28 <MX_GPIO_Init+0x220>)
 8000928:	f043 0310 	orr.w	r3, r3, #16
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b7e      	ldr	r3, [pc, #504]	; (8000b28 <MX_GPIO_Init+0x220>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0310 	and.w	r3, r3, #16
 8000936:	61bb      	str	r3, [r7, #24]
 8000938:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
 800093e:	4b7a      	ldr	r3, [pc, #488]	; (8000b28 <MX_GPIO_Init+0x220>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a79      	ldr	r2, [pc, #484]	; (8000b28 <MX_GPIO_Init+0x220>)
 8000944:	f043 0304 	orr.w	r3, r3, #4
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b77      	ldr	r3, [pc, #476]	; (8000b28 <MX_GPIO_Init+0x220>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0304 	and.w	r3, r3, #4
 8000952:	617b      	str	r3, [r7, #20]
 8000954:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	4b73      	ldr	r3, [pc, #460]	; (8000b28 <MX_GPIO_Init+0x220>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a72      	ldr	r2, [pc, #456]	; (8000b28 <MX_GPIO_Init+0x220>)
 8000960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b70      	ldr	r3, [pc, #448]	; (8000b28 <MX_GPIO_Init+0x220>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	4b6c      	ldr	r3, [pc, #432]	; (8000b28 <MX_GPIO_Init+0x220>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a6b      	ldr	r2, [pc, #428]	; (8000b28 <MX_GPIO_Init+0x220>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b69      	ldr	r3, [pc, #420]	; (8000b28 <MX_GPIO_Init+0x220>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60bb      	str	r3, [r7, #8]
 8000992:	4b65      	ldr	r3, [pc, #404]	; (8000b28 <MX_GPIO_Init+0x220>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a64      	ldr	r2, [pc, #400]	; (8000b28 <MX_GPIO_Init+0x220>)
 8000998:	f043 0302 	orr.w	r3, r3, #2
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b62      	ldr	r3, [pc, #392]	; (8000b28 <MX_GPIO_Init+0x220>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	4b5e      	ldr	r3, [pc, #376]	; (8000b28 <MX_GPIO_Init+0x220>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a5d      	ldr	r2, [pc, #372]	; (8000b28 <MX_GPIO_Init+0x220>)
 80009b4:	f043 0308 	orr.w	r3, r3, #8
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b5b      	ldr	r3, [pc, #364]	; (8000b28 <MX_GPIO_Init+0x220>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0308 	and.w	r3, r3, #8
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2108      	movs	r1, #8
 80009ca:	4858      	ldr	r0, [pc, #352]	; (8000b2c <MX_GPIO_Init+0x224>)
 80009cc:	f001 fac4 	bl	8001f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009d0:	2201      	movs	r2, #1
 80009d2:	2101      	movs	r1, #1
 80009d4:	4856      	ldr	r0, [pc, #344]	; (8000b30 <MX_GPIO_Init+0x228>)
 80009d6:	f001 fabf 	bl	8001f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009da:	2200      	movs	r2, #0
 80009dc:	f24f 0110 	movw	r1, #61456	; 0xf010
 80009e0:	4854      	ldr	r0, [pc, #336]	; (8000b34 <MX_GPIO_Init+0x22c>)
 80009e2:	f001 fab9 	bl	8001f58 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009e6:	2308      	movs	r3, #8
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	484b      	ldr	r0, [pc, #300]	; (8000b2c <MX_GPIO_Init+0x224>)
 80009fe:	f001 f911 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a02:	2301      	movs	r3, #1
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a06:	2301      	movs	r3, #1
 8000a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	4845      	ldr	r0, [pc, #276]	; (8000b30 <MX_GPIO_Init+0x228>)
 8000a1a:	f001 f903 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a1e:	2308      	movs	r3, #8
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	2302      	movs	r3, #2
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a2e:	2305      	movs	r3, #5
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	483d      	ldr	r0, [pc, #244]	; (8000b30 <MX_GPIO_Init+0x228>)
 8000a3a:	f001 f8f3 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a42:	4b3d      	ldr	r3, [pc, #244]	; (8000b38 <MX_GPIO_Init+0x230>)
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	483a      	ldr	r0, [pc, #232]	; (8000b3c <MX_GPIO_Init+0x234>)
 8000a52:	f001 f8e7 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000a56:	23c0      	movs	r3, #192	; 0xc0
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a66:	2305      	movs	r3, #5
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4832      	ldr	r0, [pc, #200]	; (8000b3c <MX_GPIO_Init+0x234>)
 8000a72:	f001 f8d7 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a76:	2304      	movs	r3, #4
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	4619      	mov	r1, r3
 8000a88:	482d      	ldr	r0, [pc, #180]	; (8000b40 <MX_GPIO_Init+0x238>)
 8000a8a:	f001 f8cb 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a94:	2302      	movs	r3, #2
 8000a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aa0:	2305      	movs	r3, #5
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	f107 031c 	add.w	r3, r7, #28
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4825      	ldr	r0, [pc, #148]	; (8000b40 <MX_GPIO_Init+0x238>)
 8000aac:	f001 f8ba 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ab0:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000ab4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	481a      	ldr	r0, [pc, #104]	; (8000b34 <MX_GPIO_Init+0x22c>)
 8000aca:	f001 f8ab 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ace:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ae0:	2306      	movs	r3, #6
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4811      	ldr	r0, [pc, #68]	; (8000b30 <MX_GPIO_Init+0x228>)
 8000aec:	f001 f89a 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000af0:	2320      	movs	r3, #32
 8000af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af4:	2300      	movs	r3, #0
 8000af6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	4619      	mov	r1, r3
 8000b02:	480c      	ldr	r0, [pc, #48]	; (8000b34 <MX_GPIO_Init+0x22c>)
 8000b04:	f001 f88e 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <MX_GPIO_Init+0x230>)
 8000b0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4804      	ldr	r0, [pc, #16]	; (8000b2c <MX_GPIO_Init+0x224>)
 8000b1c:	f001 f882 	bl	8001c24 <HAL_GPIO_Init>

}
 8000b20:	bf00      	nop
 8000b22:	3730      	adds	r7, #48	; 0x30
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	40020800 	.word	0x40020800
 8000b34:	40020c00 	.word	0x40020c00
 8000b38:	10120000 	.word	0x10120000
 8000b3c:	40020000 	.word	0x40020000
 8000b40:	40020400 	.word	0x40020400

08000b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
	...

08000b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	4a0f      	ldr	r2, [pc, #60]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b68:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	4a08      	ldr	r2, [pc, #32]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b84:	6413      	str	r3, [r2, #64]	; 0x40
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b92:	2007      	movs	r0, #7
 8000b94:	f000 ff0a 	bl	80019ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40023800 	.word	0x40023800

08000ba4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08c      	sub	sp, #48	; 0x30
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 031c 	add.w	r3, r7, #28
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a2e      	ldr	r2, [pc, #184]	; (8000c7c <HAL_ADC_MspInit+0xd8>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d128      	bne.n	8000c18 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61bb      	str	r3, [r7, #24]
 8000bca:	4b2d      	ldr	r3, [pc, #180]	; (8000c80 <HAL_ADC_MspInit+0xdc>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	4a2c      	ldr	r2, [pc, #176]	; (8000c80 <HAL_ADC_MspInit+0xdc>)
 8000bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd6:	4b2a      	ldr	r3, [pc, #168]	; (8000c80 <HAL_ADC_MspInit+0xdc>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bde:	61bb      	str	r3, [r7, #24]
 8000be0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
 8000be6:	4b26      	ldr	r3, [pc, #152]	; (8000c80 <HAL_ADC_MspInit+0xdc>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a25      	ldr	r2, [pc, #148]	; (8000c80 <HAL_ADC_MspInit+0xdc>)
 8000bec:	f043 0304 	orr.w	r3, r3, #4
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b23      	ldr	r3, [pc, #140]	; (8000c80 <HAL_ADC_MspInit+0xdc>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0304 	and.w	r3, r3, #4
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c02:	2303      	movs	r3, #3
 8000c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	4619      	mov	r1, r3
 8000c10:	481c      	ldr	r0, [pc, #112]	; (8000c84 <HAL_ADC_MspInit+0xe0>)
 8000c12:	f001 f807 	bl	8001c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000c16:	e02c      	b.n	8000c72 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a1a      	ldr	r2, [pc, #104]	; (8000c88 <HAL_ADC_MspInit+0xe4>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d127      	bne.n	8000c72 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <HAL_ADC_MspInit+0xdc>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	4a15      	ldr	r2, [pc, #84]	; (8000c80 <HAL_ADC_MspInit+0xdc>)
 8000c2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c30:	6453      	str	r3, [r2, #68]	; 0x44
 8000c32:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <HAL_ADC_MspInit+0xdc>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <HAL_ADC_MspInit+0xdc>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a0e      	ldr	r2, [pc, #56]	; (8000c80 <HAL_ADC_MspInit+0xdc>)
 8000c48:	f043 0304 	orr.w	r3, r3, #4
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <HAL_ADC_MspInit+0xdc>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0304 	and.w	r3, r3, #4
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000c5a:	2306      	movs	r3, #6
 8000c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4805      	ldr	r0, [pc, #20]	; (8000c84 <HAL_ADC_MspInit+0xe0>)
 8000c6e:	f000 ffd9 	bl	8001c24 <HAL_GPIO_Init>
}
 8000c72:	bf00      	nop
 8000c74:	3730      	adds	r7, #48	; 0x30
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40012000 	.word	0x40012000
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40020800 	.word	0x40020800
 8000c88:	40012100 	.word	0x40012100

08000c8c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	; 0x28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a17      	ldr	r2, [pc, #92]	; (8000d08 <HAL_DAC_MspInit+0x7c>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d127      	bne.n	8000cfe <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <HAL_DAC_MspInit+0x80>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	4a15      	ldr	r2, [pc, #84]	; (8000d0c <HAL_DAC_MspInit+0x80>)
 8000cb8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cbe:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <HAL_DAC_MspInit+0x80>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <HAL_DAC_MspInit+0x80>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a0e      	ldr	r2, [pc, #56]	; (8000d0c <HAL_DAC_MspInit+0x80>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <HAL_DAC_MspInit+0x80>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ce6:	2330      	movs	r3, #48	; 0x30
 8000ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cea:	2303      	movs	r3, #3
 8000cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4805      	ldr	r0, [pc, #20]	; (8000d10 <HAL_DAC_MspInit+0x84>)
 8000cfa:	f000 ff93 	bl	8001c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000cfe:	bf00      	nop
 8000d00:	3728      	adds	r7, #40	; 0x28
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40007400 	.word	0x40007400
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020000 	.word	0x40020000

08000d14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	; 0x28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a19      	ldr	r2, [pc, #100]	; (8000d98 <HAL_I2C_MspInit+0x84>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d12c      	bne.n	8000d90 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <HAL_I2C_MspInit+0x88>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a17      	ldr	r2, [pc, #92]	; (8000d9c <HAL_I2C_MspInit+0x88>)
 8000d40:	f043 0302 	orr.w	r3, r3, #2
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <HAL_I2C_MspInit+0x88>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d52:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d58:	2312      	movs	r3, #18
 8000d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d64:	2304      	movs	r3, #4
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	480c      	ldr	r0, [pc, #48]	; (8000da0 <HAL_I2C_MspInit+0x8c>)
 8000d70:	f000 ff58 	bl	8001c24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <HAL_I2C_MspInit+0x88>)
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7c:	4a07      	ldr	r2, [pc, #28]	; (8000d9c <HAL_I2C_MspInit+0x88>)
 8000d7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d82:	6413      	str	r3, [r2, #64]	; 0x40
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <HAL_I2C_MspInit+0x88>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d90:	bf00      	nop
 8000d92:	3728      	adds	r7, #40	; 0x28
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40005400 	.word	0x40005400
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40020400 	.word	0x40020400

08000da4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0e      	ldr	r2, [pc, #56]	; (8000dec <HAL_TIM_Base_MspInit+0x48>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d115      	bne.n	8000de2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <HAL_TIM_Base_MspInit+0x4c>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	4a0c      	ldr	r2, [pc, #48]	; (8000df0 <HAL_TIM_Base_MspInit+0x4c>)
 8000dc0:	f043 0302 	orr.w	r3, r3, #2
 8000dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <HAL_TIM_Base_MspInit+0x4c>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	201d      	movs	r0, #29
 8000dd8:	f000 fdf3 	bl	80019c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ddc:	201d      	movs	r0, #29
 8000dde:	f000 fe0c 	bl	80019fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40000400 	.word	0x40000400
 8000df0:	40023800 	.word	0x40023800

08000df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <HardFault_Handler+0x4>

08000e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <MemManage_Handler+0x4>

08000e0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e12:	e7fe      	b.n	8000e12 <BusFault_Handler+0x4>

08000e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <UsageFault_Handler+0x4>

08000e1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e48:	f000 f8e4 	bl	8001014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e54:	4804      	ldr	r0, [pc, #16]	; (8000e68 <TIM3_IRQHandler+0x18>)
 8000e56:	f003 fb7a 	bl	800454e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8000e5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e5e:	4803      	ldr	r0, [pc, #12]	; (8000e6c <TIM3_IRQHandler+0x1c>)
 8000e60:	f001 f893 	bl	8001f8a <HAL_GPIO_TogglePin>
  /* USER CODE END TIM3_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	2000015c 	.word	0x2000015c
 8000e6c:	40020c00 	.word	0x40020c00

08000e70 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e74:	4802      	ldr	r0, [pc, #8]	; (8000e80 <OTG_FS_IRQHandler+0x10>)
 8000e76:	f001 fb33 	bl	80024e0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	200005d4 	.word	0x200005d4

08000e84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e8c:	4a14      	ldr	r2, [pc, #80]	; (8000ee0 <_sbrk+0x5c>)
 8000e8e:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <_sbrk+0x60>)
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e98:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <_sbrk+0x64>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d102      	bne.n	8000ea6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <_sbrk+0x64>)
 8000ea2:	4a12      	ldr	r2, [pc, #72]	; (8000eec <_sbrk+0x68>)
 8000ea4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <_sbrk+0x64>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d207      	bcs.n	8000ec4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb4:	f007 f854 	bl	8007f60 <__errno>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	230c      	movs	r3, #12
 8000ebc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ec2:	e009      	b.n	8000ed8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <_sbrk+0x64>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eca:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <_sbrk+0x64>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <_sbrk+0x64>)
 8000ed4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20020000 	.word	0x20020000
 8000ee4:	00000400 	.word	0x00000400
 8000ee8:	200000ac 	.word	0x200000ac
 8000eec:	200008a0 	.word	0x200008a0

08000ef0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <SystemInit+0x28>)
 8000ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000efa:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <SystemInit+0x28>)
 8000efc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <SystemInit+0x28>)
 8000f06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f0a:	609a      	str	r2, [r3, #8]
#endif
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f54 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f22:	e003      	b.n	8000f2c <LoopCopyDataInit>

08000f24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f2a:	3104      	adds	r1, #4

08000f2c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f2c:	480b      	ldr	r0, [pc, #44]	; (8000f5c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f34:	d3f6      	bcc.n	8000f24 <CopyDataInit>
  ldr  r2, =_sbss
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f38:	e002      	b.n	8000f40 <LoopFillZerobss>

08000f3a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f3a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f3c:	f842 3b04 	str.w	r3, [r2], #4

08000f40 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f42:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f44:	d3f9      	bcc.n	8000f3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f46:	f7ff ffd3 	bl	8000ef0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f007 f80f 	bl	8007f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f4e:	f7ff fabb 	bl	80004c8 <main>
  bx  lr    
 8000f52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f54:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f58:	0800819c 	.word	0x0800819c
  ldr  r0, =_sdata
 8000f5c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f60:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000f64:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000f68:	2000089c 	.word	0x2000089c

08000f6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC_IRQHandler>
	...

08000f70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f74:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <HAL_Init+0x40>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a0d      	ldr	r2, [pc, #52]	; (8000fb0 <HAL_Init+0x40>)
 8000f7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f80:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <HAL_Init+0x40>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <HAL_Init+0x40>)
 8000f86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a07      	ldr	r2, [pc, #28]	; (8000fb0 <HAL_Init+0x40>)
 8000f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f98:	2003      	movs	r0, #3
 8000f9a:	f000 fd07 	bl	80019ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f000 f808 	bl	8000fb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa4:	f7ff fdd6 	bl	8000b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40023c00 	.word	0x40023c00

08000fb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <HAL_InitTick+0x54>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <HAL_InitTick+0x58>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 fd1f 	bl	8001a16 <HAL_SYSTICK_Config>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e00e      	b.n	8001000 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b0f      	cmp	r3, #15
 8000fe6:	d80a      	bhi.n	8000ffe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ff0:	f000 fce7 	bl	80019c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ff4:	4a06      	ldr	r2, [pc, #24]	; (8001010 <HAL_InitTick+0x5c>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	e000      	b.n	8001000 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
}
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000000 	.word	0x20000000
 800100c:	20000008 	.word	0x20000008
 8001010:	20000004 	.word	0x20000004

08001014 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <HAL_IncTick+0x20>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	461a      	mov	r2, r3
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <HAL_IncTick+0x24>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4413      	add	r3, r2
 8001024:	4a04      	ldr	r2, [pc, #16]	; (8001038 <HAL_IncTick+0x24>)
 8001026:	6013      	str	r3, [r2, #0]
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20000008 	.word	0x20000008
 8001038:	200001f8 	.word	0x200001f8

0800103c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return uwTick;
 8001040:	4b03      	ldr	r3, [pc, #12]	; (8001050 <HAL_GetTick+0x14>)
 8001042:	681b      	ldr	r3, [r3, #0]
}
 8001044:	4618      	mov	r0, r3
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	200001f8 	.word	0x200001f8

08001054 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800105c:	f7ff ffee 	bl	800103c <HAL_GetTick>
 8001060:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800106c:	d005      	beq.n	800107a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <HAL_Delay+0x40>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	461a      	mov	r2, r3
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4413      	add	r3, r2
 8001078:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800107a:	bf00      	nop
 800107c:	f7ff ffde 	bl	800103c <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	429a      	cmp	r2, r3
 800108a:	d8f7      	bhi.n	800107c <HAL_Delay+0x28>
  {
  }
}
 800108c:	bf00      	nop
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000008 	.word	0x20000008

08001098 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010a0:	2300      	movs	r3, #0
 80010a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d101      	bne.n	80010ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e033      	b.n	8001116 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d109      	bne.n	80010ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff fd74 	bl	8000ba4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	f003 0310 	and.w	r3, r3, #16
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d118      	bne.n	8001108 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010de:	f023 0302 	bic.w	r3, r3, #2
 80010e2:	f043 0202 	orr.w	r2, r3, #2
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f000 fa92 	bl	8001614 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	f023 0303 	bic.w	r3, r3, #3
 80010fe:	f043 0201 	orr.w	r2, r3, #1
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	641a      	str	r2, [r3, #64]	; 0x40
 8001106:	e001      	b.n	800110c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001114:	7bfb      	ldrb	r3, [r7, #15]
}
 8001116:	4618      	mov	r0, r3
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001128:	2300      	movs	r3, #0
 800112a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001132:	2b01      	cmp	r3, #1
 8001134:	d101      	bne.n	800113a <HAL_ADC_Start+0x1a>
 8001136:	2302      	movs	r3, #2
 8001138:	e0a5      	b.n	8001286 <HAL_ADC_Start+0x166>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2201      	movs	r2, #1
 800113e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	2b01      	cmp	r3, #1
 800114e:	d018      	beq.n	8001182 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	689a      	ldr	r2, [r3, #8]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 0201 	orr.w	r2, r2, #1
 800115e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001160:	4b4c      	ldr	r3, [pc, #304]	; (8001294 <HAL_ADC_Start+0x174>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a4c      	ldr	r2, [pc, #304]	; (8001298 <HAL_ADC_Start+0x178>)
 8001166:	fba2 2303 	umull	r2, r3, r2, r3
 800116a:	0c9a      	lsrs	r2, r3, #18
 800116c:	4613      	mov	r3, r2
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	4413      	add	r3, r2
 8001172:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001174:	e002      	b.n	800117c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	3b01      	subs	r3, #1
 800117a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f9      	bne.n	8001176 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	2b01      	cmp	r3, #1
 800118e:	d179      	bne.n	8001284 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001198:	f023 0301 	bic.w	r3, r3, #1
 800119c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d007      	beq.n	80011c2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011ce:	d106      	bne.n	80011de <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d4:	f023 0206 	bic.w	r2, r3, #6
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	645a      	str	r2, [r3, #68]	; 0x44
 80011dc:	e002      	b.n	80011e4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011ec:	4b2b      	ldr	r3, [pc, #172]	; (800129c <HAL_ADC_Start+0x17c>)
 80011ee:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011f8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f003 031f 	and.w	r3, r3, #31
 8001202:	2b00      	cmp	r3, #0
 8001204:	d12a      	bne.n	800125c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a25      	ldr	r2, [pc, #148]	; (80012a0 <HAL_ADC_Start+0x180>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d015      	beq.n	800123c <HAL_ADC_Start+0x11c>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a23      	ldr	r2, [pc, #140]	; (80012a4 <HAL_ADC_Start+0x184>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d105      	bne.n	8001226 <HAL_ADC_Start+0x106>
 800121a:	4b20      	ldr	r3, [pc, #128]	; (800129c <HAL_ADC_Start+0x17c>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 031f 	and.w	r3, r3, #31
 8001222:	2b00      	cmp	r3, #0
 8001224:	d00a      	beq.n	800123c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a1f      	ldr	r2, [pc, #124]	; (80012a8 <HAL_ADC_Start+0x188>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d129      	bne.n	8001284 <HAL_ADC_Start+0x164>
 8001230:	4b1a      	ldr	r3, [pc, #104]	; (800129c <HAL_ADC_Start+0x17c>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 031f 	and.w	r3, r3, #31
 8001238:	2b0f      	cmp	r3, #15
 800123a:	d823      	bhi.n	8001284 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d11c      	bne.n	8001284 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	e013      	b.n	8001284 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0f      	ldr	r2, [pc, #60]	; (80012a0 <HAL_ADC_Start+0x180>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d10e      	bne.n	8001284 <HAL_ADC_Start+0x164>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d107      	bne.n	8001284 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	689a      	ldr	r2, [r3, #8]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001282:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	20000000 	.word	0x20000000
 8001298:	431bde83 	.word	0x431bde83
 800129c:	40012300 	.word	0x40012300
 80012a0:	40012000 	.word	0x40012000
 80012a4:	40012100 	.word	0x40012100
 80012a8:	40012200 	.word	0x40012200

080012ac <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012c8:	d113      	bne.n	80012f2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012d8:	d10b      	bne.n	80012f2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f043 0220 	orr.w	r2, r3, #32
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e05c      	b.n	80013ac <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80012f2:	f7ff fea3 	bl	800103c <HAL_GetTick>
 80012f6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012f8:	e01a      	b.n	8001330 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001300:	d016      	beq.n	8001330 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d007      	beq.n	8001318 <HAL_ADC_PollForConversion+0x6c>
 8001308:	f7ff fe98 	bl	800103c <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	683a      	ldr	r2, [r7, #0]
 8001314:	429a      	cmp	r2, r3
 8001316:	d20b      	bcs.n	8001330 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	f043 0204 	orr.w	r2, r3, #4
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e03d      	b.n	80013ac <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b02      	cmp	r3, #2
 800133c:	d1dd      	bne.n	80012fa <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f06f 0212 	mvn.w	r2, #18
 8001346:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d123      	bne.n	80013aa <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001366:	2b00      	cmp	r3, #0
 8001368:	d11f      	bne.n	80013aa <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001370:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001374:	2b00      	cmp	r3, #0
 8001376:	d006      	beq.n	8001386 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001382:	2b00      	cmp	r3, #0
 8001384:	d111      	bne.n	80013aa <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d105      	bne.n	80013aa <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f043 0201 	orr.w	r2, r3, #1
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013da:	2300      	movs	r3, #0
 80013dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d101      	bne.n	80013ec <HAL_ADC_ConfigChannel+0x1c>
 80013e8:	2302      	movs	r3, #2
 80013ea:	e105      	b.n	80015f8 <HAL_ADC_ConfigChannel+0x228>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2201      	movs	r2, #1
 80013f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b09      	cmp	r3, #9
 80013fa:	d925      	bls.n	8001448 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	68d9      	ldr	r1, [r3, #12]
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	b29b      	uxth	r3, r3
 8001408:	461a      	mov	r2, r3
 800140a:	4613      	mov	r3, r2
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	4413      	add	r3, r2
 8001410:	3b1e      	subs	r3, #30
 8001412:	2207      	movs	r2, #7
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43da      	mvns	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	400a      	ands	r2, r1
 8001420:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68d9      	ldr	r1, [r3, #12]
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	b29b      	uxth	r3, r3
 8001432:	4618      	mov	r0, r3
 8001434:	4603      	mov	r3, r0
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	4403      	add	r3, r0
 800143a:	3b1e      	subs	r3, #30
 800143c:	409a      	lsls	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	430a      	orrs	r2, r1
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	e022      	b.n	800148e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6919      	ldr	r1, [r3, #16]
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	b29b      	uxth	r3, r3
 8001454:	461a      	mov	r2, r3
 8001456:	4613      	mov	r3, r2
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	4413      	add	r3, r2
 800145c:	2207      	movs	r2, #7
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43da      	mvns	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	400a      	ands	r2, r1
 800146a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6919      	ldr	r1, [r3, #16]
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	b29b      	uxth	r3, r3
 800147c:	4618      	mov	r0, r3
 800147e:	4603      	mov	r3, r0
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4403      	add	r3, r0
 8001484:	409a      	lsls	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	430a      	orrs	r2, r1
 800148c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b06      	cmp	r3, #6
 8001494:	d824      	bhi.n	80014e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	4613      	mov	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	3b05      	subs	r3, #5
 80014a8:	221f      	movs	r2, #31
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43da      	mvns	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	400a      	ands	r2, r1
 80014b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	4618      	mov	r0, r3
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	4613      	mov	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	3b05      	subs	r3, #5
 80014d2:	fa00 f203 	lsl.w	r2, r0, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	430a      	orrs	r2, r1
 80014dc:	635a      	str	r2, [r3, #52]	; 0x34
 80014de:	e04c      	b.n	800157a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b0c      	cmp	r3, #12
 80014e6:	d824      	bhi.n	8001532 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685a      	ldr	r2, [r3, #4]
 80014f2:	4613      	mov	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	3b23      	subs	r3, #35	; 0x23
 80014fa:	221f      	movs	r2, #31
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43da      	mvns	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	400a      	ands	r2, r1
 8001508:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	b29b      	uxth	r3, r3
 8001516:	4618      	mov	r0, r3
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	3b23      	subs	r3, #35	; 0x23
 8001524:	fa00 f203 	lsl.w	r2, r0, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	430a      	orrs	r2, r1
 800152e:	631a      	str	r2, [r3, #48]	; 0x30
 8001530:	e023      	b.n	800157a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	4613      	mov	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	3b41      	subs	r3, #65	; 0x41
 8001544:	221f      	movs	r2, #31
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43da      	mvns	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	400a      	ands	r2, r1
 8001552:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	b29b      	uxth	r3, r3
 8001560:	4618      	mov	r0, r3
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	4613      	mov	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4413      	add	r3, r2
 800156c:	3b41      	subs	r3, #65	; 0x41
 800156e:	fa00 f203 	lsl.w	r2, r0, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	430a      	orrs	r2, r1
 8001578:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800157a:	4b22      	ldr	r3, [pc, #136]	; (8001604 <HAL_ADC_ConfigChannel+0x234>)
 800157c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a21      	ldr	r2, [pc, #132]	; (8001608 <HAL_ADC_ConfigChannel+0x238>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d109      	bne.n	800159c <HAL_ADC_ConfigChannel+0x1cc>
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b12      	cmp	r3, #18
 800158e:	d105      	bne.n	800159c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a19      	ldr	r2, [pc, #100]	; (8001608 <HAL_ADC_ConfigChannel+0x238>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d123      	bne.n	80015ee <HAL_ADC_ConfigChannel+0x21e>
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2b10      	cmp	r3, #16
 80015ac:	d003      	beq.n	80015b6 <HAL_ADC_ConfigChannel+0x1e6>
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2b11      	cmp	r3, #17
 80015b4:	d11b      	bne.n	80015ee <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2b10      	cmp	r3, #16
 80015c8:	d111      	bne.n	80015ee <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <HAL_ADC_ConfigChannel+0x23c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a10      	ldr	r2, [pc, #64]	; (8001610 <HAL_ADC_ConfigChannel+0x240>)
 80015d0:	fba2 2303 	umull	r2, r3, r2, r3
 80015d4:	0c9a      	lsrs	r2, r3, #18
 80015d6:	4613      	mov	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015e0:	e002      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	3b01      	subs	r3, #1
 80015e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1f9      	bne.n	80015e2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	40012300 	.word	0x40012300
 8001608:	40012000 	.word	0x40012000
 800160c:	20000000 	.word	0x20000000
 8001610:	431bde83 	.word	0x431bde83

08001614 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800161c:	4b79      	ldr	r3, [pc, #484]	; (8001804 <ADC_Init+0x1f0>)
 800161e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	431a      	orrs	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001648:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6859      	ldr	r1, [r3, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	021a      	lsls	r2, r3, #8
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800166c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6859      	ldr	r1, [r3, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	430a      	orrs	r2, r1
 800167e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689a      	ldr	r2, [r3, #8]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800168e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6899      	ldr	r1, [r3, #8]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	68da      	ldr	r2, [r3, #12]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	430a      	orrs	r2, r1
 80016a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a6:	4a58      	ldr	r2, [pc, #352]	; (8001808 <ADC_Init+0x1f4>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d022      	beq.n	80016f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689a      	ldr	r2, [r3, #8]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6899      	ldr	r1, [r3, #8]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6899      	ldr	r1, [r3, #8]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	e00f      	b.n	8001712 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001700:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001710:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 0202 	bic.w	r2, r2, #2
 8001720:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6899      	ldr	r1, [r3, #8]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	7e1b      	ldrb	r3, [r3, #24]
 800172c:	005a      	lsls	r2, r3, #1
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	430a      	orrs	r2, r1
 8001734:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 3020 	ldrb.w	r3, [r3, #32]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d01b      	beq.n	8001778 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800174e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800175e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6859      	ldr	r1, [r3, #4]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176a:	3b01      	subs	r3, #1
 800176c:	035a      	lsls	r2, r3, #13
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	e007      	b.n	8001788 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001786:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001796:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	051a      	lsls	r2, r3, #20
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6899      	ldr	r1, [r3, #8]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017ca:	025a      	lsls	r2, r3, #9
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6899      	ldr	r1, [r3, #8]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	029a      	lsls	r2, r3, #10
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	430a      	orrs	r2, r1
 80017f6:	609a      	str	r2, [r3, #8]
}
 80017f8:	bf00      	nop
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	40012300 	.word	0x40012300
 8001808:	0f000001 	.word	0x0f000001

0800180c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <__NVIC_SetPriorityGrouping+0x44>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001828:	4013      	ands	r3, r2
 800182a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001834:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800183c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800183e:	4a04      	ldr	r2, [pc, #16]	; (8001850 <__NVIC_SetPriorityGrouping+0x44>)
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	60d3      	str	r3, [r2, #12]
}
 8001844:	bf00      	nop
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001858:	4b04      	ldr	r3, [pc, #16]	; (800186c <__NVIC_GetPriorityGrouping+0x18>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	0a1b      	lsrs	r3, r3, #8
 800185e:	f003 0307 	and.w	r3, r3, #7
}
 8001862:	4618      	mov	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	2b00      	cmp	r3, #0
 8001880:	db0b      	blt.n	800189a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	f003 021f 	and.w	r2, r3, #31
 8001888:	4907      	ldr	r1, [pc, #28]	; (80018a8 <__NVIC_EnableIRQ+0x38>)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	095b      	lsrs	r3, r3, #5
 8001890:	2001      	movs	r0, #1
 8001892:	fa00 f202 	lsl.w	r2, r0, r2
 8001896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000e100 	.word	0xe000e100

080018ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	6039      	str	r1, [r7, #0]
 80018b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	db0a      	blt.n	80018d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	490c      	ldr	r1, [pc, #48]	; (80018f8 <__NVIC_SetPriority+0x4c>)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	0112      	lsls	r2, r2, #4
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	440b      	add	r3, r1
 80018d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d4:	e00a      	b.n	80018ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	4908      	ldr	r1, [pc, #32]	; (80018fc <__NVIC_SetPriority+0x50>)
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	3b04      	subs	r3, #4
 80018e4:	0112      	lsls	r2, r2, #4
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	440b      	add	r3, r1
 80018ea:	761a      	strb	r2, [r3, #24]
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000e100 	.word	0xe000e100
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001900:	b480      	push	{r7}
 8001902:	b089      	sub	sp, #36	; 0x24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f1c3 0307 	rsb	r3, r3, #7
 800191a:	2b04      	cmp	r3, #4
 800191c:	bf28      	it	cs
 800191e:	2304      	movcs	r3, #4
 8001920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3304      	adds	r3, #4
 8001926:	2b06      	cmp	r3, #6
 8001928:	d902      	bls.n	8001930 <NVIC_EncodePriority+0x30>
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3b03      	subs	r3, #3
 800192e:	e000      	b.n	8001932 <NVIC_EncodePriority+0x32>
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001934:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43da      	mvns	r2, r3
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	401a      	ands	r2, r3
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001948:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	fa01 f303 	lsl.w	r3, r1, r3
 8001952:	43d9      	mvns	r1, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001958:	4313      	orrs	r3, r2
         );
}
 800195a:	4618      	mov	r0, r3
 800195c:	3724      	adds	r7, #36	; 0x24
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3b01      	subs	r3, #1
 8001974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001978:	d301      	bcc.n	800197e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800197a:	2301      	movs	r3, #1
 800197c:	e00f      	b.n	800199e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800197e:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <SysTick_Config+0x40>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3b01      	subs	r3, #1
 8001984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001986:	210f      	movs	r1, #15
 8001988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800198c:	f7ff ff8e 	bl	80018ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001990:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <SysTick_Config+0x40>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001996:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <SysTick_Config+0x40>)
 8001998:	2207      	movs	r2, #7
 800199a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	e000e010 	.word	0xe000e010

080019ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff ff29 	bl	800180c <__NVIC_SetPriorityGrouping>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b086      	sub	sp, #24
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	607a      	str	r2, [r7, #4]
 80019ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019d4:	f7ff ff3e 	bl	8001854 <__NVIC_GetPriorityGrouping>
 80019d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	68b9      	ldr	r1, [r7, #8]
 80019de:	6978      	ldr	r0, [r7, #20]
 80019e0:	f7ff ff8e 	bl	8001900 <NVIC_EncodePriority>
 80019e4:	4602      	mov	r2, r0
 80019e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ea:	4611      	mov	r1, r2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ff5d 	bl	80018ac <__NVIC_SetPriority>
}
 80019f2:	bf00      	nop
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	4603      	mov	r3, r0
 8001a02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff ff31 	bl	8001870 <__NVIC_EnableIRQ>
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff ffa2 	bl	8001968 <SysTick_Config>
 8001a24:	4603      	mov	r3, r0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e014      	b.n	8001a6a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	791b      	ldrb	r3, [r3, #4]
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d105      	bne.n	8001a56 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff f91b 	bl	8000c8c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2202      	movs	r2, #2
 8001a5a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b085      	sub	sp, #20
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
 8001a7a:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	2300      	movs	r3, #0
 8001a82:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	795b      	ldrb	r3, [r3, #5]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d101      	bne.n	8001a90 <HAL_DAC_Start+0x1e>
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	e050      	b.n	8001b32 <HAL_DAC_Start+0xc0>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2202      	movs	r2, #2
 8001a9a:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6819      	ldr	r1, [r3, #0]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d11a      	bne.n	8001aec <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001acc:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2b04      	cmp	r3, #4
 8001ad2:	d127      	bne.n	8001b24 <HAL_DAC_Start+0xb2>
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	2b38      	cmp	r3, #56	; 0x38
 8001ad8:	d124      	bne.n	8001b24 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f042 0201 	orr.w	r2, r2, #1
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	e01b      	b.n	8001b24 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001af6:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8001b02:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001b0a:	d10b      	bne.n	8001b24 <HAL_DAC_Start+0xb2>
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8001b12:	d107      	bne.n	8001b24 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0202 	orr.w	r2, r2, #2
 8001b22:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b087      	sub	sp, #28
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	60f8      	str	r0, [r7, #12]
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	795b      	ldrb	r3, [r3, #5]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d101      	bne.n	8001b5e <HAL_DAC_ConfigChannel+0x20>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e036      	b.n	8001bcc <HAL_DAC_ConfigChannel+0x8e>
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2201      	movs	r2, #1
 8001b62:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2202      	movs	r2, #2
 8001b68:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001b72:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	4013      	ands	r3, r2
 8001b82:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6819      	ldr	r1, [r3, #0]
 8001bac:	22c0      	movs	r2, #192	; 0xc0
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43da      	mvns	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	400a      	ands	r2, r1
 8001bbc:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	371c      	adds	r7, #28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8001bd8:	b480      	push	{r7}
 8001bda:	b087      	sub	sp, #28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d105      	bne.n	8001c02 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	3308      	adds	r3, #8
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	e004      	b.n	8001c0c <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4413      	add	r3, r2
 8001c08:	3314      	adds	r3, #20
 8001c0a:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	371c      	adds	r7, #28
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b089      	sub	sp, #36	; 0x24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
 8001c3e:	e16b      	b.n	8001f18 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c40:	2201      	movs	r2, #1
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	f040 815a 	bne.w	8001f12 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d00b      	beq.n	8001c7e <HAL_GPIO_Init+0x5a>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d007      	beq.n	8001c7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c72:	2b11      	cmp	r3, #17
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b12      	cmp	r3, #18
 8001c7c:	d130      	bne.n	8001ce0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	2203      	movs	r2, #3
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4013      	ands	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	68da      	ldr	r2, [r3, #12]
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	091b      	lsrs	r3, r3, #4
 8001cca:	f003 0201 	and.w	r2, r3, #1
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	2203      	movs	r2, #3
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0xfc>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b12      	cmp	r3, #18
 8001d1e:	d123      	bne.n	8001d68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	08da      	lsrs	r2, r3, #3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3208      	adds	r2, #8
 8001d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	220f      	movs	r2, #15
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	691a      	ldr	r2, [r3, #16]
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	08da      	lsrs	r2, r3, #3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3208      	adds	r2, #8
 8001d62:	69b9      	ldr	r1, [r7, #24]
 8001d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	2203      	movs	r2, #3
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0203 	and.w	r2, r3, #3
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 80b4 	beq.w	8001f12 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	4b5f      	ldr	r3, [pc, #380]	; (8001f2c <HAL_GPIO_Init+0x308>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	4a5e      	ldr	r2, [pc, #376]	; (8001f2c <HAL_GPIO_Init+0x308>)
 8001db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dba:	4b5c      	ldr	r3, [pc, #368]	; (8001f2c <HAL_GPIO_Init+0x308>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dc6:	4a5a      	ldr	r2, [pc, #360]	; (8001f30 <HAL_GPIO_Init+0x30c>)
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	089b      	lsrs	r3, r3, #2
 8001dcc:	3302      	adds	r3, #2
 8001dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	220f      	movs	r2, #15
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4013      	ands	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a51      	ldr	r2, [pc, #324]	; (8001f34 <HAL_GPIO_Init+0x310>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d02b      	beq.n	8001e4a <HAL_GPIO_Init+0x226>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a50      	ldr	r2, [pc, #320]	; (8001f38 <HAL_GPIO_Init+0x314>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d025      	beq.n	8001e46 <HAL_GPIO_Init+0x222>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4f      	ldr	r2, [pc, #316]	; (8001f3c <HAL_GPIO_Init+0x318>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d01f      	beq.n	8001e42 <HAL_GPIO_Init+0x21e>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4e      	ldr	r2, [pc, #312]	; (8001f40 <HAL_GPIO_Init+0x31c>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d019      	beq.n	8001e3e <HAL_GPIO_Init+0x21a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a4d      	ldr	r2, [pc, #308]	; (8001f44 <HAL_GPIO_Init+0x320>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d013      	beq.n	8001e3a <HAL_GPIO_Init+0x216>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a4c      	ldr	r2, [pc, #304]	; (8001f48 <HAL_GPIO_Init+0x324>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d00d      	beq.n	8001e36 <HAL_GPIO_Init+0x212>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a4b      	ldr	r2, [pc, #300]	; (8001f4c <HAL_GPIO_Init+0x328>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d007      	beq.n	8001e32 <HAL_GPIO_Init+0x20e>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a4a      	ldr	r2, [pc, #296]	; (8001f50 <HAL_GPIO_Init+0x32c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d101      	bne.n	8001e2e <HAL_GPIO_Init+0x20a>
 8001e2a:	2307      	movs	r3, #7
 8001e2c:	e00e      	b.n	8001e4c <HAL_GPIO_Init+0x228>
 8001e2e:	2308      	movs	r3, #8
 8001e30:	e00c      	b.n	8001e4c <HAL_GPIO_Init+0x228>
 8001e32:	2306      	movs	r3, #6
 8001e34:	e00a      	b.n	8001e4c <HAL_GPIO_Init+0x228>
 8001e36:	2305      	movs	r3, #5
 8001e38:	e008      	b.n	8001e4c <HAL_GPIO_Init+0x228>
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	e006      	b.n	8001e4c <HAL_GPIO_Init+0x228>
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e004      	b.n	8001e4c <HAL_GPIO_Init+0x228>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e002      	b.n	8001e4c <HAL_GPIO_Init+0x228>
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <HAL_GPIO_Init+0x228>
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	69fa      	ldr	r2, [r7, #28]
 8001e4e:	f002 0203 	and.w	r2, r2, #3
 8001e52:	0092      	lsls	r2, r2, #2
 8001e54:	4093      	lsls	r3, r2
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e5c:	4934      	ldr	r1, [pc, #208]	; (8001f30 <HAL_GPIO_Init+0x30c>)
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	089b      	lsrs	r3, r3, #2
 8001e62:	3302      	adds	r3, #2
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e6a:	4b3a      	ldr	r3, [pc, #232]	; (8001f54 <HAL_GPIO_Init+0x330>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e8e:	4a31      	ldr	r2, [pc, #196]	; (8001f54 <HAL_GPIO_Init+0x330>)
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e94:	4b2f      	ldr	r3, [pc, #188]	; (8001f54 <HAL_GPIO_Init+0x330>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eb8:	4a26      	ldr	r2, [pc, #152]	; (8001f54 <HAL_GPIO_Init+0x330>)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ebe:	4b25      	ldr	r3, [pc, #148]	; (8001f54 <HAL_GPIO_Init+0x330>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ee2:	4a1c      	ldr	r2, [pc, #112]	; (8001f54 <HAL_GPIO_Init+0x330>)
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ee8:	4b1a      	ldr	r3, [pc, #104]	; (8001f54 <HAL_GPIO_Init+0x330>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f0c:	4a11      	ldr	r2, [pc, #68]	; (8001f54 <HAL_GPIO_Init+0x330>)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3301      	adds	r3, #1
 8001f16:	61fb      	str	r3, [r7, #28]
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	2b0f      	cmp	r3, #15
 8001f1c:	f67f ae90 	bls.w	8001c40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f20:	bf00      	nop
 8001f22:	3724      	adds	r7, #36	; 0x24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40013800 	.word	0x40013800
 8001f34:	40020000 	.word	0x40020000
 8001f38:	40020400 	.word	0x40020400
 8001f3c:	40020800 	.word	0x40020800
 8001f40:	40020c00 	.word	0x40020c00
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40021400 	.word	0x40021400
 8001f4c:	40021800 	.word	0x40021800
 8001f50:	40021c00 	.word	0x40021c00
 8001f54:	40013c00 	.word	0x40013c00

08001f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	807b      	strh	r3, [r7, #2]
 8001f64:	4613      	mov	r3, r2
 8001f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f68:	787b      	ldrb	r3, [r7, #1]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f6e:	887a      	ldrh	r2, [r7, #2]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f74:	e003      	b.n	8001f7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f76:	887b      	ldrh	r3, [r7, #2]
 8001f78:	041a      	lsls	r2, r3, #16
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	619a      	str	r2, [r3, #24]
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	460b      	mov	r3, r1
 8001f94:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	695a      	ldr	r2, [r3, #20]
 8001f9a:	887b      	ldrh	r3, [r7, #2]
 8001f9c:	401a      	ands	r2, r3
 8001f9e:	887b      	ldrh	r3, [r7, #2]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d104      	bne.n	8001fae <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001fa4:	887b      	ldrh	r3, [r7, #2]
 8001fa6:	041a      	lsls	r2, r3, #16
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001fac:	e002      	b.n	8001fb4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001fae:	887a      	ldrh	r2, [r7, #2]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	619a      	str	r2, [r3, #24]
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fc2:	b08f      	sub	sp, #60	; 0x3c
 8001fc4:	af0a      	add	r7, sp, #40	; 0x28
 8001fc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e054      	b.n	800207c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d106      	bne.n	8001ff2 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f005 fd0d 	bl	8007a0c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2203      	movs	r2, #3
 8001ff6:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002002:	2b00      	cmp	r3, #0
 8002004:	d102      	bne.n	800200c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f002 fec9 	bl	8004da8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	603b      	str	r3, [r7, #0]
 800201c:	687e      	ldr	r6, [r7, #4]
 800201e:	466d      	mov	r5, sp
 8002020:	f106 0410 	add.w	r4, r6, #16
 8002024:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002026:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002028:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800202a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800202c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002030:	e885 0003 	stmia.w	r5, {r0, r1}
 8002034:	1d33      	adds	r3, r6, #4
 8002036:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002038:	6838      	ldr	r0, [r7, #0]
 800203a:	f002 fe43 	bl	8004cc4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2101      	movs	r1, #1
 8002044:	4618      	mov	r0, r3
 8002046:	f002 fec0 	bl	8004dca <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	687e      	ldr	r6, [r7, #4]
 8002052:	466d      	mov	r5, sp
 8002054:	f106 0410 	add.w	r4, r6, #16
 8002058:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800205a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800205c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800205e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002060:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002064:	e885 0003 	stmia.w	r5, {r0, r1}
 8002068:	1d33      	adds	r3, r6, #4
 800206a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800206c:	6838      	ldr	r0, [r7, #0]
 800206e:	f002 ffd3 	bl	8005018 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002084 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002084:	b590      	push	{r4, r7, lr}
 8002086:	b089      	sub	sp, #36	; 0x24
 8002088:	af04      	add	r7, sp, #16
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	4608      	mov	r0, r1
 800208e:	4611      	mov	r1, r2
 8002090:	461a      	mov	r2, r3
 8002092:	4603      	mov	r3, r0
 8002094:	70fb      	strb	r3, [r7, #3]
 8002096:	460b      	mov	r3, r1
 8002098:	70bb      	strb	r3, [r7, #2]
 800209a:	4613      	mov	r3, r2
 800209c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d101      	bne.n	80020ac <HAL_HCD_HC_Init+0x28>
 80020a8:	2302      	movs	r3, #2
 80020aa:	e07f      	b.n	80021ac <HAL_HCD_HC_Init+0x128>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80020b4:	78fa      	ldrb	r2, [r7, #3]
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	4613      	mov	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	440b      	add	r3, r1
 80020c2:	333d      	adds	r3, #61	; 0x3d
 80020c4:	2200      	movs	r2, #0
 80020c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80020c8:	78fa      	ldrb	r2, [r7, #3]
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	4613      	mov	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	440b      	add	r3, r1
 80020d6:	3338      	adds	r3, #56	; 0x38
 80020d8:	787a      	ldrb	r2, [r7, #1]
 80020da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80020dc:	78fa      	ldrb	r2, [r7, #3]
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	4613      	mov	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	440b      	add	r3, r1
 80020ea:	3340      	adds	r3, #64	; 0x40
 80020ec:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80020ee:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80020f0:	78fa      	ldrb	r2, [r7, #3]
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	4613      	mov	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	440b      	add	r3, r1
 80020fe:	3339      	adds	r3, #57	; 0x39
 8002100:	78fa      	ldrb	r2, [r7, #3]
 8002102:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002104:	78fa      	ldrb	r2, [r7, #3]
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	440b      	add	r3, r1
 8002112:	333f      	adds	r3, #63	; 0x3f
 8002114:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002118:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800211a:	78fa      	ldrb	r2, [r7, #3]
 800211c:	78bb      	ldrb	r3, [r7, #2]
 800211e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002122:	b2d8      	uxtb	r0, r3
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	440b      	add	r3, r1
 8002130:	333a      	adds	r3, #58	; 0x3a
 8002132:	4602      	mov	r2, r0
 8002134:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002136:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800213a:	2b00      	cmp	r3, #0
 800213c:	da0a      	bge.n	8002154 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800213e:	78fa      	ldrb	r2, [r7, #3]
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	440b      	add	r3, r1
 800214c:	333b      	adds	r3, #59	; 0x3b
 800214e:	2201      	movs	r2, #1
 8002150:	701a      	strb	r2, [r3, #0]
 8002152:	e009      	b.n	8002168 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002154:	78fa      	ldrb	r2, [r7, #3]
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	440b      	add	r3, r1
 8002162:	333b      	adds	r3, #59	; 0x3b
 8002164:	2200      	movs	r2, #0
 8002166:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002168:	78fa      	ldrb	r2, [r7, #3]
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	440b      	add	r3, r1
 8002176:	333c      	adds	r3, #60	; 0x3c
 8002178:	f897 2020 	ldrb.w	r2, [r7, #32]
 800217c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	787c      	ldrb	r4, [r7, #1]
 8002184:	78ba      	ldrb	r2, [r7, #2]
 8002186:	78f9      	ldrb	r1, [r7, #3]
 8002188:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800218a:	9302      	str	r3, [sp, #8]
 800218c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002190:	9301      	str	r3, [sp, #4]
 8002192:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	4623      	mov	r3, r4
 800219a:	f003 f8bf 	bl	800531c <USB_HC_Init>
 800219e:	4603      	mov	r3, r0
 80021a0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd90      	pop	{r4, r7, pc}

080021b4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d101      	bne.n	80021d2 <HAL_HCD_HC_Halt+0x1e>
 80021ce:	2302      	movs	r3, #2
 80021d0:	e00f      	b.n	80021f2 <HAL_HCD_HC_Halt+0x3e>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	78fa      	ldrb	r2, [r7, #3]
 80021e0:	4611      	mov	r1, r2
 80021e2:	4618      	mov	r0, r3
 80021e4:	f003 fafb 	bl	80057de <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	4608      	mov	r0, r1
 8002206:	4611      	mov	r1, r2
 8002208:	461a      	mov	r2, r3
 800220a:	4603      	mov	r3, r0
 800220c:	70fb      	strb	r3, [r7, #3]
 800220e:	460b      	mov	r3, r1
 8002210:	70bb      	strb	r3, [r7, #2]
 8002212:	4613      	mov	r3, r2
 8002214:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002216:	78fa      	ldrb	r2, [r7, #3]
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	440b      	add	r3, r1
 8002224:	333b      	adds	r3, #59	; 0x3b
 8002226:	78ba      	ldrb	r2, [r7, #2]
 8002228:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800222a:	78fa      	ldrb	r2, [r7, #3]
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	4613      	mov	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	440b      	add	r3, r1
 8002238:	333f      	adds	r3, #63	; 0x3f
 800223a:	787a      	ldrb	r2, [r7, #1]
 800223c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800223e:	7c3b      	ldrb	r3, [r7, #16]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d114      	bne.n	800226e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002244:	78fa      	ldrb	r2, [r7, #3]
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	440b      	add	r3, r1
 8002252:	3342      	adds	r3, #66	; 0x42
 8002254:	2203      	movs	r2, #3
 8002256:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002258:	78fa      	ldrb	r2, [r7, #3]
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	440b      	add	r3, r1
 8002266:	333d      	adds	r3, #61	; 0x3d
 8002268:	7f3a      	ldrb	r2, [r7, #28]
 800226a:	701a      	strb	r2, [r3, #0]
 800226c:	e009      	b.n	8002282 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800226e:	78fa      	ldrb	r2, [r7, #3]
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	440b      	add	r3, r1
 800227c:	3342      	adds	r3, #66	; 0x42
 800227e:	2202      	movs	r2, #2
 8002280:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002282:	787b      	ldrb	r3, [r7, #1]
 8002284:	2b03      	cmp	r3, #3
 8002286:	f200 80d6 	bhi.w	8002436 <HAL_HCD_HC_SubmitRequest+0x23a>
 800228a:	a201      	add	r2, pc, #4	; (adr r2, 8002290 <HAL_HCD_HC_SubmitRequest+0x94>)
 800228c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002290:	080022a1 	.word	0x080022a1
 8002294:	08002421 	.word	0x08002421
 8002298:	0800230d 	.word	0x0800230d
 800229c:	08002397 	.word	0x08002397
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80022a0:	7c3b      	ldrb	r3, [r7, #16]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	f040 80c9 	bne.w	800243a <HAL_HCD_HC_SubmitRequest+0x23e>
 80022a8:	78bb      	ldrb	r3, [r7, #2]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f040 80c5 	bne.w	800243a <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80022b0:	8b3b      	ldrh	r3, [r7, #24]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d109      	bne.n	80022ca <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80022b6:	78fa      	ldrb	r2, [r7, #3]
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	440b      	add	r3, r1
 80022c4:	3351      	adds	r3, #81	; 0x51
 80022c6:	2201      	movs	r2, #1
 80022c8:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80022ca:	78fa      	ldrb	r2, [r7, #3]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	440b      	add	r3, r1
 80022d8:	3351      	adds	r3, #81	; 0x51
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10a      	bne.n	80022f6 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022e0:	78fa      	ldrb	r2, [r7, #3]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	440b      	add	r3, r1
 80022ee:	3342      	adds	r3, #66	; 0x42
 80022f0:	2200      	movs	r2, #0
 80022f2:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80022f4:	e0a1      	b.n	800243a <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022f6:	78fa      	ldrb	r2, [r7, #3]
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	440b      	add	r3, r1
 8002304:	3342      	adds	r3, #66	; 0x42
 8002306:	2202      	movs	r2, #2
 8002308:	701a      	strb	r2, [r3, #0]
      break;
 800230a:	e096      	b.n	800243a <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800230c:	78bb      	ldrb	r3, [r7, #2]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d120      	bne.n	8002354 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002312:	78fa      	ldrb	r2, [r7, #3]
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	440b      	add	r3, r1
 8002320:	3351      	adds	r3, #81	; 0x51
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10a      	bne.n	800233e <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002328:	78fa      	ldrb	r2, [r7, #3]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	440b      	add	r3, r1
 8002336:	3342      	adds	r3, #66	; 0x42
 8002338:	2200      	movs	r2, #0
 800233a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800233c:	e07e      	b.n	800243c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800233e:	78fa      	ldrb	r2, [r7, #3]
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	440b      	add	r3, r1
 800234c:	3342      	adds	r3, #66	; 0x42
 800234e:	2202      	movs	r2, #2
 8002350:	701a      	strb	r2, [r3, #0]
      break;
 8002352:	e073      	b.n	800243c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002354:	78fa      	ldrb	r2, [r7, #3]
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	440b      	add	r3, r1
 8002362:	3350      	adds	r3, #80	; 0x50
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10a      	bne.n	8002380 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800236a:	78fa      	ldrb	r2, [r7, #3]
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	440b      	add	r3, r1
 8002378:	3342      	adds	r3, #66	; 0x42
 800237a:	2200      	movs	r2, #0
 800237c:	701a      	strb	r2, [r3, #0]
      break;
 800237e:	e05d      	b.n	800243c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002380:	78fa      	ldrb	r2, [r7, #3]
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	440b      	add	r3, r1
 800238e:	3342      	adds	r3, #66	; 0x42
 8002390:	2202      	movs	r2, #2
 8002392:	701a      	strb	r2, [r3, #0]
      break;
 8002394:	e052      	b.n	800243c <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002396:	78bb      	ldrb	r3, [r7, #2]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d120      	bne.n	80023de <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800239c:	78fa      	ldrb	r2, [r7, #3]
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	440b      	add	r3, r1
 80023aa:	3351      	adds	r3, #81	; 0x51
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10a      	bne.n	80023c8 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023b2:	78fa      	ldrb	r2, [r7, #3]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	440b      	add	r3, r1
 80023c0:	3342      	adds	r3, #66	; 0x42
 80023c2:	2200      	movs	r2, #0
 80023c4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80023c6:	e039      	b.n	800243c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023c8:	78fa      	ldrb	r2, [r7, #3]
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	440b      	add	r3, r1
 80023d6:	3342      	adds	r3, #66	; 0x42
 80023d8:	2202      	movs	r2, #2
 80023da:	701a      	strb	r2, [r3, #0]
      break;
 80023dc:	e02e      	b.n	800243c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80023de:	78fa      	ldrb	r2, [r7, #3]
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	4613      	mov	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	440b      	add	r3, r1
 80023ec:	3350      	adds	r3, #80	; 0x50
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10a      	bne.n	800240a <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023f4:	78fa      	ldrb	r2, [r7, #3]
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	440b      	add	r3, r1
 8002402:	3342      	adds	r3, #66	; 0x42
 8002404:	2200      	movs	r2, #0
 8002406:	701a      	strb	r2, [r3, #0]
      break;
 8002408:	e018      	b.n	800243c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800240a:	78fa      	ldrb	r2, [r7, #3]
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	440b      	add	r3, r1
 8002418:	3342      	adds	r3, #66	; 0x42
 800241a:	2202      	movs	r2, #2
 800241c:	701a      	strb	r2, [r3, #0]
      break;
 800241e:	e00d      	b.n	800243c <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002420:	78fa      	ldrb	r2, [r7, #3]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	440b      	add	r3, r1
 800242e:	3342      	adds	r3, #66	; 0x42
 8002430:	2200      	movs	r2, #0
 8002432:	701a      	strb	r2, [r3, #0]
      break;
 8002434:	e002      	b.n	800243c <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8002436:	bf00      	nop
 8002438:	e000      	b.n	800243c <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800243a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800243c:	78fa      	ldrb	r2, [r7, #3]
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	440b      	add	r3, r1
 800244a:	3344      	adds	r3, #68	; 0x44
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002450:	78fa      	ldrb	r2, [r7, #3]
 8002452:	8b39      	ldrh	r1, [r7, #24]
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	4613      	mov	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	4403      	add	r3, r0
 8002460:	3348      	adds	r3, #72	; 0x48
 8002462:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002464:	78fa      	ldrb	r2, [r7, #3]
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	440b      	add	r3, r1
 8002472:	335c      	adds	r3, #92	; 0x5c
 8002474:	2200      	movs	r2, #0
 8002476:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002478:	78fa      	ldrb	r2, [r7, #3]
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	440b      	add	r3, r1
 8002486:	334c      	adds	r3, #76	; 0x4c
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800248c:	78fa      	ldrb	r2, [r7, #3]
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	4613      	mov	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	440b      	add	r3, r1
 800249a:	3339      	adds	r3, #57	; 0x39
 800249c:	78fa      	ldrb	r2, [r7, #3]
 800249e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80024a0:	78fa      	ldrb	r2, [r7, #3]
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	440b      	add	r3, r1
 80024ae:	335d      	adds	r3, #93	; 0x5d
 80024b0:	2200      	movs	r2, #0
 80024b2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6818      	ldr	r0, [r3, #0]
 80024b8:	78fa      	ldrb	r2, [r7, #3]
 80024ba:	4613      	mov	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	3338      	adds	r3, #56	; 0x38
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	18d1      	adds	r1, r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	461a      	mov	r2, r3
 80024d0:	f003 f82e 	bl	8005530 <USB_HC_StartXfer>
 80024d4:	4603      	mov	r3, r0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop

080024e0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f002 fd4b 	bl	8004f92 <USB_GetMode>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b01      	cmp	r3, #1
 8002500:	f040 80ef 	bne.w	80026e2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f002 fd2f 	bl	8004f6c <USB_ReadInterrupts>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 80e5 	beq.w	80026e0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f002 fd26 	bl	8004f6c <USB_ReadInterrupts>
 8002520:	4603      	mov	r3, r0
 8002522:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002526:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800252a:	d104      	bne.n	8002536 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002534:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f002 fd16 	bl	8004f6c <USB_ReadInterrupts>
 8002540:	4603      	mov	r3, r0
 8002542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002546:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800254a:	d104      	bne.n	8002556 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002554:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f002 fd06 	bl	8004f6c <USB_ReadInterrupts>
 8002560:	4603      	mov	r3, r0
 8002562:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002566:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800256a:	d104      	bne.n	8002576 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002574:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f002 fcf6 	bl	8004f6c <USB_ReadInterrupts>
 8002580:	4603      	mov	r3, r0
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b02      	cmp	r3, #2
 8002588:	d103      	bne.n	8002592 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2202      	movs	r2, #2
 8002590:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f002 fce8 	bl	8004f6c <USB_ReadInterrupts>
 800259c:	4603      	mov	r3, r0
 800259e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025a6:	d115      	bne.n	80025d4 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80025b0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d108      	bne.n	80025d4 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f005 faa0 	bl	8007b08 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2101      	movs	r1, #1
 80025ce:	4618      	mov	r0, r3
 80025d0:	f002 fdde 	bl	8005190 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f002 fcc7 	bl	8004f6c <USB_ReadInterrupts>
 80025de:	4603      	mov	r3, r0
 80025e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025e8:	d102      	bne.n	80025f0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f001 f966 	bl	80038bc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f002 fcb9 	bl	8004f6c <USB_ReadInterrupts>
 80025fa:	4603      	mov	r3, r0
 80025fc:	f003 0308 	and.w	r3, r3, #8
 8002600:	2b08      	cmp	r3, #8
 8002602:	d106      	bne.n	8002612 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f005 fa63 	bl	8007ad0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2208      	movs	r2, #8
 8002610:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f002 fca8 	bl	8004f6c <USB_ReadInterrupts>
 800261c:	4603      	mov	r3, r0
 800261e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002622:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002626:	d138      	bne.n	800269a <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	f003 f8c5 	bl	80057bc <USB_HC_ReadInterrupt>
 8002632:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
 8002638:	e025      	b.n	8002686 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f003 030f 	and.w	r3, r3, #15
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	fa22 f303 	lsr.w	r3, r2, r3
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d018      	beq.n	8002680 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	015a      	lsls	r2, r3, #5
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4413      	add	r3, r2
 8002656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002664:	d106      	bne.n	8002674 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	b2db      	uxtb	r3, r3
 800266a:	4619      	mov	r1, r3
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f8cf 	bl	8002810 <HCD_HC_IN_IRQHandler>
 8002672:	e005      	b.n	8002680 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	b2db      	uxtb	r3, r3
 8002678:	4619      	mov	r1, r3
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 fcfd 	bl	800307a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	3301      	adds	r3, #1
 8002684:	617b      	str	r3, [r7, #20]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	429a      	cmp	r2, r3
 800268e:	d3d4      	bcc.n	800263a <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002698:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f002 fc64 	bl	8004f6c <USB_ReadInterrupts>
 80026a4:	4603      	mov	r3, r0
 80026a6:	f003 0310 	and.w	r3, r3, #16
 80026aa:	2b10      	cmp	r3, #16
 80026ac:	d101      	bne.n	80026b2 <HAL_HCD_IRQHandler+0x1d2>
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <HAL_HCD_IRQHandler+0x1d4>
 80026b2:	2300      	movs	r3, #0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d014      	beq.n	80026e2 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699a      	ldr	r2, [r3, #24]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0210 	bic.w	r2, r2, #16
 80026c6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f001 f84b 	bl	8003764 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	699a      	ldr	r2, [r3, #24]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f042 0210 	orr.w	r2, r2, #16
 80026dc:	619a      	str	r2, [r3, #24]
 80026de:	e000      	b.n	80026e2 <HAL_HCD_IRQHandler+0x202>
      return;
 80026e0:	bf00      	nop
    }
  }
}
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d101      	bne.n	80026fe <HAL_HCD_Start+0x16>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e013      	b.n	8002726 <HAL_HCD_Start+0x3e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f002 fb3b 	bl	8004d86 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2101      	movs	r1, #1
 8002716:	4618      	mov	r0, r3
 8002718:	f002 fd9e 	bl	8005258 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <HAL_HCD_Stop+0x16>
 8002740:	2302      	movs	r3, #2
 8002742:	e00d      	b.n	8002760 <HAL_HCD_Stop+0x32>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f003 f97f 	bl	8005a54 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f002 fd45 	bl	8005204 <USB_ResetPort>
 800277a:	4603      	mov	r3, r0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002790:	78fa      	ldrb	r2, [r7, #3]
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	4613      	mov	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	440b      	add	r3, r1
 800279e:	335c      	adds	r3, #92	; 0x5c
 80027a0:	781b      	ldrb	r3, [r3, #0]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
 80027b6:	460b      	mov	r3, r1
 80027b8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80027ba:	78fa      	ldrb	r2, [r7, #3]
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	4613      	mov	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	440b      	add	r3, r1
 80027c8:	334c      	adds	r3, #76	; 0x4c
 80027ca:	681b      	ldr	r3, [r3, #0]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f002 fd87 	bl	80052f8 <USB_GetCurrentFrame>
 80027ea:	4603      	mov	r3, r0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f002 fd62 	bl	80052ca <USB_GetHostSpeed>
 8002806:	4603      	mov	r3, r0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002826:	78fb      	ldrb	r3, [r7, #3]
 8002828:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	015a      	lsls	r2, r3, #5
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	4413      	add	r3, r2
 8002832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b04      	cmp	r3, #4
 800283e:	d119      	bne.n	8002874 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	015a      	lsls	r2, r3, #5
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	4413      	add	r3, r2
 8002848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284c:	461a      	mov	r2, r3
 800284e:	2304      	movs	r3, #4
 8002850:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	015a      	lsls	r2, r3, #5
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4413      	add	r3, r2
 800285a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	0151      	lsls	r1, r2, #5
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	440a      	add	r2, r1
 8002868:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800286c:	f043 0302 	orr.w	r3, r3, #2
 8002870:	60d3      	str	r3, [r2, #12]
 8002872:	e0ce      	b.n	8002a12 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	015a      	lsls	r2, r3, #5
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	4413      	add	r3, r2
 800287c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800288a:	d12c      	bne.n	80028e6 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	015a      	lsls	r2, r3, #5
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	4413      	add	r3, r2
 8002894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002898:	461a      	mov	r2, r3
 800289a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800289e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	4613      	mov	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	440b      	add	r3, r1
 80028ae:	335d      	adds	r3, #93	; 0x5d
 80028b0:	2207      	movs	r2, #7
 80028b2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	015a      	lsls	r2, r3, #5
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	4413      	add	r3, r2
 80028bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	0151      	lsls	r1, r2, #5
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	440a      	add	r2, r1
 80028ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028ce:	f043 0302 	orr.w	r3, r3, #2
 80028d2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	4611      	mov	r1, r2
 80028de:	4618      	mov	r0, r3
 80028e0:	f002 ff7d 	bl	80057de <USB_HC_Halt>
 80028e4:	e095      	b.n	8002a12 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	015a      	lsls	r2, r3, #5
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	4413      	add	r3, r2
 80028ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 0320 	and.w	r3, r3, #32
 80028f8:	2b20      	cmp	r3, #32
 80028fa:	d109      	bne.n	8002910 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	015a      	lsls	r2, r3, #5
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4413      	add	r3, r2
 8002904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002908:	461a      	mov	r2, r3
 800290a:	2320      	movs	r3, #32
 800290c:	6093      	str	r3, [r2, #8]
 800290e:	e080      	b.n	8002a12 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	4413      	add	r3, r2
 8002918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 0308 	and.w	r3, r3, #8
 8002922:	2b08      	cmp	r3, #8
 8002924:	d134      	bne.n	8002990 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	015a      	lsls	r2, r3, #5
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	4413      	add	r3, r2
 800292e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	0151      	lsls	r1, r2, #5
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	440a      	add	r2, r1
 800293c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002940:	f043 0302 	orr.w	r3, r3, #2
 8002944:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	440b      	add	r3, r1
 8002954:	335d      	adds	r3, #93	; 0x5d
 8002956:	2205      	movs	r2, #5
 8002958:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	015a      	lsls	r2, r3, #5
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	4413      	add	r3, r2
 8002962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002966:	461a      	mov	r2, r3
 8002968:	2310      	movs	r3, #16
 800296a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	015a      	lsls	r2, r3, #5
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	4413      	add	r3, r2
 8002974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002978:	461a      	mov	r2, r3
 800297a:	2308      	movs	r3, #8
 800297c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	4611      	mov	r1, r2
 8002988:	4618      	mov	r0, r3
 800298a:	f002 ff28 	bl	80057de <USB_HC_Halt>
 800298e:	e040      	b.n	8002a12 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4413      	add	r3, r2
 8002998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029a6:	d134      	bne.n	8002a12 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	015a      	lsls	r2, r3, #5
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	4413      	add	r3, r2
 80029b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	0151      	lsls	r1, r2, #5
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	440a      	add	r2, r1
 80029be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029c2:	f043 0302 	orr.w	r3, r3, #2
 80029c6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	4611      	mov	r1, r2
 80029d2:	4618      	mov	r0, r3
 80029d4:	f002 ff03 	bl	80057de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	015a      	lsls	r2, r3, #5
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	4413      	add	r3, r2
 80029e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e4:	461a      	mov	r2, r3
 80029e6:	2310      	movs	r3, #16
 80029e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	4613      	mov	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	440b      	add	r3, r1
 80029f8:	335d      	adds	r3, #93	; 0x5d
 80029fa:	2208      	movs	r2, #8
 80029fc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	015a      	lsls	r2, r3, #5
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	4413      	add	r3, r2
 8002a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a10:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	015a      	lsls	r2, r3, #5
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	4413      	add	r3, r2
 8002a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a28:	d122      	bne.n	8002a70 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	015a      	lsls	r2, r3, #5
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4413      	add	r3, r2
 8002a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	0151      	lsls	r1, r2, #5
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	440a      	add	r2, r1
 8002a40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a44:	f043 0302 	orr.w	r3, r3, #2
 8002a48:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	b2d2      	uxtb	r2, r2
 8002a52:	4611      	mov	r1, r2
 8002a54:	4618      	mov	r0, r3
 8002a56:	f002 fec2 	bl	80057de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	015a      	lsls	r2, r3, #5
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a66:	461a      	mov	r2, r3
 8002a68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a6c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002a6e:	e300      	b.n	8003072 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	f040 80fd 	bne.w	8002c82 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d01b      	beq.n	8002ac8 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	4613      	mov	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	440b      	add	r3, r1
 8002a9e:	3348      	adds	r3, #72	; 0x48
 8002aa0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	0159      	lsls	r1, r3, #5
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	440b      	add	r3, r1
 8002aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002ab4:	1ad1      	subs	r1, r2, r3
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	4613      	mov	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	4403      	add	r3, r0
 8002ac4:	334c      	adds	r3, #76	; 0x4c
 8002ac6:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	4613      	mov	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	440b      	add	r3, r1
 8002ad6:	335d      	adds	r3, #93	; 0x5d
 8002ad8:	2201      	movs	r2, #1
 8002ada:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	440b      	add	r3, r1
 8002aea:	3358      	adds	r3, #88	; 0x58
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	015a      	lsls	r2, r3, #5
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4413      	add	r3, r2
 8002af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afc:	461a      	mov	r2, r3
 8002afe:	2301      	movs	r3, #1
 8002b00:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	4613      	mov	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	440b      	add	r3, r1
 8002b10:	333f      	adds	r3, #63	; 0x3f
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00a      	beq.n	8002b2e <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	440b      	add	r3, r1
 8002b26:	333f      	adds	r3, #63	; 0x3f
 8002b28:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d121      	bne.n	8002b72 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	015a      	lsls	r2, r3, #5
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4413      	add	r3, r2
 8002b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	0151      	lsls	r1, r2, #5
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	440a      	add	r2, r1
 8002b44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b48:	f043 0302 	orr.w	r3, r3, #2
 8002b4c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	4611      	mov	r1, r2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f002 fe40 	bl	80057de <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	015a      	lsls	r2, r3, #5
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	4413      	add	r3, r2
 8002b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	2310      	movs	r3, #16
 8002b6e:	6093      	str	r3, [r2, #8]
 8002b70:	e070      	b.n	8002c54 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	4613      	mov	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	440b      	add	r3, r1
 8002b80:	333f      	adds	r3, #63	; 0x3f
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d12a      	bne.n	8002bde <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	015a      	lsls	r2, r3, #5
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	4413      	add	r3, r2
 8002b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	0151      	lsls	r1, r2, #5
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	440a      	add	r2, r1
 8002b9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ba2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002ba6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	440b      	add	r3, r1
 8002bb6:	335c      	adds	r3, #92	; 0x5c
 8002bb8:	2201      	movs	r2, #1
 8002bba:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	b2d8      	uxtb	r0, r3
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	440b      	add	r3, r1
 8002bce:	335c      	adds	r3, #92	; 0x5c
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	4601      	mov	r1, r0
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f004 ffa4 	bl	8007b24 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002bdc:	e03a      	b.n	8002c54 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	4613      	mov	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	440b      	add	r3, r1
 8002bec:	333f      	adds	r3, #63	; 0x3f
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d12f      	bne.n	8002c54 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	440b      	add	r3, r1
 8002c02:	335c      	adds	r3, #92	; 0x5c
 8002c04:	2201      	movs	r2, #1
 8002c06:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	440b      	add	r3, r1
 8002c16:	3350      	adds	r3, #80	; 0x50
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	f083 0301 	eor.w	r3, r3, #1
 8002c1e:	b2d8      	uxtb	r0, r3
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	440b      	add	r3, r1
 8002c2e:	3350      	adds	r3, #80	; 0x50
 8002c30:	4602      	mov	r2, r0
 8002c32:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	b2d8      	uxtb	r0, r3
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	440b      	add	r3, r1
 8002c46:	335c      	adds	r3, #92	; 0x5c
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	4601      	mov	r1, r0
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f004 ff68 	bl	8007b24 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	440b      	add	r3, r1
 8002c62:	3350      	adds	r3, #80	; 0x50
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	f083 0301 	eor.w	r3, r3, #1
 8002c6a:	b2d8      	uxtb	r0, r3
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	440b      	add	r3, r1
 8002c7a:	3350      	adds	r3, #80	; 0x50
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	701a      	strb	r2, [r3, #0]
}
 8002c80:	e1f7      	b.n	8003072 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	015a      	lsls	r2, r3, #5
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4413      	add	r3, r2
 8002c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	f040 811a 	bne.w	8002ece <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	015a      	lsls	r2, r3, #5
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	0151      	lsls	r1, r2, #5
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	440a      	add	r2, r1
 8002cb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cb4:	f023 0302 	bic.w	r3, r3, #2
 8002cb8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	440b      	add	r3, r1
 8002cc8:	335d      	adds	r3, #93	; 0x5d
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d10a      	bne.n	8002ce6 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	440b      	add	r3, r1
 8002cde:	335c      	adds	r3, #92	; 0x5c
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	701a      	strb	r2, [r3, #0]
 8002ce4:	e0d9      	b.n	8002e9a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	4613      	mov	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	440b      	add	r3, r1
 8002cf4:	335d      	adds	r3, #93	; 0x5d
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2b05      	cmp	r3, #5
 8002cfa:	d10a      	bne.n	8002d12 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	4613      	mov	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	440b      	add	r3, r1
 8002d0a:	335c      	adds	r3, #92	; 0x5c
 8002d0c:	2205      	movs	r2, #5
 8002d0e:	701a      	strb	r2, [r3, #0]
 8002d10:	e0c3      	b.n	8002e9a <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	4613      	mov	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	440b      	add	r3, r1
 8002d20:	335d      	adds	r3, #93	; 0x5d
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b06      	cmp	r3, #6
 8002d26:	d00a      	beq.n	8002d3e <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	440b      	add	r3, r1
 8002d36:	335d      	adds	r3, #93	; 0x5d
 8002d38:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d156      	bne.n	8002dec <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	4613      	mov	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	440b      	add	r3, r1
 8002d4c:	3358      	adds	r3, #88	; 0x58
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	1c59      	adds	r1, r3, #1
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	4613      	mov	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	4403      	add	r3, r0
 8002d60:	3358      	adds	r3, #88	; 0x58
 8002d62:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	440b      	add	r3, r1
 8002d72:	3358      	adds	r3, #88	; 0x58
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2b03      	cmp	r3, #3
 8002d78:	d914      	bls.n	8002da4 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	440b      	add	r3, r1
 8002d88:	3358      	adds	r3, #88	; 0x58
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	4613      	mov	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4413      	add	r3, r2
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	440b      	add	r3, r1
 8002d9c:	335c      	adds	r3, #92	; 0x5c
 8002d9e:	2204      	movs	r2, #4
 8002da0:	701a      	strb	r2, [r3, #0]
 8002da2:	e009      	b.n	8002db8 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	4613      	mov	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	440b      	add	r3, r1
 8002db2:	335c      	adds	r3, #92	; 0x5c
 8002db4:	2202      	movs	r2, #2
 8002db6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	015a      	lsls	r2, r3, #5
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002dce:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002dd6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	015a      	lsls	r2, r3, #5
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	4413      	add	r3, r2
 8002de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de4:	461a      	mov	r2, r3
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	e056      	b.n	8002e9a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	440b      	add	r3, r1
 8002dfa:	335d      	adds	r3, #93	; 0x5d
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b03      	cmp	r3, #3
 8002e00:	d123      	bne.n	8002e4a <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	4613      	mov	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	440b      	add	r3, r1
 8002e10:	335c      	adds	r3, #92	; 0x5c
 8002e12:	2202      	movs	r2, #2
 8002e14:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	015a      	lsls	r2, r3, #5
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e2c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e34:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	015a      	lsls	r2, r3, #5
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e42:	461a      	mov	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	6013      	str	r3, [r2, #0]
 8002e48:	e027      	b.n	8002e9a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	440b      	add	r3, r1
 8002e58:	335d      	adds	r3, #93	; 0x5d
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b07      	cmp	r3, #7
 8002e5e:	d11c      	bne.n	8002e9a <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	440b      	add	r3, r1
 8002e6e:	3358      	adds	r3, #88	; 0x58
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	1c59      	adds	r1, r3, #1
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4403      	add	r3, r0
 8002e82:	3358      	adds	r3, #88	; 0x58
 8002e84:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	440b      	add	r3, r1
 8002e94:	335c      	adds	r3, #92	; 0x5c
 8002e96:	2204      	movs	r2, #4
 8002e98:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	015a      	lsls	r2, r3, #5
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	b2d8      	uxtb	r0, r3
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	440b      	add	r3, r1
 8002ebe:	335c      	adds	r3, #92	; 0x5c
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	4601      	mov	r1, r0
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f004 fe2c 	bl	8007b24 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ecc:	e0d1      	b.n	8003072 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	015a      	lsls	r2, r3, #5
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee0:	2b80      	cmp	r3, #128	; 0x80
 8002ee2:	d13e      	bne.n	8002f62 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	015a      	lsls	r2, r3, #5
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	4413      	add	r3, r2
 8002eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	0151      	lsls	r1, r2, #5
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	440a      	add	r2, r1
 8002efa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002efe:	f043 0302 	orr.w	r3, r3, #2
 8002f02:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	440b      	add	r3, r1
 8002f12:	3358      	adds	r3, #88	; 0x58
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	1c59      	adds	r1, r3, #1
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	4403      	add	r3, r0
 8002f26:	3358      	adds	r3, #88	; 0x58
 8002f28:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	440b      	add	r3, r1
 8002f38:	335d      	adds	r3, #93	; 0x5d
 8002f3a:	2206      	movs	r2, #6
 8002f3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	4611      	mov	r1, r2
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f002 fc48 	bl	80057de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	015a      	lsls	r2, r3, #5
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	4413      	add	r3, r2
 8002f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	2380      	movs	r3, #128	; 0x80
 8002f5e:	6093      	str	r3, [r2, #8]
}
 8002f60:	e087      	b.n	8003072 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 0310 	and.w	r3, r3, #16
 8002f74:	2b10      	cmp	r3, #16
 8002f76:	d17c      	bne.n	8003072 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	440b      	add	r3, r1
 8002f86:	333f      	adds	r3, #63	; 0x3f
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b03      	cmp	r3, #3
 8002f8c:	d122      	bne.n	8002fd4 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	4613      	mov	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	440b      	add	r3, r1
 8002f9c:	3358      	adds	r3, #88	; 0x58
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	015a      	lsls	r2, r3, #5
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	4413      	add	r3, r2
 8002faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	0151      	lsls	r1, r2, #5
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	440a      	add	r2, r1
 8002fb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fbc:	f043 0302 	orr.w	r3, r3, #2
 8002fc0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	4611      	mov	r1, r2
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f002 fc06 	bl	80057de <USB_HC_Halt>
 8002fd2:	e045      	b.n	8003060 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4413      	add	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	440b      	add	r3, r1
 8002fe2:	333f      	adds	r3, #63	; 0x3f
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00a      	beq.n	8003000 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	440b      	add	r3, r1
 8002ff8:	333f      	adds	r3, #63	; 0x3f
 8002ffa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d12f      	bne.n	8003060 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	4613      	mov	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	440b      	add	r3, r1
 800300e:	3358      	adds	r3, #88	; 0x58
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d121      	bne.n	8003060 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4613      	mov	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	440b      	add	r3, r1
 800302a:	335d      	adds	r3, #93	; 0x5d
 800302c:	2203      	movs	r2, #3
 800302e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	015a      	lsls	r2, r3, #5
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4413      	add	r3, r2
 8003038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	0151      	lsls	r1, r2, #5
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	440a      	add	r2, r1
 8003046:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800304a:	f043 0302 	orr.w	r3, r3, #2
 800304e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	4611      	mov	r1, r2
 800305a:	4618      	mov	r0, r3
 800305c:	f002 fbbf 	bl	80057de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	015a      	lsls	r2, r3, #5
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	4413      	add	r3, r2
 8003068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800306c:	461a      	mov	r2, r3
 800306e:	2310      	movs	r3, #16
 8003070:	6093      	str	r3, [r2, #8]
}
 8003072:	bf00      	nop
 8003074:	3718      	adds	r7, #24
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b086      	sub	sp, #24
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
 8003082:	460b      	mov	r3, r1
 8003084:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003090:	78fb      	ldrb	r3, [r7, #3]
 8003092:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	4413      	add	r3, r2
 800309c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 0304 	and.w	r3, r3, #4
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d119      	bne.n	80030de <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	015a      	lsls	r2, r3, #5
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	4413      	add	r3, r2
 80030b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b6:	461a      	mov	r2, r3
 80030b8:	2304      	movs	r3, #4
 80030ba:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	015a      	lsls	r2, r3, #5
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	4413      	add	r3, r2
 80030c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	0151      	lsls	r1, r2, #5
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	440a      	add	r2, r1
 80030d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030d6:	f043 0302 	orr.w	r3, r3, #2
 80030da:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80030dc:	e33e      	b.n	800375c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	015a      	lsls	r2, r3, #5
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	4413      	add	r3, r2
 80030e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 0320 	and.w	r3, r3, #32
 80030f0:	2b20      	cmp	r3, #32
 80030f2:	d141      	bne.n	8003178 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	015a      	lsls	r2, r3, #5
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	4413      	add	r3, r2
 80030fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003100:	461a      	mov	r2, r3
 8003102:	2320      	movs	r3, #32
 8003104:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	4613      	mov	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	440b      	add	r3, r1
 8003114:	333d      	adds	r3, #61	; 0x3d
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b01      	cmp	r3, #1
 800311a:	f040 831f 	bne.w	800375c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	4613      	mov	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	440b      	add	r3, r1
 800312c:	333d      	adds	r3, #61	; 0x3d
 800312e:	2200      	movs	r2, #0
 8003130:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	4613      	mov	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	440b      	add	r3, r1
 8003140:	335c      	adds	r3, #92	; 0x5c
 8003142:	2202      	movs	r2, #2
 8003144:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	015a      	lsls	r2, r3, #5
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	4413      	add	r3, r2
 800314e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	0151      	lsls	r1, r2, #5
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	440a      	add	r2, r1
 800315c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003160:	f043 0302 	orr.w	r3, r3, #2
 8003164:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	4611      	mov	r1, r2
 8003170:	4618      	mov	r0, r3
 8003172:	f002 fb34 	bl	80057de <USB_HC_Halt>
}
 8003176:	e2f1      	b.n	800375c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	015a      	lsls	r2, r3, #5
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4413      	add	r3, r2
 8003180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318a:	2b40      	cmp	r3, #64	; 0x40
 800318c:	d13f      	bne.n	800320e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	4613      	mov	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	440b      	add	r3, r1
 800319c:	335d      	adds	r3, #93	; 0x5d
 800319e:	2204      	movs	r2, #4
 80031a0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	4613      	mov	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	440b      	add	r3, r1
 80031b0:	333d      	adds	r3, #61	; 0x3d
 80031b2:	2201      	movs	r2, #1
 80031b4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	4613      	mov	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	440b      	add	r3, r1
 80031c4:	3358      	adds	r3, #88	; 0x58
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	015a      	lsls	r2, r3, #5
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	4413      	add	r3, r2
 80031d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	0151      	lsls	r1, r2, #5
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	440a      	add	r2, r1
 80031e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031e4:	f043 0302 	orr.w	r3, r3, #2
 80031e8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	b2d2      	uxtb	r2, r2
 80031f2:	4611      	mov	r1, r2
 80031f4:	4618      	mov	r0, r3
 80031f6:	f002 faf2 	bl	80057de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4413      	add	r3, r2
 8003202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003206:	461a      	mov	r2, r3
 8003208:	2340      	movs	r3, #64	; 0x40
 800320a:	6093      	str	r3, [r2, #8]
}
 800320c:	e2a6      	b.n	800375c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	015a      	lsls	r2, r3, #5
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	4413      	add	r3, r2
 8003216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003224:	d122      	bne.n	800326c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	4413      	add	r3, r2
 800322e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	0151      	lsls	r1, r2, #5
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	440a      	add	r2, r1
 800323c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003240:	f043 0302 	orr.w	r3, r3, #2
 8003244:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	4611      	mov	r1, r2
 8003250:	4618      	mov	r0, r3
 8003252:	f002 fac4 	bl	80057de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	4413      	add	r3, r2
 800325e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003262:	461a      	mov	r2, r3
 8003264:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003268:	6093      	str	r3, [r2, #8]
}
 800326a:	e277      	b.n	800375c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	015a      	lsls	r2, r3, #5
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	4413      	add	r3, r2
 8003274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b01      	cmp	r3, #1
 8003280:	d135      	bne.n	80032ee <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	4613      	mov	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	440b      	add	r3, r1
 8003290:	3358      	adds	r3, #88	; 0x58
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4413      	add	r3, r2
 800329e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	0151      	lsls	r1, r2, #5
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	440a      	add	r2, r1
 80032ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032b0:	f043 0302 	orr.w	r3, r3, #2
 80032b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	4611      	mov	r1, r2
 80032c0:	4618      	mov	r0, r3
 80032c2:	f002 fa8c 	bl	80057de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	015a      	lsls	r2, r3, #5
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	4413      	add	r3, r2
 80032ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d2:	461a      	mov	r2, r3
 80032d4:	2301      	movs	r3, #1
 80032d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	4613      	mov	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	440b      	add	r3, r1
 80032e6:	335d      	adds	r3, #93	; 0x5d
 80032e8:	2201      	movs	r2, #1
 80032ea:	701a      	strb	r2, [r3, #0]
}
 80032ec:	e236      	b.n	800375c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	015a      	lsls	r2, r3, #5
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	2b08      	cmp	r3, #8
 8003302:	d12b      	bne.n	800335c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	4413      	add	r3, r2
 800330c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003310:	461a      	mov	r2, r3
 8003312:	2308      	movs	r3, #8
 8003314:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	015a      	lsls	r2, r3, #5
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	4413      	add	r3, r2
 800331e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	0151      	lsls	r1, r2, #5
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	440a      	add	r2, r1
 800332c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003330:	f043 0302 	orr.w	r3, r3, #2
 8003334:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	4611      	mov	r1, r2
 8003340:	4618      	mov	r0, r3
 8003342:	f002 fa4c 	bl	80057de <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	4613      	mov	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	440b      	add	r3, r1
 8003354:	335d      	adds	r3, #93	; 0x5d
 8003356:	2205      	movs	r2, #5
 8003358:	701a      	strb	r2, [r3, #0]
}
 800335a:	e1ff      	b.n	800375c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	015a      	lsls	r2, r3, #5
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	4413      	add	r3, r2
 8003364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 0310 	and.w	r3, r3, #16
 800336e:	2b10      	cmp	r3, #16
 8003370:	d155      	bne.n	800341e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	4613      	mov	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	440b      	add	r3, r1
 8003380:	3358      	adds	r3, #88	; 0x58
 8003382:	2200      	movs	r2, #0
 8003384:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	4613      	mov	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4413      	add	r3, r2
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	440b      	add	r3, r1
 8003394:	335d      	adds	r3, #93	; 0x5d
 8003396:	2203      	movs	r2, #3
 8003398:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	4613      	mov	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	440b      	add	r3, r1
 80033a8:	333d      	adds	r3, #61	; 0x3d
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d114      	bne.n	80033da <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	4613      	mov	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	440b      	add	r3, r1
 80033be:	333c      	adds	r3, #60	; 0x3c
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d109      	bne.n	80033da <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	4613      	mov	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	440b      	add	r3, r1
 80033d4:	333d      	adds	r3, #61	; 0x3d
 80033d6:	2201      	movs	r2, #1
 80033d8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	015a      	lsls	r2, r3, #5
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4413      	add	r3, r2
 80033e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	0151      	lsls	r1, r2, #5
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	440a      	add	r2, r1
 80033f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033f4:	f043 0302 	orr.w	r3, r3, #2
 80033f8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	b2d2      	uxtb	r2, r2
 8003402:	4611      	mov	r1, r2
 8003404:	4618      	mov	r0, r3
 8003406:	f002 f9ea 	bl	80057de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	015a      	lsls	r2, r3, #5
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	4413      	add	r3, r2
 8003412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003416:	461a      	mov	r2, r3
 8003418:	2310      	movs	r3, #16
 800341a:	6093      	str	r3, [r2, #8]
}
 800341c:	e19e      	b.n	800375c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	015a      	lsls	r2, r3, #5
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	4413      	add	r3, r2
 8003426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003430:	2b80      	cmp	r3, #128	; 0x80
 8003432:	d12b      	bne.n	800348c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	015a      	lsls	r2, r3, #5
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	4413      	add	r3, r2
 800343c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	0151      	lsls	r1, r2, #5
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	440a      	add	r2, r1
 800344a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800344e:	f043 0302 	orr.w	r3, r3, #2
 8003452:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	4611      	mov	r1, r2
 800345e:	4618      	mov	r0, r3
 8003460:	f002 f9bd 	bl	80057de <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	4613      	mov	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	440b      	add	r3, r1
 8003472:	335d      	adds	r3, #93	; 0x5d
 8003474:	2206      	movs	r2, #6
 8003476:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	015a      	lsls	r2, r3, #5
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	4413      	add	r3, r2
 8003480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003484:	461a      	mov	r2, r3
 8003486:	2380      	movs	r3, #128	; 0x80
 8003488:	6093      	str	r3, [r2, #8]
}
 800348a:	e167      	b.n	800375c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	015a      	lsls	r2, r3, #5
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	4413      	add	r3, r2
 8003494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800349e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a2:	d135      	bne.n	8003510 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	015a      	lsls	r2, r3, #5
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	4413      	add	r3, r2
 80034ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	0151      	lsls	r1, r2, #5
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	440a      	add	r2, r1
 80034ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034be:	f043 0302 	orr.w	r3, r3, #2
 80034c2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	4611      	mov	r1, r2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f002 f985 	bl	80057de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	015a      	lsls	r2, r3, #5
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	4413      	add	r3, r2
 80034dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e0:	461a      	mov	r2, r3
 80034e2:	2310      	movs	r3, #16
 80034e4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	015a      	lsls	r2, r3, #5
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	4413      	add	r3, r2
 80034ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f2:	461a      	mov	r2, r3
 80034f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	440b      	add	r3, r1
 8003508:	335d      	adds	r3, #93	; 0x5d
 800350a:	2208      	movs	r2, #8
 800350c:	701a      	strb	r2, [r3, #0]
}
 800350e:	e125      	b.n	800375c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	015a      	lsls	r2, r3, #5
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	4413      	add	r3, r2
 8003518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b02      	cmp	r3, #2
 8003524:	f040 811a 	bne.w	800375c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	015a      	lsls	r2, r3, #5
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	4413      	add	r3, r2
 8003530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	0151      	lsls	r1, r2, #5
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	440a      	add	r2, r1
 800353e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003542:	f023 0302 	bic.w	r3, r3, #2
 8003546:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	4613      	mov	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4413      	add	r3, r2
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	440b      	add	r3, r1
 8003556:	335d      	adds	r3, #93	; 0x5d
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d137      	bne.n	80035ce <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	4613      	mov	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	440b      	add	r3, r1
 800356c:	335c      	adds	r3, #92	; 0x5c
 800356e:	2201      	movs	r2, #1
 8003570:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	4613      	mov	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4413      	add	r3, r2
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	440b      	add	r3, r1
 8003580:	333f      	adds	r3, #63	; 0x3f
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b02      	cmp	r3, #2
 8003586:	d00b      	beq.n	80035a0 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	4613      	mov	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	440b      	add	r3, r1
 8003596:	333f      	adds	r3, #63	; 0x3f
 8003598:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800359a:	2b03      	cmp	r3, #3
 800359c:	f040 80c5 	bne.w	800372a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	4613      	mov	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	440b      	add	r3, r1
 80035ae:	3351      	adds	r3, #81	; 0x51
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	f083 0301 	eor.w	r3, r3, #1
 80035b6:	b2d8      	uxtb	r0, r3
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	4613      	mov	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	440b      	add	r3, r1
 80035c6:	3351      	adds	r3, #81	; 0x51
 80035c8:	4602      	mov	r2, r0
 80035ca:	701a      	strb	r2, [r3, #0]
 80035cc:	e0ad      	b.n	800372a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	4613      	mov	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	440b      	add	r3, r1
 80035dc:	335d      	adds	r3, #93	; 0x5d
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d10a      	bne.n	80035fa <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	4613      	mov	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4413      	add	r3, r2
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	440b      	add	r3, r1
 80035f2:	335c      	adds	r3, #92	; 0x5c
 80035f4:	2202      	movs	r2, #2
 80035f6:	701a      	strb	r2, [r3, #0]
 80035f8:	e097      	b.n	800372a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	4613      	mov	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	440b      	add	r3, r1
 8003608:	335d      	adds	r3, #93	; 0x5d
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	2b04      	cmp	r3, #4
 800360e:	d10a      	bne.n	8003626 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	4613      	mov	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	440b      	add	r3, r1
 800361e:	335c      	adds	r3, #92	; 0x5c
 8003620:	2202      	movs	r2, #2
 8003622:	701a      	strb	r2, [r3, #0]
 8003624:	e081      	b.n	800372a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	4613      	mov	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	440b      	add	r3, r1
 8003634:	335d      	adds	r3, #93	; 0x5d
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	2b05      	cmp	r3, #5
 800363a:	d10a      	bne.n	8003652 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	4613      	mov	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	440b      	add	r3, r1
 800364a:	335c      	adds	r3, #92	; 0x5c
 800364c:	2205      	movs	r2, #5
 800364e:	701a      	strb	r2, [r3, #0]
 8003650:	e06b      	b.n	800372a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	4613      	mov	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4413      	add	r3, r2
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	440b      	add	r3, r1
 8003660:	335d      	adds	r3, #93	; 0x5d
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b06      	cmp	r3, #6
 8003666:	d00a      	beq.n	800367e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	4613      	mov	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	440b      	add	r3, r1
 8003676:	335d      	adds	r3, #93	; 0x5d
 8003678:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800367a:	2b08      	cmp	r3, #8
 800367c:	d155      	bne.n	800372a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	4613      	mov	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	440b      	add	r3, r1
 800368c:	3358      	adds	r3, #88	; 0x58
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	1c59      	adds	r1, r3, #1
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	4403      	add	r3, r0
 80036a0:	3358      	adds	r3, #88	; 0x58
 80036a2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	4613      	mov	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	440b      	add	r3, r1
 80036b2:	3358      	adds	r3, #88	; 0x58
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2b03      	cmp	r3, #3
 80036b8:	d914      	bls.n	80036e4 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4613      	mov	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	440b      	add	r3, r1
 80036c8:	3358      	adds	r3, #88	; 0x58
 80036ca:	2200      	movs	r2, #0
 80036cc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	440b      	add	r3, r1
 80036dc:	335c      	adds	r3, #92	; 0x5c
 80036de:	2204      	movs	r2, #4
 80036e0:	701a      	strb	r2, [r3, #0]
 80036e2:	e009      	b.n	80036f8 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80036e4:	6879      	ldr	r1, [r7, #4]
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	4613      	mov	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	440b      	add	r3, r1
 80036f2:	335c      	adds	r3, #92	; 0x5c
 80036f4:	2202      	movs	r2, #2
 80036f6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800370e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003716:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	4413      	add	r3, r2
 8003720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003724:	461a      	mov	r2, r3
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	015a      	lsls	r2, r3, #5
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	4413      	add	r3, r2
 8003732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003736:	461a      	mov	r2, r3
 8003738:	2302      	movs	r3, #2
 800373a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	b2d8      	uxtb	r0, r3
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	4613      	mov	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	440b      	add	r3, r1
 800374e:	335c      	adds	r3, #92	; 0x5c
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	461a      	mov	r2, r3
 8003754:	4601      	mov	r1, r0
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f004 f9e4 	bl	8007b24 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800375c:	bf00      	nop
 800375e:	3718      	adds	r7, #24
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b08a      	sub	sp, #40	; 0x28
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	f003 030f 	and.w	r3, r3, #15
 8003784:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	0c5b      	lsrs	r3, r3, #17
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	091b      	lsrs	r3, r3, #4
 8003794:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003798:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	2b02      	cmp	r3, #2
 800379e:	d003      	beq.n	80037a8 <HCD_RXQLVL_IRQHandler+0x44>
 80037a0:	2b05      	cmp	r3, #5
 80037a2:	f000 8082 	beq.w	80038aa <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80037a6:	e083      	b.n	80038b0 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d07f      	beq.n	80038ae <HCD_RXQLVL_IRQHandler+0x14a>
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	4613      	mov	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	440b      	add	r3, r1
 80037bc:	3344      	adds	r3, #68	; 0x44
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d074      	beq.n	80038ae <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6818      	ldr	r0, [r3, #0]
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4613      	mov	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	440b      	add	r3, r1
 80037d6:	3344      	adds	r3, #68	; 0x44
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	b292      	uxth	r2, r2
 80037de:	4619      	mov	r1, r3
 80037e0:	f001 fb9b 	bl	8004f1a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80037e4:	6879      	ldr	r1, [r7, #4]
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4613      	mov	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	440b      	add	r3, r1
 80037f2:	3344      	adds	r3, #68	; 0x44
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	18d1      	adds	r1, r2, r3
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	4613      	mov	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4413      	add	r3, r2
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	4403      	add	r3, r0
 8003808:	3344      	adds	r3, #68	; 0x44
 800380a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	4613      	mov	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	440b      	add	r3, r1
 800381a:	334c      	adds	r3, #76	; 0x4c
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	18d1      	adds	r1, r2, r3
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	4613      	mov	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	4403      	add	r3, r0
 8003830:	334c      	adds	r3, #76	; 0x4c
 8003832:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	015a      	lsls	r2, r3, #5
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	4413      	add	r3, r2
 800383c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003840:	691a      	ldr	r2, [r3, #16]
 8003842:	4b1d      	ldr	r3, [pc, #116]	; (80038b8 <HCD_RXQLVL_IRQHandler+0x154>)
 8003844:	4013      	ands	r3, r2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d031      	beq.n	80038ae <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	4413      	add	r3, r2
 8003852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003860:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003868:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	015a      	lsls	r2, r3, #5
 800386e:	6a3b      	ldr	r3, [r7, #32]
 8003870:	4413      	add	r3, r2
 8003872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003876:	461a      	mov	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800387c:	6879      	ldr	r1, [r7, #4]
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	4613      	mov	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	440b      	add	r3, r1
 800388a:	3350      	adds	r3, #80	; 0x50
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	f083 0301 	eor.w	r3, r3, #1
 8003892:	b2d8      	uxtb	r0, r3
 8003894:	6879      	ldr	r1, [r7, #4]
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4613      	mov	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	440b      	add	r3, r1
 80038a2:	3350      	adds	r3, #80	; 0x50
 80038a4:	4602      	mov	r2, r0
 80038a6:	701a      	strb	r2, [r3, #0]
      break;
 80038a8:	e001      	b.n	80038ae <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80038aa:	bf00      	nop
 80038ac:	e000      	b.n	80038b0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80038ae:	bf00      	nop
  }
}
 80038b0:	bf00      	nop
 80038b2:	3728      	adds	r7, #40	; 0x28
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	1ff80000 	.word	0x1ff80000

080038bc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80038e8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d10b      	bne.n	800390c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d102      	bne.n	8003904 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f004 f8f4 	bl	8007aec <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f043 0302 	orr.w	r3, r3, #2
 800390a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b08      	cmp	r3, #8
 8003914:	d132      	bne.n	800397c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	f043 0308 	orr.w	r3, r3, #8
 800391c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b04      	cmp	r3, #4
 8003926:	d126      	bne.n	8003976 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	2b02      	cmp	r3, #2
 800392e:	d113      	bne.n	8003958 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003936:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800393a:	d106      	bne.n	800394a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2102      	movs	r1, #2
 8003942:	4618      	mov	r0, r3
 8003944:	f001 fc24 	bl	8005190 <USB_InitFSLSPClkSel>
 8003948:	e011      	b.n	800396e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2101      	movs	r1, #1
 8003950:	4618      	mov	r0, r3
 8003952:	f001 fc1d 	bl	8005190 <USB_InitFSLSPClkSel>
 8003956:	e00a      	b.n	800396e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d106      	bne.n	800396e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003966:	461a      	mov	r2, r3
 8003968:	f64e 2360 	movw	r3, #60000	; 0xea60
 800396c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f004 f8e6 	bl	8007b40 <HAL_HCD_PortEnabled_Callback>
 8003974:	e002      	b.n	800397c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f004 f8f0 	bl	8007b5c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f003 0320 	and.w	r3, r3, #32
 8003982:	2b20      	cmp	r3, #32
 8003984:	d103      	bne.n	800398e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	f043 0320 	orr.w	r3, r3, #32
 800398c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003994:	461a      	mov	r2, r3
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	6013      	str	r3, [r2, #0]
}
 800399a:	bf00      	nop
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e11f      	b.n	8003bf6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d106      	bne.n	80039d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7fd f9a2 	bl	8000d14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2224      	movs	r2, #36	; 0x24
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0201 	bic.w	r2, r2, #1
 80039e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a08:	f000 fd3e 	bl	8004488 <HAL_RCC_GetPCLK1Freq>
 8003a0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	4a7b      	ldr	r2, [pc, #492]	; (8003c00 <HAL_I2C_Init+0x25c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d807      	bhi.n	8003a28 <HAL_I2C_Init+0x84>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4a7a      	ldr	r2, [pc, #488]	; (8003c04 <HAL_I2C_Init+0x260>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	bf94      	ite	ls
 8003a20:	2301      	movls	r3, #1
 8003a22:	2300      	movhi	r3, #0
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	e006      	b.n	8003a36 <HAL_I2C_Init+0x92>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4a77      	ldr	r2, [pc, #476]	; (8003c08 <HAL_I2C_Init+0x264>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	bf94      	ite	ls
 8003a30:	2301      	movls	r3, #1
 8003a32:	2300      	movhi	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e0db      	b.n	8003bf6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4a72      	ldr	r2, [pc, #456]	; (8003c0c <HAL_I2C_Init+0x268>)
 8003a42:	fba2 2303 	umull	r2, r3, r2, r3
 8003a46:	0c9b      	lsrs	r3, r3, #18
 8003a48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	4a64      	ldr	r2, [pc, #400]	; (8003c00 <HAL_I2C_Init+0x25c>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d802      	bhi.n	8003a78 <HAL_I2C_Init+0xd4>
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	3301      	adds	r3, #1
 8003a76:	e009      	b.n	8003a8c <HAL_I2C_Init+0xe8>
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a7e:	fb02 f303 	mul.w	r3, r2, r3
 8003a82:	4a63      	ldr	r2, [pc, #396]	; (8003c10 <HAL_I2C_Init+0x26c>)
 8003a84:	fba2 2303 	umull	r2, r3, r2, r3
 8003a88:	099b      	lsrs	r3, r3, #6
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6812      	ldr	r2, [r2, #0]
 8003a90:	430b      	orrs	r3, r1
 8003a92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	4956      	ldr	r1, [pc, #344]	; (8003c00 <HAL_I2C_Init+0x25c>)
 8003aa8:	428b      	cmp	r3, r1
 8003aaa:	d80d      	bhi.n	8003ac8 <HAL_I2C_Init+0x124>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	1e59      	subs	r1, r3, #1
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aba:	3301      	adds	r3, #1
 8003abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac0:	2b04      	cmp	r3, #4
 8003ac2:	bf38      	it	cc
 8003ac4:	2304      	movcc	r3, #4
 8003ac6:	e04f      	b.n	8003b68 <HAL_I2C_Init+0x1c4>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d111      	bne.n	8003af4 <HAL_I2C_Init+0x150>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	1e58      	subs	r0, r3, #1
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6859      	ldr	r1, [r3, #4]
 8003ad8:	460b      	mov	r3, r1
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	440b      	add	r3, r1
 8003ade:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	bf0c      	ite	eq
 8003aec:	2301      	moveq	r3, #1
 8003aee:	2300      	movne	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	e012      	b.n	8003b1a <HAL_I2C_Init+0x176>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	1e58      	subs	r0, r3, #1
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6859      	ldr	r1, [r3, #4]
 8003afc:	460b      	mov	r3, r1
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	0099      	lsls	r1, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	bf0c      	ite	eq
 8003b14:	2301      	moveq	r3, #1
 8003b16:	2300      	movne	r3, #0
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <HAL_I2C_Init+0x17e>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e022      	b.n	8003b68 <HAL_I2C_Init+0x1c4>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10e      	bne.n	8003b48 <HAL_I2C_Init+0x1a4>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	1e58      	subs	r0, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6859      	ldr	r1, [r3, #4]
 8003b32:	460b      	mov	r3, r1
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	440b      	add	r3, r1
 8003b38:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b46:	e00f      	b.n	8003b68 <HAL_I2C_Init+0x1c4>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	1e58      	subs	r0, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6859      	ldr	r1, [r3, #4]
 8003b50:	460b      	mov	r3, r1
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	0099      	lsls	r1, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b5e:	3301      	adds	r3, #1
 8003b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	6809      	ldr	r1, [r1, #0]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69da      	ldr	r2, [r3, #28]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6911      	ldr	r1, [r2, #16]
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	68d2      	ldr	r2, [r2, #12]
 8003ba2:	4311      	orrs	r1, r2
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6812      	ldr	r2, [r2, #0]
 8003ba8:	430b      	orrs	r3, r1
 8003baa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	695a      	ldr	r2, [r3, #20]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0201 	orr.w	r2, r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2220      	movs	r2, #32
 8003be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	000186a0 	.word	0x000186a0
 8003c04:	001e847f 	.word	0x001e847f
 8003c08:	003d08ff 	.word	0x003d08ff
 8003c0c:	431bde83 	.word	0x431bde83
 8003c10:	10624dd3 	.word	0x10624dd3

08003c14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e25b      	b.n	80040de <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d075      	beq.n	8003d1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c32:	4ba3      	ldr	r3, [pc, #652]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 030c 	and.w	r3, r3, #12
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d00c      	beq.n	8003c58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c3e:	4ba0      	ldr	r3, [pc, #640]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c46:	2b08      	cmp	r3, #8
 8003c48:	d112      	bne.n	8003c70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c4a:	4b9d      	ldr	r3, [pc, #628]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c56:	d10b      	bne.n	8003c70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c58:	4b99      	ldr	r3, [pc, #612]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d05b      	beq.n	8003d1c <HAL_RCC_OscConfig+0x108>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d157      	bne.n	8003d1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e236      	b.n	80040de <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c78:	d106      	bne.n	8003c88 <HAL_RCC_OscConfig+0x74>
 8003c7a:	4b91      	ldr	r3, [pc, #580]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a90      	ldr	r2, [pc, #576]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c84:	6013      	str	r3, [r2, #0]
 8003c86:	e01d      	b.n	8003cc4 <HAL_RCC_OscConfig+0xb0>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c90:	d10c      	bne.n	8003cac <HAL_RCC_OscConfig+0x98>
 8003c92:	4b8b      	ldr	r3, [pc, #556]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a8a      	ldr	r2, [pc, #552]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003c98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	4b88      	ldr	r3, [pc, #544]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a87      	ldr	r2, [pc, #540]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	e00b      	b.n	8003cc4 <HAL_RCC_OscConfig+0xb0>
 8003cac:	4b84      	ldr	r3, [pc, #528]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a83      	ldr	r2, [pc, #524]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cb6:	6013      	str	r3, [r2, #0]
 8003cb8:	4b81      	ldr	r3, [pc, #516]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a80      	ldr	r2, [pc, #512]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003cbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d013      	beq.n	8003cf4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ccc:	f7fd f9b6 	bl	800103c <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cd4:	f7fd f9b2 	bl	800103c <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b64      	cmp	r3, #100	; 0x64
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e1fb      	b.n	80040de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ce6:	4b76      	ldr	r3, [pc, #472]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0f0      	beq.n	8003cd4 <HAL_RCC_OscConfig+0xc0>
 8003cf2:	e014      	b.n	8003d1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf4:	f7fd f9a2 	bl	800103c <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cfc:	f7fd f99e 	bl	800103c <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b64      	cmp	r3, #100	; 0x64
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e1e7      	b.n	80040de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d0e:	4b6c      	ldr	r3, [pc, #432]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f0      	bne.n	8003cfc <HAL_RCC_OscConfig+0xe8>
 8003d1a:	e000      	b.n	8003d1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d063      	beq.n	8003df2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d2a:	4b65      	ldr	r3, [pc, #404]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 030c 	and.w	r3, r3, #12
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00b      	beq.n	8003d4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d36:	4b62      	ldr	r3, [pc, #392]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d3e:	2b08      	cmp	r3, #8
 8003d40:	d11c      	bne.n	8003d7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d42:	4b5f      	ldr	r3, [pc, #380]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d116      	bne.n	8003d7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d4e:	4b5c      	ldr	r3, [pc, #368]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d005      	beq.n	8003d66 <HAL_RCC_OscConfig+0x152>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d001      	beq.n	8003d66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e1bb      	b.n	80040de <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d66:	4b56      	ldr	r3, [pc, #344]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	4952      	ldr	r1, [pc, #328]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d7a:	e03a      	b.n	8003df2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d020      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d84:	4b4f      	ldr	r3, [pc, #316]	; (8003ec4 <HAL_RCC_OscConfig+0x2b0>)
 8003d86:	2201      	movs	r2, #1
 8003d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8a:	f7fd f957 	bl	800103c <HAL_GetTick>
 8003d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d90:	e008      	b.n	8003da4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d92:	f7fd f953 	bl	800103c <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e19c      	b.n	80040de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da4:	4b46      	ldr	r3, [pc, #280]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0f0      	beq.n	8003d92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db0:	4b43      	ldr	r3, [pc, #268]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	4940      	ldr	r1, [pc, #256]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	600b      	str	r3, [r1, #0]
 8003dc4:	e015      	b.n	8003df2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dc6:	4b3f      	ldr	r3, [pc, #252]	; (8003ec4 <HAL_RCC_OscConfig+0x2b0>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dcc:	f7fd f936 	bl	800103c <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dd4:	f7fd f932 	bl	800103c <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e17b      	b.n	80040de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003de6:	4b36      	ldr	r3, [pc, #216]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1f0      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0308 	and.w	r3, r3, #8
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d030      	beq.n	8003e60 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d016      	beq.n	8003e34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e06:	4b30      	ldr	r3, [pc, #192]	; (8003ec8 <HAL_RCC_OscConfig+0x2b4>)
 8003e08:	2201      	movs	r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0c:	f7fd f916 	bl	800103c <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e14:	f7fd f912 	bl	800103c <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e15b      	b.n	80040de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e26:	4b26      	ldr	r3, [pc, #152]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0f0      	beq.n	8003e14 <HAL_RCC_OscConfig+0x200>
 8003e32:	e015      	b.n	8003e60 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e34:	4b24      	ldr	r3, [pc, #144]	; (8003ec8 <HAL_RCC_OscConfig+0x2b4>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e3a:	f7fd f8ff 	bl	800103c <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e42:	f7fd f8fb 	bl	800103c <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e144      	b.n	80040de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e54:	4b1a      	ldr	r3, [pc, #104]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1f0      	bne.n	8003e42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 80a0 	beq.w	8003fae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e72:	4b13      	ldr	r3, [pc, #76]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10f      	bne.n	8003e9e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60bb      	str	r3, [r7, #8]
 8003e82:	4b0f      	ldr	r3, [pc, #60]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	4a0e      	ldr	r2, [pc, #56]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e8e:	4b0c      	ldr	r3, [pc, #48]	; (8003ec0 <HAL_RCC_OscConfig+0x2ac>)
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e96:	60bb      	str	r3, [r7, #8]
 8003e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <HAL_RCC_OscConfig+0x2b8>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d121      	bne.n	8003eee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eaa:	4b08      	ldr	r3, [pc, #32]	; (8003ecc <HAL_RCC_OscConfig+0x2b8>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a07      	ldr	r2, [pc, #28]	; (8003ecc <HAL_RCC_OscConfig+0x2b8>)
 8003eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eb6:	f7fd f8c1 	bl	800103c <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ebc:	e011      	b.n	8003ee2 <HAL_RCC_OscConfig+0x2ce>
 8003ebe:	bf00      	nop
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	42470000 	.word	0x42470000
 8003ec8:	42470e80 	.word	0x42470e80
 8003ecc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ed0:	f7fd f8b4 	bl	800103c <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e0fd      	b.n	80040de <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee2:	4b81      	ldr	r3, [pc, #516]	; (80040e8 <HAL_RCC_OscConfig+0x4d4>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0f0      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d106      	bne.n	8003f04 <HAL_RCC_OscConfig+0x2f0>
 8003ef6:	4b7d      	ldr	r3, [pc, #500]	; (80040ec <HAL_RCC_OscConfig+0x4d8>)
 8003ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efa:	4a7c      	ldr	r2, [pc, #496]	; (80040ec <HAL_RCC_OscConfig+0x4d8>)
 8003efc:	f043 0301 	orr.w	r3, r3, #1
 8003f00:	6713      	str	r3, [r2, #112]	; 0x70
 8003f02:	e01c      	b.n	8003f3e <HAL_RCC_OscConfig+0x32a>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	2b05      	cmp	r3, #5
 8003f0a:	d10c      	bne.n	8003f26 <HAL_RCC_OscConfig+0x312>
 8003f0c:	4b77      	ldr	r3, [pc, #476]	; (80040ec <HAL_RCC_OscConfig+0x4d8>)
 8003f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f10:	4a76      	ldr	r2, [pc, #472]	; (80040ec <HAL_RCC_OscConfig+0x4d8>)
 8003f12:	f043 0304 	orr.w	r3, r3, #4
 8003f16:	6713      	str	r3, [r2, #112]	; 0x70
 8003f18:	4b74      	ldr	r3, [pc, #464]	; (80040ec <HAL_RCC_OscConfig+0x4d8>)
 8003f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1c:	4a73      	ldr	r2, [pc, #460]	; (80040ec <HAL_RCC_OscConfig+0x4d8>)
 8003f1e:	f043 0301 	orr.w	r3, r3, #1
 8003f22:	6713      	str	r3, [r2, #112]	; 0x70
 8003f24:	e00b      	b.n	8003f3e <HAL_RCC_OscConfig+0x32a>
 8003f26:	4b71      	ldr	r3, [pc, #452]	; (80040ec <HAL_RCC_OscConfig+0x4d8>)
 8003f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2a:	4a70      	ldr	r2, [pc, #448]	; (80040ec <HAL_RCC_OscConfig+0x4d8>)
 8003f2c:	f023 0301 	bic.w	r3, r3, #1
 8003f30:	6713      	str	r3, [r2, #112]	; 0x70
 8003f32:	4b6e      	ldr	r3, [pc, #440]	; (80040ec <HAL_RCC_OscConfig+0x4d8>)
 8003f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f36:	4a6d      	ldr	r2, [pc, #436]	; (80040ec <HAL_RCC_OscConfig+0x4d8>)
 8003f38:	f023 0304 	bic.w	r3, r3, #4
 8003f3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d015      	beq.n	8003f72 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f46:	f7fd f879 	bl	800103c <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f4c:	e00a      	b.n	8003f64 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f4e:	f7fd f875 	bl	800103c <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e0bc      	b.n	80040de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f64:	4b61      	ldr	r3, [pc, #388]	; (80040ec <HAL_RCC_OscConfig+0x4d8>)
 8003f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0ee      	beq.n	8003f4e <HAL_RCC_OscConfig+0x33a>
 8003f70:	e014      	b.n	8003f9c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f72:	f7fd f863 	bl	800103c <HAL_GetTick>
 8003f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f78:	e00a      	b.n	8003f90 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f7a:	f7fd f85f 	bl	800103c <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e0a6      	b.n	80040de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f90:	4b56      	ldr	r3, [pc, #344]	; (80040ec <HAL_RCC_OscConfig+0x4d8>)
 8003f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1ee      	bne.n	8003f7a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f9c:	7dfb      	ldrb	r3, [r7, #23]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d105      	bne.n	8003fae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fa2:	4b52      	ldr	r3, [pc, #328]	; (80040ec <HAL_RCC_OscConfig+0x4d8>)
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	4a51      	ldr	r2, [pc, #324]	; (80040ec <HAL_RCC_OscConfig+0x4d8>)
 8003fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 8092 	beq.w	80040dc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fb8:	4b4c      	ldr	r3, [pc, #304]	; (80040ec <HAL_RCC_OscConfig+0x4d8>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f003 030c 	and.w	r3, r3, #12
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d05c      	beq.n	800407e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d141      	bne.n	8004050 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fcc:	4b48      	ldr	r3, [pc, #288]	; (80040f0 <HAL_RCC_OscConfig+0x4dc>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd2:	f7fd f833 	bl	800103c <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd8:	e008      	b.n	8003fec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fda:	f7fd f82f 	bl	800103c <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e078      	b.n	80040de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fec:	4b3f      	ldr	r3, [pc, #252]	; (80040ec <HAL_RCC_OscConfig+0x4d8>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1f0      	bne.n	8003fda <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	69da      	ldr	r2, [r3, #28]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	431a      	orrs	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	019b      	lsls	r3, r3, #6
 8004008:	431a      	orrs	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400e:	085b      	lsrs	r3, r3, #1
 8004010:	3b01      	subs	r3, #1
 8004012:	041b      	lsls	r3, r3, #16
 8004014:	431a      	orrs	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401a:	061b      	lsls	r3, r3, #24
 800401c:	4933      	ldr	r1, [pc, #204]	; (80040ec <HAL_RCC_OscConfig+0x4d8>)
 800401e:	4313      	orrs	r3, r2
 8004020:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004022:	4b33      	ldr	r3, [pc, #204]	; (80040f0 <HAL_RCC_OscConfig+0x4dc>)
 8004024:	2201      	movs	r2, #1
 8004026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004028:	f7fd f808 	bl	800103c <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004030:	f7fd f804 	bl	800103c <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e04d      	b.n	80040de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004042:	4b2a      	ldr	r3, [pc, #168]	; (80040ec <HAL_RCC_OscConfig+0x4d8>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0f0      	beq.n	8004030 <HAL_RCC_OscConfig+0x41c>
 800404e:	e045      	b.n	80040dc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004050:	4b27      	ldr	r3, [pc, #156]	; (80040f0 <HAL_RCC_OscConfig+0x4dc>)
 8004052:	2200      	movs	r2, #0
 8004054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004056:	f7fc fff1 	bl	800103c <HAL_GetTick>
 800405a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800405c:	e008      	b.n	8004070 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800405e:	f7fc ffed 	bl	800103c <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d901      	bls.n	8004070 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e036      	b.n	80040de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004070:	4b1e      	ldr	r3, [pc, #120]	; (80040ec <HAL_RCC_OscConfig+0x4d8>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1f0      	bne.n	800405e <HAL_RCC_OscConfig+0x44a>
 800407c:	e02e      	b.n	80040dc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d101      	bne.n	800408a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e029      	b.n	80040de <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800408a:	4b18      	ldr	r3, [pc, #96]	; (80040ec <HAL_RCC_OscConfig+0x4d8>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	429a      	cmp	r2, r3
 800409c:	d11c      	bne.n	80040d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d115      	bne.n	80040d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040b2:	4013      	ands	r3, r2
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d10d      	bne.n	80040d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d106      	bne.n	80040d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d001      	beq.n	80040dc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e000      	b.n	80040de <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3718      	adds	r7, #24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	40007000 	.word	0x40007000
 80040ec:	40023800 	.word	0x40023800
 80040f0:	42470060 	.word	0x42470060

080040f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e0cc      	b.n	80042a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004108:	4b68      	ldr	r3, [pc, #416]	; (80042ac <HAL_RCC_ClockConfig+0x1b8>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 030f 	and.w	r3, r3, #15
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d90c      	bls.n	8004130 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004116:	4b65      	ldr	r3, [pc, #404]	; (80042ac <HAL_RCC_ClockConfig+0x1b8>)
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800411e:	4b63      	ldr	r3, [pc, #396]	; (80042ac <HAL_RCC_ClockConfig+0x1b8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	429a      	cmp	r2, r3
 800412a:	d001      	beq.n	8004130 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e0b8      	b.n	80042a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d020      	beq.n	800417e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b00      	cmp	r3, #0
 8004146:	d005      	beq.n	8004154 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004148:	4b59      	ldr	r3, [pc, #356]	; (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	4a58      	ldr	r2, [pc, #352]	; (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 800414e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004152:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0308 	and.w	r3, r3, #8
 800415c:	2b00      	cmp	r3, #0
 800415e:	d005      	beq.n	800416c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004160:	4b53      	ldr	r3, [pc, #332]	; (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	4a52      	ldr	r2, [pc, #328]	; (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004166:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800416a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800416c:	4b50      	ldr	r3, [pc, #320]	; (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	494d      	ldr	r1, [pc, #308]	; (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 800417a:	4313      	orrs	r3, r2
 800417c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	d044      	beq.n	8004214 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d107      	bne.n	80041a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004192:	4b47      	ldr	r3, [pc, #284]	; (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d119      	bne.n	80041d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e07f      	b.n	80042a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d003      	beq.n	80041b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ae:	2b03      	cmp	r3, #3
 80041b0:	d107      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b2:	4b3f      	ldr	r3, [pc, #252]	; (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d109      	bne.n	80041d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e06f      	b.n	80042a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c2:	4b3b      	ldr	r3, [pc, #236]	; (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e067      	b.n	80042a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041d2:	4b37      	ldr	r3, [pc, #220]	; (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f023 0203 	bic.w	r2, r3, #3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	4934      	ldr	r1, [pc, #208]	; (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041e4:	f7fc ff2a 	bl	800103c <HAL_GetTick>
 80041e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ea:	e00a      	b.n	8004202 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041ec:	f7fc ff26 	bl	800103c <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e04f      	b.n	80042a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004202:	4b2b      	ldr	r3, [pc, #172]	; (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 020c 	and.w	r2, r3, #12
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	429a      	cmp	r2, r3
 8004212:	d1eb      	bne.n	80041ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004214:	4b25      	ldr	r3, [pc, #148]	; (80042ac <HAL_RCC_ClockConfig+0x1b8>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 030f 	and.w	r3, r3, #15
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	429a      	cmp	r2, r3
 8004220:	d20c      	bcs.n	800423c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004222:	4b22      	ldr	r3, [pc, #136]	; (80042ac <HAL_RCC_ClockConfig+0x1b8>)
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800422a:	4b20      	ldr	r3, [pc, #128]	; (80042ac <HAL_RCC_ClockConfig+0x1b8>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	429a      	cmp	r2, r3
 8004236:	d001      	beq.n	800423c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e032      	b.n	80042a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d008      	beq.n	800425a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004248:	4b19      	ldr	r3, [pc, #100]	; (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	4916      	ldr	r1, [pc, #88]	; (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004256:	4313      	orrs	r3, r2
 8004258:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0308 	and.w	r3, r3, #8
 8004262:	2b00      	cmp	r3, #0
 8004264:	d009      	beq.n	800427a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004266:	4b12      	ldr	r3, [pc, #72]	; (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	490e      	ldr	r1, [pc, #56]	; (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004276:	4313      	orrs	r3, r2
 8004278:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800427a:	f000 f821 	bl	80042c0 <HAL_RCC_GetSysClockFreq>
 800427e:	4601      	mov	r1, r0
 8004280:	4b0b      	ldr	r3, [pc, #44]	; (80042b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	091b      	lsrs	r3, r3, #4
 8004286:	f003 030f 	and.w	r3, r3, #15
 800428a:	4a0a      	ldr	r2, [pc, #40]	; (80042b4 <HAL_RCC_ClockConfig+0x1c0>)
 800428c:	5cd3      	ldrb	r3, [r2, r3]
 800428e:	fa21 f303 	lsr.w	r3, r1, r3
 8004292:	4a09      	ldr	r2, [pc, #36]	; (80042b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004296:	4b09      	ldr	r3, [pc, #36]	; (80042bc <HAL_RCC_ClockConfig+0x1c8>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4618      	mov	r0, r3
 800429c:	f7fc fe8a 	bl	8000fb4 <HAL_InitTick>

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	40023c00 	.word	0x40023c00
 80042b0:	40023800 	.word	0x40023800
 80042b4:	08008174 	.word	0x08008174
 80042b8:	20000000 	.word	0x20000000
 80042bc:	20000004 	.word	0x20000004

080042c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042c6:	2300      	movs	r3, #0
 80042c8:	607b      	str	r3, [r7, #4]
 80042ca:	2300      	movs	r3, #0
 80042cc:	60fb      	str	r3, [r7, #12]
 80042ce:	2300      	movs	r3, #0
 80042d0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042d6:	4b63      	ldr	r3, [pc, #396]	; (8004464 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f003 030c 	and.w	r3, r3, #12
 80042de:	2b04      	cmp	r3, #4
 80042e0:	d007      	beq.n	80042f2 <HAL_RCC_GetSysClockFreq+0x32>
 80042e2:	2b08      	cmp	r3, #8
 80042e4:	d008      	beq.n	80042f8 <HAL_RCC_GetSysClockFreq+0x38>
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f040 80b4 	bne.w	8004454 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042ec:	4b5e      	ldr	r3, [pc, #376]	; (8004468 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80042ee:	60bb      	str	r3, [r7, #8]
       break;
 80042f0:	e0b3      	b.n	800445a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042f2:	4b5e      	ldr	r3, [pc, #376]	; (800446c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80042f4:	60bb      	str	r3, [r7, #8]
      break;
 80042f6:	e0b0      	b.n	800445a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042f8:	4b5a      	ldr	r3, [pc, #360]	; (8004464 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004300:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004302:	4b58      	ldr	r3, [pc, #352]	; (8004464 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d04a      	beq.n	80043a4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800430e:	4b55      	ldr	r3, [pc, #340]	; (8004464 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	099b      	lsrs	r3, r3, #6
 8004314:	f04f 0400 	mov.w	r4, #0
 8004318:	f240 11ff 	movw	r1, #511	; 0x1ff
 800431c:	f04f 0200 	mov.w	r2, #0
 8004320:	ea03 0501 	and.w	r5, r3, r1
 8004324:	ea04 0602 	and.w	r6, r4, r2
 8004328:	4629      	mov	r1, r5
 800432a:	4632      	mov	r2, r6
 800432c:	f04f 0300 	mov.w	r3, #0
 8004330:	f04f 0400 	mov.w	r4, #0
 8004334:	0154      	lsls	r4, r2, #5
 8004336:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800433a:	014b      	lsls	r3, r1, #5
 800433c:	4619      	mov	r1, r3
 800433e:	4622      	mov	r2, r4
 8004340:	1b49      	subs	r1, r1, r5
 8004342:	eb62 0206 	sbc.w	r2, r2, r6
 8004346:	f04f 0300 	mov.w	r3, #0
 800434a:	f04f 0400 	mov.w	r4, #0
 800434e:	0194      	lsls	r4, r2, #6
 8004350:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004354:	018b      	lsls	r3, r1, #6
 8004356:	1a5b      	subs	r3, r3, r1
 8004358:	eb64 0402 	sbc.w	r4, r4, r2
 800435c:	f04f 0100 	mov.w	r1, #0
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	00e2      	lsls	r2, r4, #3
 8004366:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800436a:	00d9      	lsls	r1, r3, #3
 800436c:	460b      	mov	r3, r1
 800436e:	4614      	mov	r4, r2
 8004370:	195b      	adds	r3, r3, r5
 8004372:	eb44 0406 	adc.w	r4, r4, r6
 8004376:	f04f 0100 	mov.w	r1, #0
 800437a:	f04f 0200 	mov.w	r2, #0
 800437e:	0262      	lsls	r2, r4, #9
 8004380:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004384:	0259      	lsls	r1, r3, #9
 8004386:	460b      	mov	r3, r1
 8004388:	4614      	mov	r4, r2
 800438a:	4618      	mov	r0, r3
 800438c:	4621      	mov	r1, r4
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f04f 0400 	mov.w	r4, #0
 8004394:	461a      	mov	r2, r3
 8004396:	4623      	mov	r3, r4
 8004398:	f7fb ff16 	bl	80001c8 <__aeabi_uldivmod>
 800439c:	4603      	mov	r3, r0
 800439e:	460c      	mov	r4, r1
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	e049      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043a4:	4b2f      	ldr	r3, [pc, #188]	; (8004464 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	099b      	lsrs	r3, r3, #6
 80043aa:	f04f 0400 	mov.w	r4, #0
 80043ae:	f240 11ff 	movw	r1, #511	; 0x1ff
 80043b2:	f04f 0200 	mov.w	r2, #0
 80043b6:	ea03 0501 	and.w	r5, r3, r1
 80043ba:	ea04 0602 	and.w	r6, r4, r2
 80043be:	4629      	mov	r1, r5
 80043c0:	4632      	mov	r2, r6
 80043c2:	f04f 0300 	mov.w	r3, #0
 80043c6:	f04f 0400 	mov.w	r4, #0
 80043ca:	0154      	lsls	r4, r2, #5
 80043cc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80043d0:	014b      	lsls	r3, r1, #5
 80043d2:	4619      	mov	r1, r3
 80043d4:	4622      	mov	r2, r4
 80043d6:	1b49      	subs	r1, r1, r5
 80043d8:	eb62 0206 	sbc.w	r2, r2, r6
 80043dc:	f04f 0300 	mov.w	r3, #0
 80043e0:	f04f 0400 	mov.w	r4, #0
 80043e4:	0194      	lsls	r4, r2, #6
 80043e6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80043ea:	018b      	lsls	r3, r1, #6
 80043ec:	1a5b      	subs	r3, r3, r1
 80043ee:	eb64 0402 	sbc.w	r4, r4, r2
 80043f2:	f04f 0100 	mov.w	r1, #0
 80043f6:	f04f 0200 	mov.w	r2, #0
 80043fa:	00e2      	lsls	r2, r4, #3
 80043fc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004400:	00d9      	lsls	r1, r3, #3
 8004402:	460b      	mov	r3, r1
 8004404:	4614      	mov	r4, r2
 8004406:	195b      	adds	r3, r3, r5
 8004408:	eb44 0406 	adc.w	r4, r4, r6
 800440c:	f04f 0100 	mov.w	r1, #0
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	02a2      	lsls	r2, r4, #10
 8004416:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800441a:	0299      	lsls	r1, r3, #10
 800441c:	460b      	mov	r3, r1
 800441e:	4614      	mov	r4, r2
 8004420:	4618      	mov	r0, r3
 8004422:	4621      	mov	r1, r4
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f04f 0400 	mov.w	r4, #0
 800442a:	461a      	mov	r2, r3
 800442c:	4623      	mov	r3, r4
 800442e:	f7fb fecb 	bl	80001c8 <__aeabi_uldivmod>
 8004432:	4603      	mov	r3, r0
 8004434:	460c      	mov	r4, r1
 8004436:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004438:	4b0a      	ldr	r3, [pc, #40]	; (8004464 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	0c1b      	lsrs	r3, r3, #16
 800443e:	f003 0303 	and.w	r3, r3, #3
 8004442:	3301      	adds	r3, #1
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004450:	60bb      	str	r3, [r7, #8]
      break;
 8004452:	e002      	b.n	800445a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004454:	4b04      	ldr	r3, [pc, #16]	; (8004468 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004456:	60bb      	str	r3, [r7, #8]
      break;
 8004458:	bf00      	nop
    }
  }
  return sysclockfreq;
 800445a:	68bb      	ldr	r3, [r7, #8]
}
 800445c:	4618      	mov	r0, r3
 800445e:	3714      	adds	r7, #20
 8004460:	46bd      	mov	sp, r7
 8004462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004464:	40023800 	.word	0x40023800
 8004468:	00f42400 	.word	0x00f42400
 800446c:	007a1200 	.word	0x007a1200

08004470 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004474:	4b03      	ldr	r3, [pc, #12]	; (8004484 <HAL_RCC_GetHCLKFreq+0x14>)
 8004476:	681b      	ldr	r3, [r3, #0]
}
 8004478:	4618      	mov	r0, r3
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	20000000 	.word	0x20000000

08004488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800448c:	f7ff fff0 	bl	8004470 <HAL_RCC_GetHCLKFreq>
 8004490:	4601      	mov	r1, r0
 8004492:	4b05      	ldr	r3, [pc, #20]	; (80044a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	0a9b      	lsrs	r3, r3, #10
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	4a03      	ldr	r2, [pc, #12]	; (80044ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800449e:	5cd3      	ldrb	r3, [r2, r3]
 80044a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40023800 	.word	0x40023800
 80044ac:	08008184 	.word	0x08008184

080044b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e01d      	b.n	80044fe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d106      	bne.n	80044dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7fc fc64 	bl	8000da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2202      	movs	r2, #2
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3304      	adds	r3, #4
 80044ec:	4619      	mov	r1, r3
 80044ee:	4610      	mov	r0, r2
 80044f0:	f000 fa1e 	bl	8004930 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004506:	b480      	push	{r7}
 8004508:	b085      	sub	sp, #20
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68da      	ldr	r2, [r3, #12]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f042 0201 	orr.w	r2, r2, #1
 800451c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f003 0307 	and.w	r3, r3, #7
 8004528:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2b06      	cmp	r3, #6
 800452e:	d007      	beq.n	8004540 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 0201 	orr.w	r2, r2, #1
 800453e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3714      	adds	r7, #20
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b082      	sub	sp, #8
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	2b02      	cmp	r3, #2
 8004562:	d122      	bne.n	80045aa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b02      	cmp	r3, #2
 8004570:	d11b      	bne.n	80045aa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f06f 0202 	mvn.w	r2, #2
 800457a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	f003 0303 	and.w	r3, r3, #3
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 f9af 	bl	80048f4 <HAL_TIM_IC_CaptureCallback>
 8004596:	e005      	b.n	80045a4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f9a1 	bl	80048e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f9b2 	bl	8004908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	d122      	bne.n	80045fe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f003 0304 	and.w	r3, r3, #4
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	d11b      	bne.n	80045fe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f06f 0204 	mvn.w	r2, #4
 80045ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d003      	beq.n	80045ec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f985 	bl	80048f4 <HAL_TIM_IC_CaptureCallback>
 80045ea:	e005      	b.n	80045f8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f977 	bl	80048e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f988 	bl	8004908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	f003 0308 	and.w	r3, r3, #8
 8004608:	2b08      	cmp	r3, #8
 800460a:	d122      	bne.n	8004652 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f003 0308 	and.w	r3, r3, #8
 8004616:	2b08      	cmp	r3, #8
 8004618:	d11b      	bne.n	8004652 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f06f 0208 	mvn.w	r2, #8
 8004622:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2204      	movs	r2, #4
 8004628:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	f003 0303 	and.w	r3, r3, #3
 8004634:	2b00      	cmp	r3, #0
 8004636:	d003      	beq.n	8004640 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 f95b 	bl	80048f4 <HAL_TIM_IC_CaptureCallback>
 800463e:	e005      	b.n	800464c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f94d 	bl	80048e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f95e 	bl	8004908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	f003 0310 	and.w	r3, r3, #16
 800465c:	2b10      	cmp	r3, #16
 800465e:	d122      	bne.n	80046a6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	f003 0310 	and.w	r3, r3, #16
 800466a:	2b10      	cmp	r3, #16
 800466c:	d11b      	bne.n	80046a6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f06f 0210 	mvn.w	r2, #16
 8004676:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2208      	movs	r2, #8
 800467c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f931 	bl	80048f4 <HAL_TIM_IC_CaptureCallback>
 8004692:	e005      	b.n	80046a0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f923 	bl	80048e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f934 	bl	8004908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d10e      	bne.n	80046d2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d107      	bne.n	80046d2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f06f 0201 	mvn.w	r2, #1
 80046ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f8fd 	bl	80048cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046dc:	2b80      	cmp	r3, #128	; 0x80
 80046de:	d10e      	bne.n	80046fe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ea:	2b80      	cmp	r3, #128	; 0x80
 80046ec:	d107      	bne.n	80046fe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 fad9 	bl	8004cb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004708:	2b40      	cmp	r3, #64	; 0x40
 800470a:	d10e      	bne.n	800472a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004716:	2b40      	cmp	r3, #64	; 0x40
 8004718:	d107      	bne.n	800472a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 f8f9 	bl	800491c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	f003 0320 	and.w	r3, r3, #32
 8004734:	2b20      	cmp	r3, #32
 8004736:	d10e      	bne.n	8004756 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	f003 0320 	and.w	r3, r3, #32
 8004742:	2b20      	cmp	r3, #32
 8004744:	d107      	bne.n	8004756 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f06f 0220 	mvn.w	r2, #32
 800474e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 faa3 	bl	8004c9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004756:	bf00      	nop
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b084      	sub	sp, #16
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800476e:	2b01      	cmp	r3, #1
 8004770:	d101      	bne.n	8004776 <HAL_TIM_ConfigClockSource+0x18>
 8004772:	2302      	movs	r3, #2
 8004774:	e0a6      	b.n	80048c4 <HAL_TIM_ConfigClockSource+0x166>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2202      	movs	r2, #2
 8004782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004794:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800479c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2b40      	cmp	r3, #64	; 0x40
 80047ac:	d067      	beq.n	800487e <HAL_TIM_ConfigClockSource+0x120>
 80047ae:	2b40      	cmp	r3, #64	; 0x40
 80047b0:	d80b      	bhi.n	80047ca <HAL_TIM_ConfigClockSource+0x6c>
 80047b2:	2b10      	cmp	r3, #16
 80047b4:	d073      	beq.n	800489e <HAL_TIM_ConfigClockSource+0x140>
 80047b6:	2b10      	cmp	r3, #16
 80047b8:	d802      	bhi.n	80047c0 <HAL_TIM_ConfigClockSource+0x62>
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d06f      	beq.n	800489e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80047be:	e078      	b.n	80048b2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80047c0:	2b20      	cmp	r3, #32
 80047c2:	d06c      	beq.n	800489e <HAL_TIM_ConfigClockSource+0x140>
 80047c4:	2b30      	cmp	r3, #48	; 0x30
 80047c6:	d06a      	beq.n	800489e <HAL_TIM_ConfigClockSource+0x140>
      break;
 80047c8:	e073      	b.n	80048b2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80047ca:	2b70      	cmp	r3, #112	; 0x70
 80047cc:	d00d      	beq.n	80047ea <HAL_TIM_ConfigClockSource+0x8c>
 80047ce:	2b70      	cmp	r3, #112	; 0x70
 80047d0:	d804      	bhi.n	80047dc <HAL_TIM_ConfigClockSource+0x7e>
 80047d2:	2b50      	cmp	r3, #80	; 0x50
 80047d4:	d033      	beq.n	800483e <HAL_TIM_ConfigClockSource+0xe0>
 80047d6:	2b60      	cmp	r3, #96	; 0x60
 80047d8:	d041      	beq.n	800485e <HAL_TIM_ConfigClockSource+0x100>
      break;
 80047da:	e06a      	b.n	80048b2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80047dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e0:	d066      	beq.n	80048b0 <HAL_TIM_ConfigClockSource+0x152>
 80047e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047e6:	d017      	beq.n	8004818 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80047e8:	e063      	b.n	80048b2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6818      	ldr	r0, [r3, #0]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	6899      	ldr	r1, [r3, #8]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f000 f9b3 	bl	8004b64 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800480c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	609a      	str	r2, [r3, #8]
      break;
 8004816:	e04c      	b.n	80048b2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6818      	ldr	r0, [r3, #0]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	6899      	ldr	r1, [r3, #8]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f000 f99c 	bl	8004b64 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689a      	ldr	r2, [r3, #8]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800483a:	609a      	str	r2, [r3, #8]
      break;
 800483c:	e039      	b.n	80048b2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6818      	ldr	r0, [r3, #0]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	6859      	ldr	r1, [r3, #4]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	461a      	mov	r2, r3
 800484c:	f000 f910 	bl	8004a70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2150      	movs	r1, #80	; 0x50
 8004856:	4618      	mov	r0, r3
 8004858:	f000 f969 	bl	8004b2e <TIM_ITRx_SetConfig>
      break;
 800485c:	e029      	b.n	80048b2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6818      	ldr	r0, [r3, #0]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	6859      	ldr	r1, [r3, #4]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	461a      	mov	r2, r3
 800486c:	f000 f92f 	bl	8004ace <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2160      	movs	r1, #96	; 0x60
 8004876:	4618      	mov	r0, r3
 8004878:	f000 f959 	bl	8004b2e <TIM_ITRx_SetConfig>
      break;
 800487c:	e019      	b.n	80048b2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6818      	ldr	r0, [r3, #0]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	6859      	ldr	r1, [r3, #4]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	461a      	mov	r2, r3
 800488c:	f000 f8f0 	bl	8004a70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2140      	movs	r1, #64	; 0x40
 8004896:	4618      	mov	r0, r3
 8004898:	f000 f949 	bl	8004b2e <TIM_ITRx_SetConfig>
      break;
 800489c:	e009      	b.n	80048b2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4619      	mov	r1, r3
 80048a8:	4610      	mov	r0, r2
 80048aa:	f000 f940 	bl	8004b2e <TIM_ITRx_SetConfig>
      break;
 80048ae:	e000      	b.n	80048b2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80048b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a40      	ldr	r2, [pc, #256]	; (8004a44 <TIM_Base_SetConfig+0x114>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d013      	beq.n	8004970 <TIM_Base_SetConfig+0x40>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800494e:	d00f      	beq.n	8004970 <TIM_Base_SetConfig+0x40>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a3d      	ldr	r2, [pc, #244]	; (8004a48 <TIM_Base_SetConfig+0x118>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d00b      	beq.n	8004970 <TIM_Base_SetConfig+0x40>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a3c      	ldr	r2, [pc, #240]	; (8004a4c <TIM_Base_SetConfig+0x11c>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d007      	beq.n	8004970 <TIM_Base_SetConfig+0x40>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a3b      	ldr	r2, [pc, #236]	; (8004a50 <TIM_Base_SetConfig+0x120>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d003      	beq.n	8004970 <TIM_Base_SetConfig+0x40>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a3a      	ldr	r2, [pc, #232]	; (8004a54 <TIM_Base_SetConfig+0x124>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d108      	bne.n	8004982 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004976:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	4313      	orrs	r3, r2
 8004980:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a2f      	ldr	r2, [pc, #188]	; (8004a44 <TIM_Base_SetConfig+0x114>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d02b      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004990:	d027      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a2c      	ldr	r2, [pc, #176]	; (8004a48 <TIM_Base_SetConfig+0x118>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d023      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a2b      	ldr	r2, [pc, #172]	; (8004a4c <TIM_Base_SetConfig+0x11c>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d01f      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a2a      	ldr	r2, [pc, #168]	; (8004a50 <TIM_Base_SetConfig+0x120>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d01b      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a29      	ldr	r2, [pc, #164]	; (8004a54 <TIM_Base_SetConfig+0x124>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d017      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a28      	ldr	r2, [pc, #160]	; (8004a58 <TIM_Base_SetConfig+0x128>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d013      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a27      	ldr	r2, [pc, #156]	; (8004a5c <TIM_Base_SetConfig+0x12c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d00f      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a26      	ldr	r2, [pc, #152]	; (8004a60 <TIM_Base_SetConfig+0x130>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d00b      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a25      	ldr	r2, [pc, #148]	; (8004a64 <TIM_Base_SetConfig+0x134>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d007      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a24      	ldr	r2, [pc, #144]	; (8004a68 <TIM_Base_SetConfig+0x138>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d003      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a23      	ldr	r2, [pc, #140]	; (8004a6c <TIM_Base_SetConfig+0x13c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d108      	bne.n	80049f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a0a      	ldr	r2, [pc, #40]	; (8004a44 <TIM_Base_SetConfig+0x114>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d003      	beq.n	8004a28 <TIM_Base_SetConfig+0xf8>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a0c      	ldr	r2, [pc, #48]	; (8004a54 <TIM_Base_SetConfig+0x124>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d103      	bne.n	8004a30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	691a      	ldr	r2, [r3, #16]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	615a      	str	r2, [r3, #20]
}
 8004a36:	bf00      	nop
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	40010000 	.word	0x40010000
 8004a48:	40000400 	.word	0x40000400
 8004a4c:	40000800 	.word	0x40000800
 8004a50:	40000c00 	.word	0x40000c00
 8004a54:	40010400 	.word	0x40010400
 8004a58:	40014000 	.word	0x40014000
 8004a5c:	40014400 	.word	0x40014400
 8004a60:	40014800 	.word	0x40014800
 8004a64:	40001800 	.word	0x40001800
 8004a68:	40001c00 	.word	0x40001c00
 8004a6c:	40002000 	.word	0x40002000

08004a70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b087      	sub	sp, #28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	f023 0201 	bic.w	r2, r3, #1
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	011b      	lsls	r3, r3, #4
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f023 030a 	bic.w	r3, r3, #10
 8004aac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	621a      	str	r2, [r3, #32]
}
 8004ac2:	bf00      	nop
 8004ac4:	371c      	adds	r7, #28
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b087      	sub	sp, #28
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	60f8      	str	r0, [r7, #12]
 8004ad6:	60b9      	str	r1, [r7, #8]
 8004ad8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	f023 0210 	bic.w	r2, r3, #16
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004af8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	031b      	lsls	r3, r3, #12
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	011b      	lsls	r3, r3, #4
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	621a      	str	r2, [r3, #32]
}
 8004b22:	bf00      	nop
 8004b24:	371c      	adds	r7, #28
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b085      	sub	sp, #20
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
 8004b36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f043 0307 	orr.w	r3, r3, #7
 8004b50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	609a      	str	r2, [r3, #8]
}
 8004b58:	bf00      	nop
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
 8004b70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	021a      	lsls	r2, r3, #8
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	431a      	orrs	r2, r3
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	609a      	str	r2, [r3, #8]
}
 8004b98:	bf00      	nop
 8004b9a:	371c      	adds	r7, #28
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d101      	bne.n	8004bbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bb8:	2302      	movs	r3, #2
 8004bba:	e05a      	b.n	8004c72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a21      	ldr	r2, [pc, #132]	; (8004c80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d022      	beq.n	8004c46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c08:	d01d      	beq.n	8004c46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a1d      	ldr	r2, [pc, #116]	; (8004c84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d018      	beq.n	8004c46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a1b      	ldr	r2, [pc, #108]	; (8004c88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d013      	beq.n	8004c46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a1a      	ldr	r2, [pc, #104]	; (8004c8c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d00e      	beq.n	8004c46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a18      	ldr	r2, [pc, #96]	; (8004c90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d009      	beq.n	8004c46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a17      	ldr	r2, [pc, #92]	; (8004c94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d004      	beq.n	8004c46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a15      	ldr	r2, [pc, #84]	; (8004c98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d10c      	bne.n	8004c60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	68ba      	ldr	r2, [r7, #8]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3714      	adds	r7, #20
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	40010000 	.word	0x40010000
 8004c84:	40000400 	.word	0x40000400
 8004c88:	40000800 	.word	0x40000800
 8004c8c:	40000c00 	.word	0x40000c00
 8004c90:	40010400 	.word	0x40010400
 8004c94:	40014000 	.word	0x40014000
 8004c98:	40001800 	.word	0x40001800

08004c9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cc4:	b084      	sub	sp, #16
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b084      	sub	sp, #16
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	f107 001c 	add.w	r0, r7, #28
 8004cd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d122      	bne.n	8004d22 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004cf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d105      	bne.n	8004d16 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f94a 	bl	8004fb0 <USB_CoreReset>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	73fb      	strb	r3, [r7, #15]
 8004d20:	e01a      	b.n	8004d58 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f93e 	bl	8004fb0 <USB_CoreReset>
 8004d34:	4603      	mov	r3, r0
 8004d36:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d106      	bne.n	8004d4c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	639a      	str	r2, [r3, #56]	; 0x38
 8004d4a:	e005      	b.n	8004d58 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d10b      	bne.n	8004d76 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f043 0206 	orr.w	r2, r3, #6
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f043 0220 	orr.w	r2, r3, #32
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d82:	b004      	add	sp, #16
 8004d84:	4770      	bx	lr

08004d86 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f043 0201 	orr.w	r2, r3, #1
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f023 0201 	bic.w	r2, r3, #1
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b082      	sub	sp, #8
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004de2:	78fb      	ldrb	r3, [r7, #3]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d106      	bne.n	8004df6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	60da      	str	r2, [r3, #12]
 8004df4:	e00b      	b.n	8004e0e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004df6:	78fb      	ldrb	r3, [r7, #3]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d106      	bne.n	8004e0a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	60da      	str	r2, [r3, #12]
 8004e08:	e001      	b.n	8004e0e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e003      	b.n	8004e16 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004e0e:	2032      	movs	r0, #50	; 0x32
 8004e10:	f7fc f920 	bl	8001054 <HAL_Delay>

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
	...

08004e20 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	019b      	lsls	r3, r3, #6
 8004e32:	f043 0220 	orr.w	r2, r3, #32
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4a09      	ldr	r2, [pc, #36]	; (8004e68 <USB_FlushTxFifo+0x48>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d901      	bls.n	8004e4c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e006      	b.n	8004e5a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	f003 0320 	and.w	r3, r3, #32
 8004e54:	2b20      	cmp	r3, #32
 8004e56:	d0f0      	beq.n	8004e3a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	00030d40 	.word	0x00030d40

08004e6c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004e74:	2300      	movs	r3, #0
 8004e76:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2210      	movs	r2, #16
 8004e7c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	3301      	adds	r3, #1
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4a09      	ldr	r2, [pc, #36]	; (8004eac <USB_FlushRxFifo+0x40>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d901      	bls.n	8004e90 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e006      	b.n	8004e9e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	f003 0310 	and.w	r3, r3, #16
 8004e98:	2b10      	cmp	r3, #16
 8004e9a:	d0f0      	beq.n	8004e7e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	00030d40 	.word	0x00030d40

08004eb0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b089      	sub	sp, #36	; 0x24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	4611      	mov	r1, r2
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	71fb      	strb	r3, [r7, #7]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004ece:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d11a      	bne.n	8004f0c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004ed6:	88bb      	ldrh	r3, [r7, #4]
 8004ed8:	3303      	adds	r3, #3
 8004eda:	089b      	lsrs	r3, r3, #2
 8004edc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004ede:	2300      	movs	r3, #0
 8004ee0:	61bb      	str	r3, [r7, #24]
 8004ee2:	e00f      	b.n	8004f04 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004ee4:	79fb      	ldrb	r3, [r7, #7]
 8004ee6:	031a      	lsls	r2, r3, #12
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	3304      	adds	r3, #4
 8004efc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	3301      	adds	r3, #1
 8004f02:	61bb      	str	r3, [r7, #24]
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d3eb      	bcc.n	8004ee4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3724      	adds	r7, #36	; 0x24
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b089      	sub	sp, #36	; 0x24
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	60f8      	str	r0, [r7, #12]
 8004f22:	60b9      	str	r1, [r7, #8]
 8004f24:	4613      	mov	r3, r2
 8004f26:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004f30:	88fb      	ldrh	r3, [r7, #6]
 8004f32:	3303      	adds	r3, #3
 8004f34:	089b      	lsrs	r3, r3, #2
 8004f36:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004f38:	2300      	movs	r3, #0
 8004f3a:	61bb      	str	r3, [r7, #24]
 8004f3c:	e00b      	b.n	8004f56 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	3304      	adds	r3, #4
 8004f4e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	3301      	adds	r3, #1
 8004f54:	61bb      	str	r3, [r7, #24]
 8004f56:	69ba      	ldr	r2, [r7, #24]
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d3ef      	bcc.n	8004f3e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004f5e:	69fb      	ldr	r3, [r7, #28]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3724      	adds	r7, #36	; 0x24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	4013      	ands	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004f84:	68fb      	ldr	r3, [r7, #12]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004f92:	b480      	push	{r7}
 8004f94:	b083      	sub	sp, #12
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	f003 0301 	and.w	r3, r3, #1
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
	...

08004fb0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	4a13      	ldr	r2, [pc, #76]	; (8005014 <USB_CoreReset+0x64>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d901      	bls.n	8004fce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e01b      	b.n	8005006 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	daf2      	bge.n	8004fbc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	f043 0201 	orr.w	r2, r3, #1
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	60fb      	str	r3, [r7, #12]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4a09      	ldr	r2, [pc, #36]	; (8005014 <USB_CoreReset+0x64>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d901      	bls.n	8004ff8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e006      	b.n	8005006 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	2b01      	cmp	r3, #1
 8005002:	d0f0      	beq.n	8004fe6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	00030d40 	.word	0x00030d40

08005018 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005018:	b084      	sub	sp, #16
 800501a:	b580      	push	{r7, lr}
 800501c:	b084      	sub	sp, #16
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	f107 001c 	add.w	r0, r7, #28
 8005026:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005034:	461a      	mov	r2, r3
 8005036:	2300      	movs	r3, #0
 8005038:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005056:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005066:	2b00      	cmp	r3, #0
 8005068:	d018      	beq.n	800509c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	2b01      	cmp	r3, #1
 800506e:	d10a      	bne.n	8005086 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800507e:	f043 0304 	orr.w	r3, r3, #4
 8005082:	6013      	str	r3, [r2, #0]
 8005084:	e014      	b.n	80050b0 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68ba      	ldr	r2, [r7, #8]
 8005090:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005094:	f023 0304 	bic.w	r3, r3, #4
 8005098:	6013      	str	r3, [r2, #0]
 800509a:	e009      	b.n	80050b0 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050aa:	f023 0304 	bic.w	r3, r3, #4
 80050ae:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80050b0:	2110      	movs	r1, #16
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7ff feb4 	bl	8004e20 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f7ff fed7 	bl	8004e6c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80050be:	2300      	movs	r3, #0
 80050c0:	60fb      	str	r3, [r7, #12]
 80050c2:	e015      	b.n	80050f0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d0:	461a      	mov	r2, r3
 80050d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050d6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	015a      	lsls	r2, r3, #5
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	4413      	add	r3, r2
 80050e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e4:	461a      	mov	r2, r3
 80050e6:	2300      	movs	r3, #0
 80050e8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	3301      	adds	r3, #1
 80050ee:	60fb      	str	r3, [r7, #12]
 80050f0:	6a3b      	ldr	r3, [r7, #32]
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d3e5      	bcc.n	80050c4 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80050f8:	2101      	movs	r1, #1
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f8ac 	bl	8005258 <USB_DriveVbus>

  HAL_Delay(200U);
 8005100:	20c8      	movs	r0, #200	; 0xc8
 8005102:	f7fb ffa7 	bl	8001054 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005112:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00b      	beq.n	8005138 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005126:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a14      	ldr	r2, [pc, #80]	; (800517c <USB_HostInit+0x164>)
 800512c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a13      	ldr	r2, [pc, #76]	; (8005180 <USB_HostInit+0x168>)
 8005132:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005136:	e009      	b.n	800514c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2280      	movs	r2, #128	; 0x80
 800513c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a10      	ldr	r2, [pc, #64]	; (8005184 <USB_HostInit+0x16c>)
 8005142:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a10      	ldr	r2, [pc, #64]	; (8005188 <USB_HostInit+0x170>)
 8005148:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800514c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514e:	2b00      	cmp	r3, #0
 8005150:	d105      	bne.n	800515e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	f043 0210 	orr.w	r2, r3, #16
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	699a      	ldr	r2, [r3, #24]
 8005162:	4b0a      	ldr	r3, [pc, #40]	; (800518c <USB_HostInit+0x174>)
 8005164:	4313      	orrs	r3, r2
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005176:	b004      	add	sp, #16
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	01000200 	.word	0x01000200
 8005180:	00e00300 	.word	0x00e00300
 8005184:	00600080 	.word	0x00600080
 8005188:	004000e0 	.word	0x004000e0
 800518c:	a3200008 	.word	0xa3200008

08005190 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	460b      	mov	r3, r1
 800519a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051ae:	f023 0303 	bic.w	r3, r3, #3
 80051b2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	78fb      	ldrb	r3, [r7, #3]
 80051be:	f003 0303 	and.w	r3, r3, #3
 80051c2:	68f9      	ldr	r1, [r7, #12]
 80051c4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80051c8:	4313      	orrs	r3, r2
 80051ca:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80051cc:	78fb      	ldrb	r3, [r7, #3]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d107      	bne.n	80051e2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051d8:	461a      	mov	r2, r3
 80051da:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80051de:	6053      	str	r3, [r2, #4]
 80051e0:	e009      	b.n	80051f6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80051e2:	78fb      	ldrb	r3, [r7, #3]
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d106      	bne.n	80051f6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051ee:	461a      	mov	r2, r3
 80051f0:	f241 7370 	movw	r3, #6000	; 0x1770
 80051f4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005210:	2300      	movs	r3, #0
 8005212:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005224:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800522e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005232:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005234:	2064      	movs	r0, #100	; 0x64
 8005236:	f7fb ff0d 	bl	8001054 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005242:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005246:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005248:	200a      	movs	r0, #10
 800524a:	f7fb ff03 	bl	8001054 <HAL_Delay>

  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	460b      	mov	r3, r1
 8005262:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005268:	2300      	movs	r3, #0
 800526a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800527c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d109      	bne.n	800529c <USB_DriveVbus+0x44>
 8005288:	78fb      	ldrb	r3, [r7, #3]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d106      	bne.n	800529c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005296:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800529a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052a6:	d109      	bne.n	80052bc <USB_DriveVbus+0x64>
 80052a8:	78fb      	ldrb	r3, [r7, #3]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d106      	bne.n	80052bc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80052b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052ba:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b085      	sub	sp, #20
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80052d6:	2300      	movs	r3, #0
 80052d8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	0c5b      	lsrs	r3, r3, #17
 80052e8:	f003 0303 	and.w	r3, r3, #3
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	b29b      	uxth	r3, r3
}
 800530e:	4618      	mov	r0, r3
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
	...

0800531c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800531c:	b480      	push	{r7}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	4608      	mov	r0, r1
 8005326:	4611      	mov	r1, r2
 8005328:	461a      	mov	r2, r3
 800532a:	4603      	mov	r3, r0
 800532c:	70fb      	strb	r3, [r7, #3]
 800532e:	460b      	mov	r3, r1
 8005330:	70bb      	strb	r3, [r7, #2]
 8005332:	4613      	mov	r3, r2
 8005334:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005336:	2300      	movs	r3, #0
 8005338:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800533e:	78fb      	ldrb	r3, [r7, #3]
 8005340:	015a      	lsls	r2, r3, #5
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	4413      	add	r3, r2
 8005346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800534a:	461a      	mov	r2, r3
 800534c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005350:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005352:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005356:	2b03      	cmp	r3, #3
 8005358:	d87e      	bhi.n	8005458 <USB_HC_Init+0x13c>
 800535a:	a201      	add	r2, pc, #4	; (adr r2, 8005360 <USB_HC_Init+0x44>)
 800535c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005360:	08005371 	.word	0x08005371
 8005364:	0800541b 	.word	0x0800541b
 8005368:	08005371 	.word	0x08005371
 800536c:	080053dd 	.word	0x080053dd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005370:	78fb      	ldrb	r3, [r7, #3]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	4413      	add	r3, r2
 8005378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800537c:	461a      	mov	r2, r3
 800537e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005382:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005384:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005388:	2b00      	cmp	r3, #0
 800538a:	da10      	bge.n	80053ae <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800538c:	78fb      	ldrb	r3, [r7, #3]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	4413      	add	r3, r2
 8005394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	78fa      	ldrb	r2, [r7, #3]
 800539c:	0151      	lsls	r1, r2, #5
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	440a      	add	r2, r1
 80053a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053aa:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80053ac:	e057      	b.n	800545e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d051      	beq.n	800545e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80053ba:	78fb      	ldrb	r3, [r7, #3]
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	78fa      	ldrb	r2, [r7, #3]
 80053ca:	0151      	lsls	r1, r2, #5
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	440a      	add	r2, r1
 80053d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053d4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80053d8:	60d3      	str	r3, [r2, #12]
      break;
 80053da:	e040      	b.n	800545e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80053dc:	78fb      	ldrb	r3, [r7, #3]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053e8:	461a      	mov	r2, r3
 80053ea:	f240 639d 	movw	r3, #1693	; 0x69d
 80053ee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80053f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	da34      	bge.n	8005462 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80053f8:	78fb      	ldrb	r3, [r7, #3]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	78fa      	ldrb	r2, [r7, #3]
 8005408:	0151      	lsls	r1, r2, #5
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	440a      	add	r2, r1
 800540e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005412:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005416:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005418:	e023      	b.n	8005462 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800541a:	78fb      	ldrb	r3, [r7, #3]
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	4413      	add	r3, r2
 8005422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005426:	461a      	mov	r2, r3
 8005428:	f240 2325 	movw	r3, #549	; 0x225
 800542c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800542e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005432:	2b00      	cmp	r3, #0
 8005434:	da17      	bge.n	8005466 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005436:	78fb      	ldrb	r3, [r7, #3]
 8005438:	015a      	lsls	r2, r3, #5
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	4413      	add	r3, r2
 800543e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	78fa      	ldrb	r2, [r7, #3]
 8005446:	0151      	lsls	r1, r2, #5
 8005448:	68ba      	ldr	r2, [r7, #8]
 800544a:	440a      	add	r2, r1
 800544c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005450:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005454:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005456:	e006      	b.n	8005466 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	75fb      	strb	r3, [r7, #23]
      break;
 800545c:	e004      	b.n	8005468 <USB_HC_Init+0x14c>
      break;
 800545e:	bf00      	nop
 8005460:	e002      	b.n	8005468 <USB_HC_Init+0x14c>
      break;
 8005462:	bf00      	nop
 8005464:	e000      	b.n	8005468 <USB_HC_Init+0x14c>
      break;
 8005466:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800546e:	699a      	ldr	r2, [r3, #24]
 8005470:	78fb      	ldrb	r3, [r7, #3]
 8005472:	f003 030f 	and.w	r3, r3, #15
 8005476:	2101      	movs	r1, #1
 8005478:	fa01 f303 	lsl.w	r3, r1, r3
 800547c:	68b9      	ldr	r1, [r7, #8]
 800547e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005482:	4313      	orrs	r3, r2
 8005484:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005492:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005496:	2b00      	cmp	r3, #0
 8005498:	da03      	bge.n	80054a2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800549a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800549e:	613b      	str	r3, [r7, #16]
 80054a0:	e001      	b.n	80054a6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80054a2:	2300      	movs	r3, #0
 80054a4:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80054a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d103      	bne.n	80054b6 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80054ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054b2:	60fb      	str	r3, [r7, #12]
 80054b4:	e001      	b.n	80054ba <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80054b6:	2300      	movs	r3, #0
 80054b8:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80054ba:	787b      	ldrb	r3, [r7, #1]
 80054bc:	059b      	lsls	r3, r3, #22
 80054be:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80054c2:	78bb      	ldrb	r3, [r7, #2]
 80054c4:	02db      	lsls	r3, r3, #11
 80054c6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80054ca:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80054cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80054d0:	049b      	lsls	r3, r3, #18
 80054d2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80054d6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80054d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80054da:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80054de:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80054e4:	78fb      	ldrb	r3, [r7, #3]
 80054e6:	0159      	lsls	r1, r3, #5
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	440b      	add	r3, r1
 80054ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054f0:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80054f6:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80054f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	d10f      	bne.n	8005520 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005500:	78fb      	ldrb	r3, [r7, #3]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	4413      	add	r3, r2
 8005508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	78fa      	ldrb	r2, [r7, #3]
 8005510:	0151      	lsls	r1, r2, #5
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	440a      	add	r2, r1
 8005516:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800551a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800551e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005520:	7dfb      	ldrb	r3, [r7, #23]
}
 8005522:	4618      	mov	r0, r3
 8005524:	371c      	adds	r7, #28
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop

08005530 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b08c      	sub	sp, #48	; 0x30
 8005534:	af02      	add	r7, sp, #8
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	4613      	mov	r3, r2
 800553c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	785b      	ldrb	r3, [r3, #1]
 8005546:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005548:	f44f 7380 	mov.w	r3, #256	; 0x100
 800554c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005556:	2b00      	cmp	r3, #0
 8005558:	d028      	beq.n	80055ac <USB_HC_StartXfer+0x7c>
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	791b      	ldrb	r3, [r3, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d124      	bne.n	80055ac <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005562:	79fb      	ldrb	r3, [r7, #7]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10b      	bne.n	8005580 <USB_HC_StartXfer+0x50>
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	795b      	ldrb	r3, [r3, #5]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d107      	bne.n	8005580 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	785b      	ldrb	r3, [r3, #1]
 8005574:	4619      	mov	r1, r3
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f000 fa30 	bl	80059dc <USB_DoPing>
      return HAL_OK;
 800557c:	2300      	movs	r3, #0
 800557e:	e114      	b.n	80057aa <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8005580:	79fb      	ldrb	r3, [r7, #7]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d112      	bne.n	80055ac <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	6a3b      	ldr	r3, [r7, #32]
 800558c:	4413      	add	r3, r2
 800558e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	69fa      	ldr	r2, [r7, #28]
 8005596:	0151      	lsls	r1, r2, #5
 8005598:	6a3a      	ldr	r2, [r7, #32]
 800559a:	440a      	add	r2, r1
 800559c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055a0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80055a4:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	2200      	movs	r2, #0
 80055aa:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d018      	beq.n	80055e6 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	8912      	ldrh	r2, [r2, #8]
 80055bc:	4413      	add	r3, r2
 80055be:	3b01      	subs	r3, #1
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	8912      	ldrh	r2, [r2, #8]
 80055c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80055c8:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80055ca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80055cc:	8b7b      	ldrh	r3, [r7, #26]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d90b      	bls.n	80055ea <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80055d2:	8b7b      	ldrh	r3, [r7, #26]
 80055d4:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80055d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	8912      	ldrh	r2, [r2, #8]
 80055dc:	fb02 f203 	mul.w	r2, r2, r3
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	611a      	str	r2, [r3, #16]
 80055e4:	e001      	b.n	80055ea <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80055e6:	2301      	movs	r3, #1
 80055e8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	78db      	ldrb	r3, [r3, #3]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d006      	beq.n	8005600 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80055f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	8912      	ldrh	r2, [r2, #8]
 80055f8:	fb02 f203 	mul.w	r2, r2, r3
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005608:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800560a:	04d9      	lsls	r1, r3, #19
 800560c:	4b69      	ldr	r3, [pc, #420]	; (80057b4 <USB_HC_StartXfer+0x284>)
 800560e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005610:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	7a9b      	ldrb	r3, [r3, #10]
 8005616:	075b      	lsls	r3, r3, #29
 8005618:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800561c:	69f9      	ldr	r1, [r7, #28]
 800561e:	0148      	lsls	r0, r1, #5
 8005620:	6a39      	ldr	r1, [r7, #32]
 8005622:	4401      	add	r1, r0
 8005624:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005628:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800562a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800562c:	79fb      	ldrb	r3, [r7, #7]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d009      	beq.n	8005646 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	68d9      	ldr	r1, [r3, #12]
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	4413      	add	r3, r2
 800563e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005642:	460a      	mov	r2, r1
 8005644:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005646:	6a3b      	ldr	r3, [r7, #32]
 8005648:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	bf0c      	ite	eq
 8005656:	2301      	moveq	r3, #1
 8005658:	2300      	movne	r3, #0
 800565a:	b2db      	uxtb	r3, r3
 800565c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	015a      	lsls	r2, r3, #5
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	4413      	add	r3, r2
 8005666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	69fa      	ldr	r2, [r7, #28]
 800566e:	0151      	lsls	r1, r2, #5
 8005670:	6a3a      	ldr	r2, [r7, #32]
 8005672:	440a      	add	r2, r1
 8005674:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005678:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800567c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	015a      	lsls	r2, r3, #5
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	4413      	add	r3, r2
 8005686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	7e7b      	ldrb	r3, [r7, #25]
 800568e:	075b      	lsls	r3, r3, #29
 8005690:	69f9      	ldr	r1, [r7, #28]
 8005692:	0148      	lsls	r0, r1, #5
 8005694:	6a39      	ldr	r1, [r7, #32]
 8005696:	4401      	add	r1, r0
 8005698:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800569c:	4313      	orrs	r3, r2
 800569e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	6a3b      	ldr	r3, [r7, #32]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a42      	ldr	r2, [pc, #264]	; (80057b8 <USB_HC_StartXfer+0x288>)
 80056b0:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80056b2:	4b41      	ldr	r3, [pc, #260]	; (80057b8 <USB_HC_StartXfer+0x288>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056ba:	4a3f      	ldr	r2, [pc, #252]	; (80057b8 <USB_HC_StartXfer+0x288>)
 80056bc:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	78db      	ldrb	r3, [r3, #3]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d006      	beq.n	80056d4 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80056c6:	4b3c      	ldr	r3, [pc, #240]	; (80057b8 <USB_HC_StartXfer+0x288>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ce:	4a3a      	ldr	r2, [pc, #232]	; (80057b8 <USB_HC_StartXfer+0x288>)
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	e005      	b.n	80056e0 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80056d4:	4b38      	ldr	r3, [pc, #224]	; (80057b8 <USB_HC_StartXfer+0x288>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056dc:	4a36      	ldr	r2, [pc, #216]	; (80057b8 <USB_HC_StartXfer+0x288>)
 80056de:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80056e0:	4b35      	ldr	r3, [pc, #212]	; (80057b8 <USB_HC_StartXfer+0x288>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056e8:	4a33      	ldr	r2, [pc, #204]	; (80057b8 <USB_HC_StartXfer+0x288>)
 80056ea:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	6a3b      	ldr	r3, [r7, #32]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f8:	461a      	mov	r2, r3
 80056fa:	4b2f      	ldr	r3, [pc, #188]	; (80057b8 <USB_HC_StartXfer+0x288>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005700:	79fb      	ldrb	r3, [r7, #7]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005706:	2300      	movs	r3, #0
 8005708:	e04f      	b.n	80057aa <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	78db      	ldrb	r3, [r3, #3]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d14a      	bne.n	80057a8 <USB_HC_StartXfer+0x278>
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d046      	beq.n	80057a8 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	79db      	ldrb	r3, [r3, #7]
 800571e:	2b03      	cmp	r3, #3
 8005720:	d830      	bhi.n	8005784 <USB_HC_StartXfer+0x254>
 8005722:	a201      	add	r2, pc, #4	; (adr r2, 8005728 <USB_HC_StartXfer+0x1f8>)
 8005724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005728:	08005739 	.word	0x08005739
 800572c:	0800575d 	.word	0x0800575d
 8005730:	08005739 	.word	0x08005739
 8005734:	0800575d 	.word	0x0800575d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	3303      	adds	r3, #3
 800573e:	089b      	lsrs	r3, r3, #2
 8005740:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005742:	8afa      	ldrh	r2, [r7, #22]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005748:	b29b      	uxth	r3, r3
 800574a:	429a      	cmp	r2, r3
 800574c:	d91c      	bls.n	8005788 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	f043 0220 	orr.w	r2, r3, #32
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	619a      	str	r2, [r3, #24]
        }
        break;
 800575a:	e015      	b.n	8005788 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	3303      	adds	r3, #3
 8005762:	089b      	lsrs	r3, r3, #2
 8005764:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005766:	8afa      	ldrh	r2, [r7, #22]
 8005768:	6a3b      	ldr	r3, [r7, #32]
 800576a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	b29b      	uxth	r3, r3
 8005772:	429a      	cmp	r2, r3
 8005774:	d90a      	bls.n	800578c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	619a      	str	r2, [r3, #24]
        }
        break;
 8005782:	e003      	b.n	800578c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005784:	bf00      	nop
 8005786:	e002      	b.n	800578e <USB_HC_StartXfer+0x25e>
        break;
 8005788:	bf00      	nop
 800578a:	e000      	b.n	800578e <USB_HC_StartXfer+0x25e>
        break;
 800578c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	68d9      	ldr	r1, [r3, #12]
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	785a      	ldrb	r2, [r3, #1]
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	b298      	uxth	r0, r3
 800579c:	2300      	movs	r3, #0
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	4603      	mov	r3, r0
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f7ff fb84 	bl	8004eb0 <USB_WritePacket>
  }

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3728      	adds	r7, #40	; 0x28
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	1ff80000 	.word	0x1ff80000
 80057b8:	200000b0 	.word	0x200000b0

080057bc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	b29b      	uxth	r3, r3
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80057de:	b480      	push	{r7}
 80057e0:	b087      	sub	sp, #28
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	460b      	mov	r3, r1
 80057e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80057ee:	78fb      	ldrb	r3, [r7, #3]
 80057f0:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80057f2:	2300      	movs	r3, #0
 80057f4:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	015a      	lsls	r2, r3, #5
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	0c9b      	lsrs	r3, r3, #18
 8005806:	f003 0303 	and.w	r3, r3, #3
 800580a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d002      	beq.n	8005818 <USB_HC_Halt+0x3a>
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2b02      	cmp	r3, #2
 8005816:	d16c      	bne.n	80058f2 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	015a      	lsls	r2, r3, #5
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	4413      	add	r3, r2
 8005820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	0151      	lsls	r1, r2, #5
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	440a      	add	r2, r1
 800582e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005832:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005836:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d143      	bne.n	80058cc <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	4413      	add	r3, r2
 800584c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	0151      	lsls	r1, r2, #5
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	440a      	add	r2, r1
 800585a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800585e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005862:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	4413      	add	r3, r2
 800586c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	0151      	lsls	r1, r2, #5
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	440a      	add	r2, r1
 800587a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800587e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005882:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	4413      	add	r3, r2
 800588c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	0151      	lsls	r1, r2, #5
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	440a      	add	r2, r1
 800589a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800589e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058a2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	3301      	adds	r3, #1
 80058a8:	617b      	str	r3, [r7, #20]
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058b0:	d81d      	bhi.n	80058ee <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	015a      	lsls	r2, r3, #5
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	4413      	add	r3, r2
 80058ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058c8:	d0ec      	beq.n	80058a4 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80058ca:	e080      	b.n	80059ce <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	0151      	lsls	r1, r2, #5
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	440a      	add	r2, r1
 80058e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058ea:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80058ec:	e06f      	b.n	80059ce <USB_HC_Halt+0x1f0>
          break;
 80058ee:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80058f0:	e06d      	b.n	80059ce <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	0151      	lsls	r1, r2, #5
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	440a      	add	r2, r1
 8005908:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800590c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005910:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d143      	bne.n	80059aa <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	015a      	lsls	r2, r3, #5
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	4413      	add	r3, r2
 800592a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	0151      	lsls	r1, r2, #5
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	440a      	add	r2, r1
 8005938:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800593c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005940:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	015a      	lsls	r2, r3, #5
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	4413      	add	r3, r2
 800594a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	0151      	lsls	r1, r2, #5
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	440a      	add	r2, r1
 8005958:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800595c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005960:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	4413      	add	r3, r2
 800596a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	0151      	lsls	r1, r2, #5
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	440a      	add	r2, r1
 8005978:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800597c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005980:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	3301      	adds	r3, #1
 8005986:	617b      	str	r3, [r7, #20]
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800598e:	d81d      	bhi.n	80059cc <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	4413      	add	r3, r2
 8005998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059a6:	d0ec      	beq.n	8005982 <USB_HC_Halt+0x1a4>
 80059a8:	e011      	b.n	80059ce <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	015a      	lsls	r2, r3, #5
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	4413      	add	r3, r2
 80059b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	0151      	lsls	r1, r2, #5
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	440a      	add	r2, r1
 80059c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059c8:	6013      	str	r3, [r2, #0]
 80059ca:	e000      	b.n	80059ce <USB_HC_Halt+0x1f0>
          break;
 80059cc:	bf00      	nop
    }
  }

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	371c      	adds	r7, #28
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80059dc:	b480      	push	{r7}
 80059de:	b087      	sub	sp, #28
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	460b      	mov	r3, r1
 80059e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80059ec:	78fb      	ldrb	r3, [r7, #3]
 80059ee:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80059f0:	2301      	movs	r3, #1
 80059f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	04da      	lsls	r2, r3, #19
 80059f8:	4b15      	ldr	r3, [pc, #84]	; (8005a50 <USB_DoPing+0x74>)
 80059fa:	4013      	ands	r3, r2
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	0151      	lsls	r1, r2, #5
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	440a      	add	r2, r1
 8005a04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a0c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	015a      	lsls	r2, r3, #5
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a24:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a2c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	371c      	adds	r7, #28
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	1ff80000 	.word	0x1ff80000

08005a54 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005a60:	2300      	movs	r3, #0
 8005a62:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f7ff f99f 	bl	8004da8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005a6a:	2110      	movs	r1, #16
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7ff f9d7 	bl	8004e20 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7ff f9fa 	bl	8004e6c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005a78:	2300      	movs	r3, #0
 8005a7a:	613b      	str	r3, [r7, #16]
 8005a7c:	e01f      	b.n	8005abe <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	015a      	lsls	r2, r3, #5
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a94:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a9c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005aa4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	015a      	lsls	r2, r3, #5
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	3301      	adds	r3, #1
 8005abc:	613b      	str	r3, [r7, #16]
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	2b0f      	cmp	r3, #15
 8005ac2:	d9dc      	bls.n	8005a7e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	613b      	str	r3, [r7, #16]
 8005ac8:	e034      	b.n	8005b34 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ae0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ae8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005af0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	015a      	lsls	r2, r3, #5
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005afe:	461a      	mov	r2, r3
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	3301      	adds	r3, #1
 8005b08:	617b      	str	r3, [r7, #20]
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b10:	d80c      	bhi.n	8005b2c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b28:	d0ec      	beq.n	8005b04 <USB_StopHost+0xb0>
 8005b2a:	e000      	b.n	8005b2e <USB_StopHost+0xda>
        break;
 8005b2c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	3301      	adds	r3, #1
 8005b32:	613b      	str	r3, [r7, #16]
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	2b0f      	cmp	r3, #15
 8005b38:	d9c7      	bls.n	8005aca <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b40:	461a      	mov	r2, r3
 8005b42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b46:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b4e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f7ff f918 	bl	8004d86 <USB_EnableGlobalInt>

  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3718      	adds	r7, #24
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005b60:	b590      	push	{r4, r7, lr}
 8005b62:	b089      	sub	sp, #36	; 0x24
 8005b64:	af04      	add	r7, sp, #16
 8005b66:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005b68:	2301      	movs	r3, #1
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	2102      	movs	r1, #2
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 fc68 	bl	8006444 <USBH_FindInterface>
 8005b74:	4603      	mov	r3, r0
 8005b76:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005b78:	7bfb      	ldrb	r3, [r7, #15]
 8005b7a:	2bff      	cmp	r3, #255	; 0xff
 8005b7c:	d002      	beq.n	8005b84 <USBH_CDC_InterfaceInit+0x24>
 8005b7e:	7bfb      	ldrb	r3, [r7, #15]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d901      	bls.n	8005b88 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005b84:	2302      	movs	r3, #2
 8005b86:	e13d      	b.n	8005e04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005b88:	7bfb      	ldrb	r3, [r7, #15]
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 fc3d 	bl	800640c <USBH_SelectInterface>
 8005b92:	4603      	mov	r3, r0
 8005b94:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005b96:	7bbb      	ldrb	r3, [r7, #14]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	e131      	b.n	8005e04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005ba6:	2050      	movs	r0, #80	; 0x50
 8005ba8:	f002 fa04 	bl	8007fb4 <malloc>
 8005bac:	4603      	mov	r3, r0
 8005bae:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005bb6:	69db      	ldr	r3, [r3, #28]
 8005bb8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	e11f      	b.n	8005e04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005bc4:	2250      	movs	r2, #80	; 0x50
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	68b8      	ldr	r0, [r7, #8]
 8005bca:	f002 fa03 	bl	8007fd4 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005bce:	7bfb      	ldrb	r3, [r7, #15]
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	211a      	movs	r1, #26
 8005bd4:	fb01 f303 	mul.w	r3, r1, r3
 8005bd8:	4413      	add	r3, r2
 8005bda:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	b25b      	sxtb	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	da15      	bge.n	8005c12 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005be6:	7bfb      	ldrb	r3, [r7, #15]
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	211a      	movs	r1, #26
 8005bec:	fb01 f303 	mul.w	r3, r1, r3
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005bf6:	781a      	ldrb	r2, [r3, #0]
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005bfc:	7bfb      	ldrb	r3, [r7, #15]
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	211a      	movs	r1, #26
 8005c02:	fb01 f303 	mul.w	r3, r1, r3
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005c0c:	881a      	ldrh	r2, [r3, #0]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	785b      	ldrb	r3, [r3, #1]
 8005c16:	4619      	mov	r1, r3
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f001 fe36 	bl	800788a <USBH_AllocPipe>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	461a      	mov	r2, r3
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	7819      	ldrb	r1, [r3, #0]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	7858      	ldrb	r0, [r3, #1]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	8952      	ldrh	r2, [r2, #10]
 8005c3e:	9202      	str	r2, [sp, #8]
 8005c40:	2203      	movs	r2, #3
 8005c42:	9201      	str	r2, [sp, #4]
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	4623      	mov	r3, r4
 8005c48:	4602      	mov	r2, r0
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f001 fdee 	bl	800782c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	2200      	movs	r2, #0
 8005c56:	4619      	mov	r1, r3
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f002 f8fb 	bl	8007e54 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005c5e:	2300      	movs	r3, #0
 8005c60:	2200      	movs	r2, #0
 8005c62:	210a      	movs	r1, #10
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 fbed 	bl	8006444 <USBH_FindInterface>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005c6e:	7bfb      	ldrb	r3, [r7, #15]
 8005c70:	2bff      	cmp	r3, #255	; 0xff
 8005c72:	d002      	beq.n	8005c7a <USBH_CDC_InterfaceInit+0x11a>
 8005c74:	7bfb      	ldrb	r3, [r7, #15]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d901      	bls.n	8005c7e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	e0c2      	b.n	8005e04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005c7e:	7bfb      	ldrb	r3, [r7, #15]
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	211a      	movs	r1, #26
 8005c84:	fb01 f303 	mul.w	r3, r1, r3
 8005c88:	4413      	add	r3, r2
 8005c8a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	b25b      	sxtb	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	da16      	bge.n	8005cc4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005c96:	7bfb      	ldrb	r3, [r7, #15]
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	211a      	movs	r1, #26
 8005c9c:	fb01 f303 	mul.w	r3, r1, r3
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ca6:	781a      	ldrb	r2, [r3, #0]
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	211a      	movs	r1, #26
 8005cb2:	fb01 f303 	mul.w	r3, r1, r3
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005cbc:	881a      	ldrh	r2, [r3, #0]
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	835a      	strh	r2, [r3, #26]
 8005cc2:	e015      	b.n	8005cf0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005cc4:	7bfb      	ldrb	r3, [r7, #15]
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	211a      	movs	r1, #26
 8005cca:	fb01 f303 	mul.w	r3, r1, r3
 8005cce:	4413      	add	r3, r2
 8005cd0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005cd4:	781a      	ldrb	r2, [r3, #0]
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005cda:	7bfb      	ldrb	r3, [r7, #15]
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	211a      	movs	r1, #26
 8005ce0:	fb01 f303 	mul.w	r3, r1, r3
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005cea:	881a      	ldrh	r2, [r3, #0]
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005cf0:	7bfb      	ldrb	r3, [r7, #15]
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	211a      	movs	r1, #26
 8005cf6:	fb01 f303 	mul.w	r3, r1, r3
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	b25b      	sxtb	r3, r3
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	da16      	bge.n	8005d36 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005d08:	7bfb      	ldrb	r3, [r7, #15]
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	211a      	movs	r1, #26
 8005d0e:	fb01 f303 	mul.w	r3, r1, r3
 8005d12:	4413      	add	r3, r2
 8005d14:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005d18:	781a      	ldrb	r2, [r3, #0]
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	211a      	movs	r1, #26
 8005d24:	fb01 f303 	mul.w	r3, r1, r3
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005d2e:	881a      	ldrh	r2, [r3, #0]
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	835a      	strh	r2, [r3, #26]
 8005d34:	e015      	b.n	8005d62 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005d36:	7bfb      	ldrb	r3, [r7, #15]
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	211a      	movs	r1, #26
 8005d3c:	fb01 f303 	mul.w	r3, r1, r3
 8005d40:	4413      	add	r3, r2
 8005d42:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005d46:	781a      	ldrb	r2, [r3, #0]
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005d4c:	7bfb      	ldrb	r3, [r7, #15]
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	211a      	movs	r1, #26
 8005d52:	fb01 f303 	mul.w	r3, r1, r3
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005d5c:	881a      	ldrh	r2, [r3, #0]
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	7b9b      	ldrb	r3, [r3, #14]
 8005d66:	4619      	mov	r1, r3
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f001 fd8e 	bl	800788a <USBH_AllocPipe>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	461a      	mov	r2, r3
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	7bdb      	ldrb	r3, [r3, #15]
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f001 fd84 	bl	800788a <USBH_AllocPipe>
 8005d82:	4603      	mov	r3, r0
 8005d84:	461a      	mov	r2, r3
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	7b59      	ldrb	r1, [r3, #13]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	7b98      	ldrb	r0, [r3, #14]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	8b12      	ldrh	r2, [r2, #24]
 8005da2:	9202      	str	r2, [sp, #8]
 8005da4:	2202      	movs	r2, #2
 8005da6:	9201      	str	r2, [sp, #4]
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	4623      	mov	r3, r4
 8005dac:	4602      	mov	r2, r0
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f001 fd3c 	bl	800782c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	7b19      	ldrb	r1, [r3, #12]
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	7bd8      	ldrb	r0, [r3, #15]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	8b52      	ldrh	r2, [r2, #26]
 8005dcc:	9202      	str	r2, [sp, #8]
 8005dce:	2202      	movs	r2, #2
 8005dd0:	9201      	str	r2, [sp, #4]
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	4623      	mov	r3, r4
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f001 fd27 	bl	800782c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	7b5b      	ldrb	r3, [r3, #13]
 8005dea:	2200      	movs	r2, #0
 8005dec:	4619      	mov	r1, r3
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f002 f830 	bl	8007e54 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	7b1b      	ldrb	r3, [r3, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f002 f829 	bl	8007e54 <USBH_LL_SetToggle>

  return USBH_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3714      	adds	r7, #20
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd90      	pop	{r4, r7, pc}

08005e0c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00e      	beq.n	8005e44 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f001 fd1c 	bl	800786a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	4619      	mov	r1, r3
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f001 fd47 	bl	80078cc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	7b1b      	ldrb	r3, [r3, #12]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00e      	beq.n	8005e6a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	7b1b      	ldrb	r3, [r3, #12]
 8005e50:	4619      	mov	r1, r3
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f001 fd09 	bl	800786a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	7b1b      	ldrb	r3, [r3, #12]
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f001 fd34 	bl	80078cc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	7b5b      	ldrb	r3, [r3, #13]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00e      	beq.n	8005e90 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	7b5b      	ldrb	r3, [r3, #13]
 8005e76:	4619      	mov	r1, r3
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f001 fcf6 	bl	800786a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	7b5b      	ldrb	r3, [r3, #13]
 8005e82:	4619      	mov	r1, r3
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f001 fd21 	bl	80078cc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e96:	69db      	ldr	r3, [r3, #28]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00b      	beq.n	8005eb4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ea2:	69db      	ldr	r3, [r3, #28]
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f002 f88d 	bl	8007fc4 <free>
    phost->pActiveClass->pData = 0U;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b084      	sub	sp, #16
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	3340      	adds	r3, #64	; 0x40
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f8b1 	bl	800603e <GetLineCoding>
 8005edc:	4603      	mov	r3, r0
 8005ede:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005ee0:	7afb      	ldrb	r3, [r7, #11]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d105      	bne.n	8005ef2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005eec:	2102      	movs	r1, #2
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005ef2:	7afb      	ldrb	r3, [r7, #11]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005f04:	2301      	movs	r3, #1
 8005f06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f12:	69db      	ldr	r3, [r3, #28]
 8005f14:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005f1c:	2b04      	cmp	r3, #4
 8005f1e:	d877      	bhi.n	8006010 <USBH_CDC_Process+0x114>
 8005f20:	a201      	add	r2, pc, #4	; (adr r2, 8005f28 <USBH_CDC_Process+0x2c>)
 8005f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f26:	bf00      	nop
 8005f28:	08005f3d 	.word	0x08005f3d
 8005f2c:	08005f43 	.word	0x08005f43
 8005f30:	08005f73 	.word	0x08005f73
 8005f34:	08005fe7 	.word	0x08005fe7
 8005f38:	08005ff5 	.word	0x08005ff5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f40:	e06d      	b.n	800601e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f46:	4619      	mov	r1, r3
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 f897 	bl	800607c <SetLineCoding>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005f52:	7bbb      	ldrb	r3, [r7, #14]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d104      	bne.n	8005f62 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005f60:	e058      	b.n	8006014 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005f62:	7bbb      	ldrb	r3, [r7, #14]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d055      	beq.n	8006014 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2204      	movs	r2, #4
 8005f6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005f70:	e050      	b.n	8006014 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	3340      	adds	r3, #64	; 0x40
 8005f76:	4619      	mov	r1, r3
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 f860 	bl	800603e <GetLineCoding>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005f82:	7bbb      	ldrb	r3, [r7, #14]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d126      	bne.n	8005fd6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f9a:	791b      	ldrb	r3, [r3, #4]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d13b      	bne.n	8006018 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005faa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d133      	bne.n	8006018 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fba:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d12b      	bne.n	8006018 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fc8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d124      	bne.n	8006018 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f95a 	bl	8006288 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005fd4:	e020      	b.n	8006018 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005fd6:	7bbb      	ldrb	r3, [r7, #14]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d01d      	beq.n	8006018 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	2204      	movs	r2, #4
 8005fe0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005fe4:	e018      	b.n	8006018 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f867 	bl	80060ba <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 f8dc 	bl	80061aa <CDC_ProcessReception>
      break;
 8005ff2:	e014      	b.n	800601e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 ffe5 	bl	8006fc6 <USBH_ClrFeature>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006000:	7bbb      	ldrb	r3, [r7, #14]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10a      	bne.n	800601c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800600e:	e005      	b.n	800601c <USBH_CDC_Process+0x120>

    default:
      break;
 8006010:	bf00      	nop
 8006012:	e004      	b.n	800601e <USBH_CDC_Process+0x122>
      break;
 8006014:	bf00      	nop
 8006016:	e002      	b.n	800601e <USBH_CDC_Process+0x122>
      break;
 8006018:	bf00      	nop
 800601a:	e000      	b.n	800601e <USBH_CDC_Process+0x122>
      break;
 800601c:	bf00      	nop

  }

  return status;
 800601e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	370c      	adds	r7, #12
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b082      	sub	sp, #8
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
 8006046:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	22a1      	movs	r2, #161	; 0xa1
 800604c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2221      	movs	r2, #33	; 0x21
 8006052:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2207      	movs	r2, #7
 8006064:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2207      	movs	r2, #7
 800606a:	4619      	mov	r1, r3
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f001 f98a 	bl	8007386 <USBH_CtlReq>
 8006072:	4603      	mov	r3, r0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3708      	adds	r7, #8
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2221      	movs	r2, #33	; 0x21
 800608a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2220      	movs	r2, #32
 8006090:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2207      	movs	r2, #7
 80060a2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	2207      	movs	r2, #7
 80060a8:	4619      	mov	r1, r3
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f001 f96b 	bl	8007386 <USBH_CtlReq>
 80060b0:	4603      	mov	r3, r0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3708      	adds	r7, #8
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b086      	sub	sp, #24
 80060be:	af02      	add	r7, sp, #8
 80060c0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060c8:	69db      	ldr	r3, [r3, #28]
 80060ca:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80060cc:	2300      	movs	r3, #0
 80060ce:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d002      	beq.n	80060e0 <CDC_ProcessTransmission+0x26>
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d025      	beq.n	800612a <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 80060de:	e060      	b.n	80061a2 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	8b12      	ldrh	r2, [r2, #24]
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d90c      	bls.n	8006106 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	69d9      	ldr	r1, [r3, #28]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	8b1a      	ldrh	r2, [r3, #24]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	7b58      	ldrb	r0, [r3, #13]
 80060f8:	2301      	movs	r3, #1
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	4603      	mov	r3, r0
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f001 fb51 	bl	80077a6 <USBH_BulkSendData>
 8006104:	e00c      	b.n	8006120 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800610e:	b29a      	uxth	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	7b58      	ldrb	r0, [r3, #13]
 8006114:	2301      	movs	r3, #1
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	4603      	mov	r3, r0
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f001 fb43 	bl	80077a6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2202      	movs	r2, #2
 8006124:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006128:	e03b      	b.n	80061a2 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	7b5b      	ldrb	r3, [r3, #13]
 800612e:	4619      	mov	r1, r3
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f001 fe65 	bl	8007e00 <USBH_LL_GetURBState>
 8006136:	4603      	mov	r3, r0
 8006138:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800613a:	7afb      	ldrb	r3, [r7, #11]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d128      	bne.n	8006192 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	8b12      	ldrh	r2, [r2, #24]
 8006148:	4293      	cmp	r3, r2
 800614a:	d90e      	bls.n	800616a <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	8b12      	ldrh	r2, [r2, #24]
 8006154:	1a9a      	subs	r2, r3, r2
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	8b12      	ldrh	r2, [r2, #24]
 8006162:	441a      	add	r2, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	61da      	str	r2, [r3, #28]
 8006168:	e002      	b.n	8006170 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006174:	2b00      	cmp	r3, #0
 8006176:	d004      	beq.n	8006182 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006180:	e00e      	b.n	80061a0 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 f868 	bl	8006260 <USBH_CDC_TransmitCallback>
      break;
 8006190:	e006      	b.n	80061a0 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8006192:	7afb      	ldrb	r3, [r7, #11]
 8006194:	2b02      	cmp	r3, #2
 8006196:	d103      	bne.n	80061a0 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80061a0:	bf00      	nop
  }
}
 80061a2:	bf00      	nop
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b086      	sub	sp, #24
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80061bc:	2300      	movs	r3, #0
 80061be:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80061c6:	2b03      	cmp	r3, #3
 80061c8:	d002      	beq.n	80061d0 <CDC_ProcessReception+0x26>
 80061ca:	2b04      	cmp	r3, #4
 80061cc:	d00e      	beq.n	80061ec <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80061ce:	e043      	b.n	8006258 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	6a19      	ldr	r1, [r3, #32]
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	8b5a      	ldrh	r2, [r3, #26]
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	7b1b      	ldrb	r3, [r3, #12]
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f001 fb07 	bl	80077f0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	2204      	movs	r2, #4
 80061e6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80061ea:	e035      	b.n	8006258 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	7b1b      	ldrb	r3, [r3, #12]
 80061f0:	4619      	mov	r1, r3
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f001 fe04 	bl	8007e00 <USBH_LL_GetURBState>
 80061f8:	4603      	mov	r3, r0
 80061fa:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80061fc:	7cfb      	ldrb	r3, [r7, #19]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d129      	bne.n	8006256 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	7b1b      	ldrb	r3, [r3, #12]
 8006206:	4619      	mov	r1, r3
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f001 fd67 	bl	8007cdc <USBH_LL_GetLastXferSize>
 800620e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	429a      	cmp	r2, r3
 8006218:	d016      	beq.n	8006248 <CDC_ProcessReception+0x9e>
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	8b5b      	ldrh	r3, [r3, #26]
 800621e:	461a      	mov	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	4293      	cmp	r3, r2
 8006224:	d910      	bls.n	8006248 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	1ad2      	subs	r2, r2, r3
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	6a1a      	ldr	r2, [r3, #32]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	441a      	add	r2, r3
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	2203      	movs	r2, #3
 8006242:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006246:	e006      	b.n	8006256 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f80f 	bl	8006274 <USBH_CDC_ReceiveCallback>
      break;
 8006256:	bf00      	nop
  }
}
 8006258:	bf00      	nop
 800625a:	3718      	adds	r7, #24
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	4613      	mov	r3, r2
 80062a8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d101      	bne.n	80062b4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80062b0:	2302      	movs	r3, #2
 80062b2:	e029      	b.n	8006308 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	79fa      	ldrb	r2, [r7, #7]
 80062b8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f000 f81f 	bl	8006310 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d003      	beq.n	8006300 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f001 fc39 	bl	8007b78 <USBH_LL_Init>

  return USBH_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006318:	2300      	movs	r3, #0
 800631a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800631c:	2300      	movs	r3, #0
 800631e:	60fb      	str	r3, [r7, #12]
 8006320:	e009      	b.n	8006336 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	33e0      	adds	r3, #224	; 0xe0
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	2200      	movs	r2, #0
 800632e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	3301      	adds	r3, #1
 8006334:	60fb      	str	r3, [r7, #12]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2b0e      	cmp	r3, #14
 800633a:	d9f2      	bls.n	8006322 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800633c:	2300      	movs	r3, #0
 800633e:	60fb      	str	r3, [r7, #12]
 8006340:	e009      	b.n	8006356 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4413      	add	r3, r2
 8006348:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800634c:	2200      	movs	r2, #0
 800634e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	3301      	adds	r3, #1
 8006354:	60fb      	str	r3, [r7, #12]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800635c:	d3f1      	bcc.n	8006342 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2240      	movs	r2, #64	; 0x40
 8006382:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3714      	adds	r7, #20
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80063c2:	2300      	movs	r3, #0
 80063c4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d016      	beq.n	80063fa <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10e      	bne.n	80063f4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80063dc:	1c59      	adds	r1, r3, #1
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	33de      	adds	r3, #222	; 0xde
 80063e8:	6839      	ldr	r1, [r7, #0]
 80063ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80063ee:	2300      	movs	r3, #0
 80063f0:	73fb      	strb	r3, [r7, #15]
 80063f2:	e004      	b.n	80063fe <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80063f4:	2302      	movs	r3, #2
 80063f6:	73fb      	strb	r3, [r7, #15]
 80063f8:	e001      	b.n	80063fe <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80063fa:	2302      	movs	r3, #2
 80063fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80063fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006400:	4618      	mov	r0, r3
 8006402:	3714      	adds	r7, #20
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	460b      	mov	r3, r1
 8006416:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006418:	2300      	movs	r3, #0
 800641a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006422:	78fa      	ldrb	r2, [r7, #3]
 8006424:	429a      	cmp	r2, r3
 8006426:	d204      	bcs.n	8006432 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	78fa      	ldrb	r2, [r7, #3]
 800642c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006430:	e001      	b.n	8006436 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006432:	2302      	movs	r3, #2
 8006434:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006436:	7bfb      	ldrb	r3, [r7, #15]
}
 8006438:	4618      	mov	r0, r3
 800643a:	3714      	adds	r7, #20
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006444:	b480      	push	{r7}
 8006446:	b087      	sub	sp, #28
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	4608      	mov	r0, r1
 800644e:	4611      	mov	r1, r2
 8006450:	461a      	mov	r2, r3
 8006452:	4603      	mov	r3, r0
 8006454:	70fb      	strb	r3, [r7, #3]
 8006456:	460b      	mov	r3, r1
 8006458:	70bb      	strb	r3, [r7, #2]
 800645a:	4613      	mov	r3, r2
 800645c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800645e:	2300      	movs	r3, #0
 8006460:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006462:	2300      	movs	r3, #0
 8006464:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800646c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800646e:	e025      	b.n	80064bc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006470:	7dfb      	ldrb	r3, [r7, #23]
 8006472:	221a      	movs	r2, #26
 8006474:	fb02 f303 	mul.w	r3, r2, r3
 8006478:	3308      	adds	r3, #8
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	4413      	add	r3, r2
 800647e:	3302      	adds	r3, #2
 8006480:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	795b      	ldrb	r3, [r3, #5]
 8006486:	78fa      	ldrb	r2, [r7, #3]
 8006488:	429a      	cmp	r2, r3
 800648a:	d002      	beq.n	8006492 <USBH_FindInterface+0x4e>
 800648c:	78fb      	ldrb	r3, [r7, #3]
 800648e:	2bff      	cmp	r3, #255	; 0xff
 8006490:	d111      	bne.n	80064b6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006496:	78ba      	ldrb	r2, [r7, #2]
 8006498:	429a      	cmp	r2, r3
 800649a:	d002      	beq.n	80064a2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800649c:	78bb      	ldrb	r3, [r7, #2]
 800649e:	2bff      	cmp	r3, #255	; 0xff
 80064a0:	d109      	bne.n	80064b6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80064a6:	787a      	ldrb	r2, [r7, #1]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d002      	beq.n	80064b2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80064ac:	787b      	ldrb	r3, [r7, #1]
 80064ae:	2bff      	cmp	r3, #255	; 0xff
 80064b0:	d101      	bne.n	80064b6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80064b2:	7dfb      	ldrb	r3, [r7, #23]
 80064b4:	e006      	b.n	80064c4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80064b6:	7dfb      	ldrb	r3, [r7, #23]
 80064b8:	3301      	adds	r3, #1
 80064ba:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80064bc:	7dfb      	ldrb	r3, [r7, #23]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d9d6      	bls.n	8006470 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80064c2:	23ff      	movs	r3, #255	; 0xff
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	371c      	adds	r7, #28
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f001 fb89 	bl	8007bf0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80064de:	2101      	movs	r1, #1
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f001 fca0 	bl	8007e26 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3708      	adds	r7, #8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b088      	sub	sp, #32
 80064f4:	af04      	add	r7, sp, #16
 80064f6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80064f8:	2302      	movs	r3, #2
 80064fa:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80064fc:	2300      	movs	r3, #0
 80064fe:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006506:	b2db      	uxtb	r3, r3
 8006508:	2b01      	cmp	r3, #1
 800650a:	d102      	bne.n	8006512 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2203      	movs	r2, #3
 8006510:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b0b      	cmp	r3, #11
 800651a:	f200 81b3 	bhi.w	8006884 <USBH_Process+0x394>
 800651e:	a201      	add	r2, pc, #4	; (adr r2, 8006524 <USBH_Process+0x34>)
 8006520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006524:	08006555 	.word	0x08006555
 8006528:	08006587 	.word	0x08006587
 800652c:	080065ef 	.word	0x080065ef
 8006530:	0800681f 	.word	0x0800681f
 8006534:	08006885 	.word	0x08006885
 8006538:	08006693 	.word	0x08006693
 800653c:	080067c5 	.word	0x080067c5
 8006540:	080066c9 	.word	0x080066c9
 8006544:	080066e9 	.word	0x080066e9
 8006548:	08006709 	.word	0x08006709
 800654c:	08006737 	.word	0x08006737
 8006550:	08006807 	.word	0x08006807
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 8193 	beq.w	8006888 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2201      	movs	r2, #1
 8006566:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006568:	20c8      	movs	r0, #200	; 0xc8
 800656a:	f001 fca6 	bl	8007eba <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f001 fb99 	bl	8007ca6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006584:	e180      	b.n	8006888 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800658c:	2b01      	cmp	r3, #1
 800658e:	d107      	bne.n	80065a0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2202      	movs	r2, #2
 800659c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800659e:	e182      	b.n	80068a6 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80065a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065aa:	d914      	bls.n	80065d6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80065b2:	3301      	adds	r3, #1
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80065c2:	2b03      	cmp	r3, #3
 80065c4:	d903      	bls.n	80065ce <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	220d      	movs	r2, #13
 80065ca:	701a      	strb	r2, [r3, #0]
      break;
 80065cc:	e16b      	b.n	80068a6 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	701a      	strb	r2, [r3, #0]
      break;
 80065d4:	e167      	b.n	80068a6 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80065dc:	f103 020a 	add.w	r2, r3, #10
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80065e6:	200a      	movs	r0, #10
 80065e8:	f001 fc67 	bl	8007eba <USBH_Delay>
      break;
 80065ec:	e15b      	b.n	80068a6 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d005      	beq.n	8006604 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80065fe:	2104      	movs	r1, #4
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006604:	2064      	movs	r0, #100	; 0x64
 8006606:	f001 fc58 	bl	8007eba <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f001 fb26 	bl	8007c5c <USBH_LL_GetSpeed>
 8006610:	4603      	mov	r3, r0
 8006612:	461a      	mov	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2205      	movs	r2, #5
 800661e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006620:	2100      	movs	r1, #0
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f001 f931 	bl	800788a <USBH_AllocPipe>
 8006628:	4603      	mov	r3, r0
 800662a:	461a      	mov	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006630:	2180      	movs	r1, #128	; 0x80
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f001 f929 	bl	800788a <USBH_AllocPipe>
 8006638:	4603      	mov	r3, r0
 800663a:	461a      	mov	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	7919      	ldrb	r1, [r3, #4]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006654:	b292      	uxth	r2, r2
 8006656:	9202      	str	r2, [sp, #8]
 8006658:	2200      	movs	r2, #0
 800665a:	9201      	str	r2, [sp, #4]
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	4603      	mov	r3, r0
 8006660:	2280      	movs	r2, #128	; 0x80
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f001 f8e2 	bl	800782c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	7959      	ldrb	r1, [r3, #5]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800667c:	b292      	uxth	r2, r2
 800667e:	9202      	str	r2, [sp, #8]
 8006680:	2200      	movs	r2, #0
 8006682:	9201      	str	r2, [sp, #4]
 8006684:	9300      	str	r3, [sp, #0]
 8006686:	4603      	mov	r3, r0
 8006688:	2200      	movs	r2, #0
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f001 f8ce 	bl	800782c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006690:	e109      	b.n	80068a6 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f90c 	bl	80068b0 <USBH_HandleEnum>
 8006698:	4603      	mov	r3, r0
 800669a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800669c:	7bbb      	ldrb	r3, [r7, #14]
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f040 80f3 	bne.w	800688c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d103      	bne.n	80066c0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2208      	movs	r2, #8
 80066bc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80066be:	e0e5      	b.n	800688c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2207      	movs	r2, #7
 80066c4:	701a      	strb	r2, [r3, #0]
      break;
 80066c6:	e0e1      	b.n	800688c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f000 80de 	beq.w	8006890 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80066da:	2101      	movs	r1, #1
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2208      	movs	r2, #8
 80066e4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80066e6:	e0d3      	b.n	8006890 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	4619      	mov	r1, r3
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 fc20 	bl	8006f38 <USBH_SetCfg>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	f040 80ca 	bne.w	8006894 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2209      	movs	r2, #9
 8006704:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006706:	e0c5      	b.n	8006894 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800670e:	f003 0320 	and.w	r3, r3, #32
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00b      	beq.n	800672e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006716:	2101      	movs	r1, #1
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fc30 	bl	8006f7e <USBH_SetFeature>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	f040 80b9 	bne.w	8006898 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	220a      	movs	r2, #10
 800672a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800672c:	e0b4      	b.n	8006898 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	220a      	movs	r2, #10
 8006732:	701a      	strb	r2, [r3, #0]
      break;
 8006734:	e0b0      	b.n	8006898 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800673c:	2b00      	cmp	r3, #0
 800673e:	f000 80ad 	beq.w	800689c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800674a:	2300      	movs	r3, #0
 800674c:	73fb      	strb	r3, [r7, #15]
 800674e:	e016      	b.n	800677e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006750:	7bfa      	ldrb	r2, [r7, #15]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	32de      	adds	r2, #222	; 0xde
 8006756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800675a:	791a      	ldrb	r2, [r3, #4]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006762:	429a      	cmp	r2, r3
 8006764:	d108      	bne.n	8006778 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006766:	7bfa      	ldrb	r2, [r7, #15]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	32de      	adds	r2, #222	; 0xde
 800676c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006776:	e005      	b.n	8006784 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006778:	7bfb      	ldrb	r3, [r7, #15]
 800677a:	3301      	adds	r3, #1
 800677c:	73fb      	strb	r3, [r7, #15]
 800677e:	7bfb      	ldrb	r3, [r7, #15]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d0e5      	beq.n	8006750 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800678a:	2b00      	cmp	r3, #0
 800678c:	d016      	beq.n	80067bc <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	4798      	blx	r3
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d109      	bne.n	80067b4 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2206      	movs	r2, #6
 80067a4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80067ac:	2103      	movs	r1, #3
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80067b2:	e073      	b.n	800689c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	220d      	movs	r2, #13
 80067b8:	701a      	strb	r2, [r3, #0]
      break;
 80067ba:	e06f      	b.n	800689c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	220d      	movs	r2, #13
 80067c0:	701a      	strb	r2, [r3, #0]
      break;
 80067c2:	e06b      	b.n	800689c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d017      	beq.n	80067fe <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	4798      	blx	r3
 80067da:	4603      	mov	r3, r0
 80067dc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80067de:	7bbb      	ldrb	r3, [r7, #14]
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d103      	bne.n	80067ee <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	220b      	movs	r2, #11
 80067ea:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80067ec:	e058      	b.n	80068a0 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80067ee:	7bbb      	ldrb	r3, [r7, #14]
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d154      	bne.n	80068a0 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	220d      	movs	r2, #13
 80067fa:	701a      	strb	r2, [r3, #0]
      break;
 80067fc:	e050      	b.n	80068a0 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	220d      	movs	r2, #13
 8006802:	701a      	strb	r2, [r3, #0]
      break;
 8006804:	e04c      	b.n	80068a0 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800680c:	2b00      	cmp	r3, #0
 800680e:	d049      	beq.n	80068a4 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006816:	695b      	ldr	r3, [r3, #20]
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	4798      	blx	r3
      }
      break;
 800681c:	e042      	b.n	80068a4 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7ff fd72 	bl	8006310 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006832:	2b00      	cmp	r3, #0
 8006834:	d009      	beq.n	800684a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006850:	2b00      	cmp	r3, #0
 8006852:	d005      	beq.n	8006860 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800685a:	2105      	movs	r1, #5
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b01      	cmp	r3, #1
 800686a:	d107      	bne.n	800687c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f7ff fe2b 	bl	80064d0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800687a:	e014      	b.n	80068a6 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f001 f9b7 	bl	8007bf0 <USBH_LL_Start>
      break;
 8006882:	e010      	b.n	80068a6 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006884:	bf00      	nop
 8006886:	e00e      	b.n	80068a6 <USBH_Process+0x3b6>
      break;
 8006888:	bf00      	nop
 800688a:	e00c      	b.n	80068a6 <USBH_Process+0x3b6>
      break;
 800688c:	bf00      	nop
 800688e:	e00a      	b.n	80068a6 <USBH_Process+0x3b6>
    break;
 8006890:	bf00      	nop
 8006892:	e008      	b.n	80068a6 <USBH_Process+0x3b6>
      break;
 8006894:	bf00      	nop
 8006896:	e006      	b.n	80068a6 <USBH_Process+0x3b6>
      break;
 8006898:	bf00      	nop
 800689a:	e004      	b.n	80068a6 <USBH_Process+0x3b6>
      break;
 800689c:	bf00      	nop
 800689e:	e002      	b.n	80068a6 <USBH_Process+0x3b6>
      break;
 80068a0:	bf00      	nop
 80068a2:	e000      	b.n	80068a6 <USBH_Process+0x3b6>
      break;
 80068a4:	bf00      	nop
  }
  return USBH_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b088      	sub	sp, #32
 80068b4:	af04      	add	r7, sp, #16
 80068b6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80068b8:	2301      	movs	r3, #1
 80068ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80068bc:	2301      	movs	r3, #1
 80068be:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	785b      	ldrb	r3, [r3, #1]
 80068c4:	2b07      	cmp	r3, #7
 80068c6:	f200 81c1 	bhi.w	8006c4c <USBH_HandleEnum+0x39c>
 80068ca:	a201      	add	r2, pc, #4	; (adr r2, 80068d0 <USBH_HandleEnum+0x20>)
 80068cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d0:	080068f1 	.word	0x080068f1
 80068d4:	080069af 	.word	0x080069af
 80068d8:	08006a19 	.word	0x08006a19
 80068dc:	08006aa7 	.word	0x08006aa7
 80068e0:	08006b11 	.word	0x08006b11
 80068e4:	08006b81 	.word	0x08006b81
 80068e8:	08006bc7 	.word	0x08006bc7
 80068ec:	08006c0d 	.word	0x08006c0d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80068f0:	2108      	movs	r1, #8
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 fa50 	bl	8006d98 <USBH_Get_DevDesc>
 80068f8:	4603      	mov	r3, r0
 80068fa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80068fc:	7bbb      	ldrb	r3, [r7, #14]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d130      	bne.n	8006964 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	7919      	ldrb	r1, [r3, #4]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006926:	b292      	uxth	r2, r2
 8006928:	9202      	str	r2, [sp, #8]
 800692a:	2200      	movs	r2, #0
 800692c:	9201      	str	r2, [sp, #4]
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	4603      	mov	r3, r0
 8006932:	2280      	movs	r2, #128	; 0x80
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 ff79 	bl	800782c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	7959      	ldrb	r1, [r3, #5]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800694e:	b292      	uxth	r2, r2
 8006950:	9202      	str	r2, [sp, #8]
 8006952:	2200      	movs	r2, #0
 8006954:	9201      	str	r2, [sp, #4]
 8006956:	9300      	str	r3, [sp, #0]
 8006958:	4603      	mov	r3, r0
 800695a:	2200      	movs	r2, #0
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 ff65 	bl	800782c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006962:	e175      	b.n	8006c50 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006964:	7bbb      	ldrb	r3, [r7, #14]
 8006966:	2b03      	cmp	r3, #3
 8006968:	f040 8172 	bne.w	8006c50 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006972:	3301      	adds	r3, #1
 8006974:	b2da      	uxtb	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006982:	2b03      	cmp	r3, #3
 8006984:	d903      	bls.n	800698e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	220d      	movs	r2, #13
 800698a:	701a      	strb	r2, [r3, #0]
      break;
 800698c:	e160      	b.n	8006c50 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	795b      	ldrb	r3, [r3, #5]
 8006992:	4619      	mov	r1, r3
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 ff99 	bl	80078cc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	791b      	ldrb	r3, [r3, #4]
 800699e:	4619      	mov	r1, r3
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 ff93 	bl	80078cc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	701a      	strb	r2, [r3, #0]
      break;
 80069ac:	e150      	b.n	8006c50 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80069ae:	2112      	movs	r1, #18
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 f9f1 	bl	8006d98 <USBH_Get_DevDesc>
 80069b6:	4603      	mov	r3, r0
 80069b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80069ba:	7bbb      	ldrb	r3, [r7, #14]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d103      	bne.n	80069c8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2202      	movs	r2, #2
 80069c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80069c6:	e145      	b.n	8006c54 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80069c8:	7bbb      	ldrb	r3, [r7, #14]
 80069ca:	2b03      	cmp	r3, #3
 80069cc:	f040 8142 	bne.w	8006c54 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80069d6:	3301      	adds	r3, #1
 80069d8:	b2da      	uxtb	r2, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80069e6:	2b03      	cmp	r3, #3
 80069e8:	d903      	bls.n	80069f2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	220d      	movs	r2, #13
 80069ee:	701a      	strb	r2, [r3, #0]
      break;
 80069f0:	e130      	b.n	8006c54 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	795b      	ldrb	r3, [r3, #5]
 80069f6:	4619      	mov	r1, r3
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 ff67 	bl	80078cc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	791b      	ldrb	r3, [r3, #4]
 8006a02:	4619      	mov	r1, r3
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 ff61 	bl	80078cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	701a      	strb	r2, [r3, #0]
      break;
 8006a16:	e11d      	b.n	8006c54 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006a18:	2101      	movs	r1, #1
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fa68 	bl	8006ef0 <USBH_SetAddress>
 8006a20:	4603      	mov	r3, r0
 8006a22:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006a24:	7bbb      	ldrb	r3, [r7, #14]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d132      	bne.n	8006a90 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006a2a:	2002      	movs	r0, #2
 8006a2c:	f001 fa45 	bl	8007eba <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2203      	movs	r2, #3
 8006a3c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	7919      	ldrb	r1, [r3, #4]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006a52:	b292      	uxth	r2, r2
 8006a54:	9202      	str	r2, [sp, #8]
 8006a56:	2200      	movs	r2, #0
 8006a58:	9201      	str	r2, [sp, #4]
 8006a5a:	9300      	str	r3, [sp, #0]
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2280      	movs	r2, #128	; 0x80
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 fee3 	bl	800782c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	7959      	ldrb	r1, [r3, #5]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006a7a:	b292      	uxth	r2, r2
 8006a7c:	9202      	str	r2, [sp, #8]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	9201      	str	r2, [sp, #4]
 8006a82:	9300      	str	r3, [sp, #0]
 8006a84:	4603      	mov	r3, r0
 8006a86:	2200      	movs	r2, #0
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 fecf 	bl	800782c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006a8e:	e0e3      	b.n	8006c58 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006a90:	7bbb      	ldrb	r3, [r7, #14]
 8006a92:	2b03      	cmp	r3, #3
 8006a94:	f040 80e0 	bne.w	8006c58 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	220d      	movs	r2, #13
 8006a9c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	705a      	strb	r2, [r3, #1]
      break;
 8006aa4:	e0d8      	b.n	8006c58 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006aa6:	2109      	movs	r1, #9
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 f99d 	bl	8006de8 <USBH_Get_CfgDesc>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006ab2:	7bbb      	ldrb	r3, [r7, #14]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d103      	bne.n	8006ac0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2204      	movs	r2, #4
 8006abc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006abe:	e0cd      	b.n	8006c5c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ac0:	7bbb      	ldrb	r3, [r7, #14]
 8006ac2:	2b03      	cmp	r3, #3
 8006ac4:	f040 80ca 	bne.w	8006c5c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ace:	3301      	adds	r3, #1
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ade:	2b03      	cmp	r3, #3
 8006ae0:	d903      	bls.n	8006aea <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	220d      	movs	r2, #13
 8006ae6:	701a      	strb	r2, [r3, #0]
      break;
 8006ae8:	e0b8      	b.n	8006c5c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	795b      	ldrb	r3, [r3, #5]
 8006aee:	4619      	mov	r1, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 feeb 	bl	80078cc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	791b      	ldrb	r3, [r3, #4]
 8006afa:	4619      	mov	r1, r3
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fee5 	bl	80078cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	701a      	strb	r2, [r3, #0]
      break;
 8006b0e:	e0a5      	b.n	8006c5c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006b16:	4619      	mov	r1, r3
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f965 	bl	8006de8 <USBH_Get_CfgDesc>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006b22:	7bbb      	ldrb	r3, [r7, #14]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d103      	bne.n	8006b30 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2205      	movs	r2, #5
 8006b2c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006b2e:	e097      	b.n	8006c60 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006b30:	7bbb      	ldrb	r3, [r7, #14]
 8006b32:	2b03      	cmp	r3, #3
 8006b34:	f040 8094 	bne.w	8006c60 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006b3e:	3301      	adds	r3, #1
 8006b40:	b2da      	uxtb	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006b4e:	2b03      	cmp	r3, #3
 8006b50:	d903      	bls.n	8006b5a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	220d      	movs	r2, #13
 8006b56:	701a      	strb	r2, [r3, #0]
      break;
 8006b58:	e082      	b.n	8006c60 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	795b      	ldrb	r3, [r3, #5]
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 feb3 	bl	80078cc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	791b      	ldrb	r3, [r3, #4]
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 fead 	bl	80078cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	701a      	strb	r2, [r3, #0]
      break;
 8006b7e:	e06f      	b.n	8006c60 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d019      	beq.n	8006bbe <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006b96:	23ff      	movs	r3, #255	; 0xff
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f949 	bl	8006e30 <USBH_Get_StringDesc>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006ba2:	7bbb      	ldrb	r3, [r7, #14]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d103      	bne.n	8006bb0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2206      	movs	r2, #6
 8006bac:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006bae:	e059      	b.n	8006c64 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006bb0:	7bbb      	ldrb	r3, [r7, #14]
 8006bb2:	2b03      	cmp	r3, #3
 8006bb4:	d156      	bne.n	8006c64 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2206      	movs	r2, #6
 8006bba:	705a      	strb	r2, [r3, #1]
      break;
 8006bbc:	e052      	b.n	8006c64 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2206      	movs	r2, #6
 8006bc2:	705a      	strb	r2, [r3, #1]
      break;
 8006bc4:	e04e      	b.n	8006c64 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d019      	beq.n	8006c04 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006bdc:	23ff      	movs	r3, #255	; 0xff
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f926 	bl	8006e30 <USBH_Get_StringDesc>
 8006be4:	4603      	mov	r3, r0
 8006be6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006be8:	7bbb      	ldrb	r3, [r7, #14]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d103      	bne.n	8006bf6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2207      	movs	r2, #7
 8006bf2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006bf4:	e038      	b.n	8006c68 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006bf6:	7bbb      	ldrb	r3, [r7, #14]
 8006bf8:	2b03      	cmp	r3, #3
 8006bfa:	d135      	bne.n	8006c68 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2207      	movs	r2, #7
 8006c00:	705a      	strb	r2, [r3, #1]
      break;
 8006c02:	e031      	b.n	8006c68 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2207      	movs	r2, #7
 8006c08:	705a      	strb	r2, [r3, #1]
      break;
 8006c0a:	e02d      	b.n	8006c68 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d017      	beq.n	8006c46 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006c22:	23ff      	movs	r3, #255	; 0xff
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 f903 	bl	8006e30 <USBH_Get_StringDesc>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006c2e:	7bbb      	ldrb	r3, [r7, #14]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d102      	bne.n	8006c3a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006c34:	2300      	movs	r3, #0
 8006c36:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006c38:	e018      	b.n	8006c6c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c3a:	7bbb      	ldrb	r3, [r7, #14]
 8006c3c:	2b03      	cmp	r3, #3
 8006c3e:	d115      	bne.n	8006c6c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006c40:	2300      	movs	r3, #0
 8006c42:	73fb      	strb	r3, [r7, #15]
      break;
 8006c44:	e012      	b.n	8006c6c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006c46:	2300      	movs	r3, #0
 8006c48:	73fb      	strb	r3, [r7, #15]
      break;
 8006c4a:	e00f      	b.n	8006c6c <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006c4c:	bf00      	nop
 8006c4e:	e00e      	b.n	8006c6e <USBH_HandleEnum+0x3be>
      break;
 8006c50:	bf00      	nop
 8006c52:	e00c      	b.n	8006c6e <USBH_HandleEnum+0x3be>
      break;
 8006c54:	bf00      	nop
 8006c56:	e00a      	b.n	8006c6e <USBH_HandleEnum+0x3be>
      break;
 8006c58:	bf00      	nop
 8006c5a:	e008      	b.n	8006c6e <USBH_HandleEnum+0x3be>
      break;
 8006c5c:	bf00      	nop
 8006c5e:	e006      	b.n	8006c6e <USBH_HandleEnum+0x3be>
      break;
 8006c60:	bf00      	nop
 8006c62:	e004      	b.n	8006c6e <USBH_HandleEnum+0x3be>
      break;
 8006c64:	bf00      	nop
 8006c66:	e002      	b.n	8006c6e <USBH_HandleEnum+0x3be>
      break;
 8006c68:	bf00      	nop
 8006c6a:	e000      	b.n	8006c6e <USBH_HandleEnum+0x3be>
      break;
 8006c6c:	bf00      	nop
  }
  return Status;
 8006c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	683a      	ldr	r2, [r7, #0]
 8006c86:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006c8a:	bf00      	nop
 8006c8c:	370c      	adds	r7, #12
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr

08006c96 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b082      	sub	sp, #8
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006ca4:	1c5a      	adds	r2, r3, #1
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f804 	bl	8006cba <USBH_HandleSof>
}
 8006cb2:	bf00      	nop
 8006cb4:	3708      	adds	r7, #8
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b082      	sub	sp, #8
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	2b0b      	cmp	r3, #11
 8006cca:	d10a      	bne.n	8006ce2 <USBH_HandleSof+0x28>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d005      	beq.n	8006ce2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	4798      	blx	r3
  }
}
 8006ce2:	bf00      	nop
 8006ce4:	3708      	adds	r7, #8
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b083      	sub	sp, #12
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8006cfa:	bf00      	nop
}
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006d06:	b480      	push	{r7}
 8006d08:	b083      	sub	sp, #12
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006d16:	bf00      	nop
}
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b083      	sub	sp, #12
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 ff58 	bl	8007c26 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	791b      	ldrb	r3, [r3, #4]
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 fda5 	bl	80078cc <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	795b      	ldrb	r3, [r3, #5]
 8006d86:	4619      	mov	r1, r3
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 fd9f 	bl	80078cc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3708      	adds	r7, #8
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b086      	sub	sp, #24
 8006d9c:	af02      	add	r7, sp, #8
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	460b      	mov	r3, r1
 8006da2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006daa:	78fb      	ldrb	r3, [r7, #3]
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	4613      	mov	r3, r2
 8006db2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006db6:	2100      	movs	r1, #0
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f864 	bl	8006e86 <USBH_GetDescriptor>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	73fb      	strb	r3, [r7, #15]
 8006dc2:	7bfb      	ldrb	r3, [r7, #15]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d10a      	bne.n	8006dde <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006dd4:	78fa      	ldrb	r2, [r7, #3]
 8006dd6:	b292      	uxth	r2, r2
 8006dd8:	4619      	mov	r1, r3
 8006dda:	f000 f918 	bl	800700e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b086      	sub	sp, #24
 8006dec:	af02      	add	r7, sp, #8
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	460b      	mov	r3, r1
 8006df2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	331c      	adds	r3, #28
 8006df8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006dfa:	887b      	ldrh	r3, [r7, #2]
 8006dfc:	9300      	str	r3, [sp, #0]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e04:	2100      	movs	r1, #0
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f83d 	bl	8006e86 <USBH_GetDescriptor>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	72fb      	strb	r3, [r7, #11]
 8006e10:	7afb      	ldrb	r3, [r7, #11]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d107      	bne.n	8006e26 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006e1c:	887a      	ldrh	r2, [r7, #2]
 8006e1e:	68f9      	ldr	r1, [r7, #12]
 8006e20:	4618      	mov	r0, r3
 8006e22:	f000 f964 	bl	80070ee <USBH_ParseCfgDesc>
  }

  return status;
 8006e26:	7afb      	ldrb	r3, [r7, #11]
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3710      	adds	r7, #16
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b088      	sub	sp, #32
 8006e34:	af02      	add	r7, sp, #8
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	607a      	str	r2, [r7, #4]
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	72fb      	strb	r3, [r7, #11]
 8006e40:	4613      	mov	r3, r2
 8006e42:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8006e44:	7afb      	ldrb	r3, [r7, #11]
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006e4c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006e54:	893b      	ldrh	r3, [r7, #8]
 8006e56:	9300      	str	r3, [sp, #0]
 8006e58:	460b      	mov	r3, r1
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f000 f812 	bl	8006e86 <USBH_GetDescriptor>
 8006e62:	4603      	mov	r3, r0
 8006e64:	75fb      	strb	r3, [r7, #23]
 8006e66:	7dfb      	ldrb	r3, [r7, #23]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d107      	bne.n	8006e7c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006e72:	893a      	ldrh	r2, [r7, #8]
 8006e74:	6879      	ldr	r1, [r7, #4]
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 fa37 	bl	80072ea <USBH_ParseStringDesc>
  }

  return status;
 8006e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3718      	adds	r7, #24
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b084      	sub	sp, #16
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	60f8      	str	r0, [r7, #12]
 8006e8e:	607b      	str	r3, [r7, #4]
 8006e90:	460b      	mov	r3, r1
 8006e92:	72fb      	strb	r3, [r7, #11]
 8006e94:	4613      	mov	r3, r2
 8006e96:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	789b      	ldrb	r3, [r3, #2]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d11c      	bne.n	8006eda <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006ea0:	7afb      	ldrb	r3, [r7, #11]
 8006ea2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006ea6:	b2da      	uxtb	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2206      	movs	r2, #6
 8006eb0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	893a      	ldrh	r2, [r7, #8]
 8006eb6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006eb8:	893b      	ldrh	r3, [r7, #8]
 8006eba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006ebe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ec2:	d104      	bne.n	8006ece <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f240 4209 	movw	r2, #1033	; 0x409
 8006eca:	829a      	strh	r2, [r3, #20]
 8006ecc:	e002      	b.n	8006ed4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	8b3a      	ldrh	r2, [r7, #24]
 8006ed8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006eda:	8b3b      	ldrh	r3, [r7, #24]
 8006edc:	461a      	mov	r2, r3
 8006ede:	6879      	ldr	r1, [r7, #4]
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f000 fa50 	bl	8007386 <USBH_CtlReq>
 8006ee6:	4603      	mov	r3, r0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	460b      	mov	r3, r1
 8006efa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	789b      	ldrb	r3, [r3, #2]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d10f      	bne.n	8006f24 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2205      	movs	r2, #5
 8006f0e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006f10:	78fb      	ldrb	r3, [r7, #3]
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006f24:	2200      	movs	r2, #0
 8006f26:	2100      	movs	r1, #0
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 fa2c 	bl	8007386 <USBH_CtlReq>
 8006f2e:	4603      	mov	r3, r0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3708      	adds	r7, #8
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	460b      	mov	r3, r1
 8006f42:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	789b      	ldrb	r3, [r3, #2]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d10e      	bne.n	8006f6a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2209      	movs	r2, #9
 8006f56:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	887a      	ldrh	r2, [r7, #2]
 8006f5c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fa09 	bl	8007386 <USBH_CtlReq>
 8006f74:	4603      	mov	r3, r0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b082      	sub	sp, #8
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	460b      	mov	r3, r1
 8006f88:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	789b      	ldrb	r3, [r3, #2]
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d10f      	bne.n	8006fb2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2203      	movs	r2, #3
 8006f9c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006f9e:	78fb      	ldrb	r3, [r7, #3]
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 f9e5 	bl	8007386 <USBH_CtlReq>
 8006fbc:	4603      	mov	r3, r0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b082      	sub	sp, #8
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
 8006fce:	460b      	mov	r3, r1
 8006fd0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	789b      	ldrb	r3, [r3, #2]
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d10f      	bne.n	8006ffa <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2202      	movs	r2, #2
 8006fde:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006fec:	78fb      	ldrb	r3, [r7, #3]
 8006fee:	b29a      	uxth	r2, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f9c1 	bl	8007386 <USBH_CtlReq>
 8007004:	4603      	mov	r3, r0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800700e:	b480      	push	{r7}
 8007010:	b085      	sub	sp, #20
 8007012:	af00      	add	r7, sp, #0
 8007014:	60f8      	str	r0, [r7, #12]
 8007016:	60b9      	str	r1, [r7, #8]
 8007018:	4613      	mov	r3, r2
 800701a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	781a      	ldrb	r2, [r3, #0]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	785a      	ldrb	r2, [r3, #1]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	3302      	adds	r3, #2
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	b29a      	uxth	r2, r3
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	3303      	adds	r3, #3
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	b29b      	uxth	r3, r3
 800703c:	021b      	lsls	r3, r3, #8
 800703e:	b29b      	uxth	r3, r3
 8007040:	4313      	orrs	r3, r2
 8007042:	b29a      	uxth	r2, r3
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	791a      	ldrb	r2, [r3, #4]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	795a      	ldrb	r2, [r3, #5]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	799a      	ldrb	r2, [r3, #6]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	79da      	ldrb	r2, [r3, #7]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007068:	88fb      	ldrh	r3, [r7, #6]
 800706a:	2b08      	cmp	r3, #8
 800706c:	d939      	bls.n	80070e2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	3308      	adds	r3, #8
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	b29a      	uxth	r2, r3
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	3309      	adds	r3, #9
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	b29b      	uxth	r3, r3
 800707e:	021b      	lsls	r3, r3, #8
 8007080:	b29b      	uxth	r3, r3
 8007082:	4313      	orrs	r3, r2
 8007084:	b29a      	uxth	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	330a      	adds	r3, #10
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	b29a      	uxth	r2, r3
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	330b      	adds	r3, #11
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	b29b      	uxth	r3, r3
 800709a:	021b      	lsls	r3, r3, #8
 800709c:	b29b      	uxth	r3, r3
 800709e:	4313      	orrs	r3, r2
 80070a0:	b29a      	uxth	r2, r3
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	330c      	adds	r3, #12
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	330d      	adds	r3, #13
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	021b      	lsls	r3, r3, #8
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	4313      	orrs	r3, r2
 80070bc:	b29a      	uxth	r2, r3
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	7b9a      	ldrb	r2, [r3, #14]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	7bda      	ldrb	r2, [r3, #15]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	7c1a      	ldrb	r2, [r3, #16]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	7c5a      	ldrb	r2, [r3, #17]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	745a      	strb	r2, [r3, #17]
  }
}
 80070e2:	bf00      	nop
 80070e4:	3714      	adds	r7, #20
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr

080070ee <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b08a      	sub	sp, #40	; 0x28
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	60f8      	str	r0, [r7, #12]
 80070f6:	60b9      	str	r1, [r7, #8]
 80070f8:	4613      	mov	r3, r2
 80070fa:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007100:	2300      	movs	r3, #0
 8007102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007106:	2300      	movs	r3, #0
 8007108:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	781a      	ldrb	r2, [r3, #0]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	785a      	ldrb	r2, [r3, #1]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	3302      	adds	r3, #2
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	b29a      	uxth	r2, r3
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	3303      	adds	r3, #3
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	b29b      	uxth	r3, r3
 8007130:	021b      	lsls	r3, r3, #8
 8007132:	b29b      	uxth	r3, r3
 8007134:	4313      	orrs	r3, r2
 8007136:	b29a      	uxth	r2, r3
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	791a      	ldrb	r2, [r3, #4]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	795a      	ldrb	r2, [r3, #5]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	799a      	ldrb	r2, [r3, #6]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	79da      	ldrb	r2, [r3, #7]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	7a1a      	ldrb	r2, [r3, #8]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007164:	88fb      	ldrh	r3, [r7, #6]
 8007166:	2b09      	cmp	r3, #9
 8007168:	d95f      	bls.n	800722a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800716a:	2309      	movs	r3, #9
 800716c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800716e:	2300      	movs	r3, #0
 8007170:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007172:	e051      	b.n	8007218 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007174:	f107 0316 	add.w	r3, r7, #22
 8007178:	4619      	mov	r1, r3
 800717a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800717c:	f000 f8e8 	bl	8007350 <USBH_GetNextDesc>
 8007180:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007184:	785b      	ldrb	r3, [r3, #1]
 8007186:	2b04      	cmp	r3, #4
 8007188:	d146      	bne.n	8007218 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800718a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800718e:	221a      	movs	r2, #26
 8007190:	fb02 f303 	mul.w	r3, r2, r3
 8007194:	3308      	adds	r3, #8
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	4413      	add	r3, r2
 800719a:	3302      	adds	r3, #2
 800719c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800719e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80071a0:	69f8      	ldr	r0, [r7, #28]
 80071a2:	f000 f846 	bl	8007232 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80071a6:	2300      	movs	r3, #0
 80071a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80071ac:	2300      	movs	r3, #0
 80071ae:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80071b0:	e022      	b.n	80071f8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80071b2:	f107 0316 	add.w	r3, r7, #22
 80071b6:	4619      	mov	r1, r3
 80071b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071ba:	f000 f8c9 	bl	8007350 <USBH_GetNextDesc>
 80071be:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80071c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c2:	785b      	ldrb	r3, [r3, #1]
 80071c4:	2b05      	cmp	r3, #5
 80071c6:	d117      	bne.n	80071f8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80071c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80071cc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80071d0:	3201      	adds	r2, #1
 80071d2:	00d2      	lsls	r2, r2, #3
 80071d4:	211a      	movs	r1, #26
 80071d6:	fb01 f303 	mul.w	r3, r1, r3
 80071da:	4413      	add	r3, r2
 80071dc:	3308      	adds	r3, #8
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	4413      	add	r3, r2
 80071e2:	3304      	adds	r3, #4
 80071e4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80071e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80071e8:	69b8      	ldr	r0, [r7, #24]
 80071ea:	f000 f851 	bl	8007290 <USBH_ParseEPDesc>
            ep_ix++;
 80071ee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80071f2:	3301      	adds	r3, #1
 80071f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	791b      	ldrb	r3, [r3, #4]
 80071fc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007200:	429a      	cmp	r2, r3
 8007202:	d204      	bcs.n	800720e <USBH_ParseCfgDesc+0x120>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	885a      	ldrh	r2, [r3, #2]
 8007208:	8afb      	ldrh	r3, [r7, #22]
 800720a:	429a      	cmp	r2, r3
 800720c:	d8d1      	bhi.n	80071b2 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800720e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007212:	3301      	adds	r3, #1
 8007214:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007218:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800721c:	2b01      	cmp	r3, #1
 800721e:	d804      	bhi.n	800722a <USBH_ParseCfgDesc+0x13c>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	885a      	ldrh	r2, [r3, #2]
 8007224:	8afb      	ldrh	r3, [r7, #22]
 8007226:	429a      	cmp	r2, r3
 8007228:	d8a4      	bhi.n	8007174 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800722a:	bf00      	nop
 800722c:	3728      	adds	r7, #40	; 0x28
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007232:	b480      	push	{r7}
 8007234:	b083      	sub	sp, #12
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
 800723a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	781a      	ldrb	r2, [r3, #0]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	785a      	ldrb	r2, [r3, #1]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	789a      	ldrb	r2, [r3, #2]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	78da      	ldrb	r2, [r3, #3]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	791a      	ldrb	r2, [r3, #4]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	795a      	ldrb	r2, [r3, #5]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	799a      	ldrb	r2, [r3, #6]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	79da      	ldrb	r2, [r3, #7]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	7a1a      	ldrb	r2, [r3, #8]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	721a      	strb	r2, [r3, #8]
}
 8007284:	bf00      	nop
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	781a      	ldrb	r2, [r3, #0]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	785a      	ldrb	r2, [r3, #1]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	789a      	ldrb	r2, [r3, #2]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	78da      	ldrb	r2, [r3, #3]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	3304      	adds	r3, #4
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	3305      	adds	r3, #5
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	021b      	lsls	r3, r3, #8
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	4313      	orrs	r3, r2
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	799a      	ldrb	r2, [r3, #6]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	719a      	strb	r2, [r3, #6]
}
 80072de:	bf00      	nop
 80072e0:	370c      	adds	r7, #12
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80072ea:	b480      	push	{r7}
 80072ec:	b087      	sub	sp, #28
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	60f8      	str	r0, [r7, #12]
 80072f2:	60b9      	str	r1, [r7, #8]
 80072f4:	4613      	mov	r3, r2
 80072f6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	3301      	adds	r3, #1
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	2b03      	cmp	r3, #3
 8007300:	d120      	bne.n	8007344 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	1e9a      	subs	r2, r3, #2
 8007308:	88fb      	ldrh	r3, [r7, #6]
 800730a:	4293      	cmp	r3, r2
 800730c:	bf28      	it	cs
 800730e:	4613      	movcs	r3, r2
 8007310:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	3302      	adds	r3, #2
 8007316:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007318:	2300      	movs	r3, #0
 800731a:	82fb      	strh	r3, [r7, #22]
 800731c:	e00b      	b.n	8007336 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800731e:	8afb      	ldrh	r3, [r7, #22]
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	4413      	add	r3, r2
 8007324:	781a      	ldrb	r2, [r3, #0]
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	701a      	strb	r2, [r3, #0]
      pdest++;
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	3301      	adds	r3, #1
 800732e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007330:	8afb      	ldrh	r3, [r7, #22]
 8007332:	3302      	adds	r3, #2
 8007334:	82fb      	strh	r3, [r7, #22]
 8007336:	8afa      	ldrh	r2, [r7, #22]
 8007338:	8abb      	ldrh	r3, [r7, #20]
 800733a:	429a      	cmp	r2, r3
 800733c:	d3ef      	bcc.n	800731e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	2200      	movs	r2, #0
 8007342:	701a      	strb	r2, [r3, #0]
  }
}
 8007344:	bf00      	nop
 8007346:	371c      	adds	r7, #28
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007350:	b480      	push	{r7}
 8007352:	b085      	sub	sp, #20
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	881a      	ldrh	r2, [r3, #0]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	b29b      	uxth	r3, r3
 8007364:	4413      	add	r3, r2
 8007366:	b29a      	uxth	r2, r3
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4413      	add	r3, r2
 8007376:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007378:	68fb      	ldr	r3, [r7, #12]
}
 800737a:	4618      	mov	r0, r3
 800737c:	3714      	adds	r7, #20
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr

08007386 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b086      	sub	sp, #24
 800738a:	af00      	add	r7, sp, #0
 800738c:	60f8      	str	r0, [r7, #12]
 800738e:	60b9      	str	r1, [r7, #8]
 8007390:	4613      	mov	r3, r2
 8007392:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007394:	2301      	movs	r3, #1
 8007396:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	789b      	ldrb	r3, [r3, #2]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d002      	beq.n	80073a6 <USBH_CtlReq+0x20>
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d00f      	beq.n	80073c4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80073a4:	e027      	b.n	80073f6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	88fa      	ldrh	r2, [r7, #6]
 80073b0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2201      	movs	r2, #1
 80073b6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2202      	movs	r2, #2
 80073bc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80073be:	2301      	movs	r3, #1
 80073c0:	75fb      	strb	r3, [r7, #23]
      break;
 80073c2:	e018      	b.n	80073f6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f000 f81b 	bl	8007400 <USBH_HandleControl>
 80073ca:	4603      	mov	r3, r0
 80073cc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80073ce:	7dfb      	ldrb	r3, [r7, #23]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d002      	beq.n	80073da <USBH_CtlReq+0x54>
 80073d4:	7dfb      	ldrb	r3, [r7, #23]
 80073d6:	2b03      	cmp	r3, #3
 80073d8:	d106      	bne.n	80073e8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2201      	movs	r2, #1
 80073de:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2200      	movs	r2, #0
 80073e4:	761a      	strb	r2, [r3, #24]
      break;
 80073e6:	e005      	b.n	80073f4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80073e8:	7dfb      	ldrb	r3, [r7, #23]
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d102      	bne.n	80073f4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2201      	movs	r2, #1
 80073f2:	709a      	strb	r2, [r3, #2]
      break;
 80073f4:	bf00      	nop
  }
  return status;
 80073f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3718      	adds	r7, #24
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af02      	add	r7, sp, #8
 8007406:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007408:	2301      	movs	r3, #1
 800740a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800740c:	2300      	movs	r3, #0
 800740e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	7e1b      	ldrb	r3, [r3, #24]
 8007414:	3b01      	subs	r3, #1
 8007416:	2b0a      	cmp	r3, #10
 8007418:	f200 8158 	bhi.w	80076cc <USBH_HandleControl+0x2cc>
 800741c:	a201      	add	r2, pc, #4	; (adr r2, 8007424 <USBH_HandleControl+0x24>)
 800741e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007422:	bf00      	nop
 8007424:	08007451 	.word	0x08007451
 8007428:	0800746b 	.word	0x0800746b
 800742c:	080074d5 	.word	0x080074d5
 8007430:	080074fb 	.word	0x080074fb
 8007434:	08007533 	.word	0x08007533
 8007438:	0800755f 	.word	0x0800755f
 800743c:	080075b1 	.word	0x080075b1
 8007440:	080075d3 	.word	0x080075d3
 8007444:	0800760f 	.word	0x0800760f
 8007448:	08007637 	.word	0x08007637
 800744c:	08007675 	.word	0x08007675
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f103 0110 	add.w	r1, r3, #16
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	795b      	ldrb	r3, [r3, #5]
 800745a:	461a      	mov	r2, r3
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f945 	bl	80076ec <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2202      	movs	r2, #2
 8007466:	761a      	strb	r2, [r3, #24]
      break;
 8007468:	e13b      	b.n	80076e2 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	795b      	ldrb	r3, [r3, #5]
 800746e:	4619      	mov	r1, r3
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fcc5 	bl	8007e00 <USBH_LL_GetURBState>
 8007476:	4603      	mov	r3, r0
 8007478:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800747a:	7bbb      	ldrb	r3, [r7, #14]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d11e      	bne.n	80074be <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	7c1b      	ldrb	r3, [r3, #16]
 8007484:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007488:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	8adb      	ldrh	r3, [r3, #22]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00a      	beq.n	80074a8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007492:	7b7b      	ldrb	r3, [r7, #13]
 8007494:	2b80      	cmp	r3, #128	; 0x80
 8007496:	d103      	bne.n	80074a0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2203      	movs	r2, #3
 800749c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800749e:	e117      	b.n	80076d0 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2205      	movs	r2, #5
 80074a4:	761a      	strb	r2, [r3, #24]
      break;
 80074a6:	e113      	b.n	80076d0 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 80074a8:	7b7b      	ldrb	r3, [r7, #13]
 80074aa:	2b80      	cmp	r3, #128	; 0x80
 80074ac:	d103      	bne.n	80074b6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2209      	movs	r2, #9
 80074b2:	761a      	strb	r2, [r3, #24]
      break;
 80074b4:	e10c      	b.n	80076d0 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2207      	movs	r2, #7
 80074ba:	761a      	strb	r2, [r3, #24]
      break;
 80074bc:	e108      	b.n	80076d0 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80074be:	7bbb      	ldrb	r3, [r7, #14]
 80074c0:	2b04      	cmp	r3, #4
 80074c2:	d003      	beq.n	80074cc <USBH_HandleControl+0xcc>
 80074c4:	7bbb      	ldrb	r3, [r7, #14]
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	f040 8102 	bne.w	80076d0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	220b      	movs	r2, #11
 80074d0:	761a      	strb	r2, [r3, #24]
      break;
 80074d2:	e0fd      	b.n	80076d0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80074da:	b29a      	uxth	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6899      	ldr	r1, [r3, #8]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	899a      	ldrh	r2, [r3, #12]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	791b      	ldrb	r3, [r3, #4]
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 f93c 	bl	800776a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2204      	movs	r2, #4
 80074f6:	761a      	strb	r2, [r3, #24]
      break;
 80074f8:	e0f3      	b.n	80076e2 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	791b      	ldrb	r3, [r3, #4]
 80074fe:	4619      	mov	r1, r3
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fc7d 	bl	8007e00 <USBH_LL_GetURBState>
 8007506:	4603      	mov	r3, r0
 8007508:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800750a:	7bbb      	ldrb	r3, [r7, #14]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d102      	bne.n	8007516 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2209      	movs	r2, #9
 8007514:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007516:	7bbb      	ldrb	r3, [r7, #14]
 8007518:	2b05      	cmp	r3, #5
 800751a:	d102      	bne.n	8007522 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800751c:	2303      	movs	r3, #3
 800751e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007520:	e0d8      	b.n	80076d4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007522:	7bbb      	ldrb	r3, [r7, #14]
 8007524:	2b04      	cmp	r3, #4
 8007526:	f040 80d5 	bne.w	80076d4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	220b      	movs	r2, #11
 800752e:	761a      	strb	r2, [r3, #24]
      break;
 8007530:	e0d0      	b.n	80076d4 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6899      	ldr	r1, [r3, #8]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	899a      	ldrh	r2, [r3, #12]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	7958      	ldrb	r0, [r3, #5]
 800753e:	2301      	movs	r3, #1
 8007540:	9300      	str	r3, [sp, #0]
 8007542:	4603      	mov	r3, r0
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 f8eb 	bl	8007720 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007550:	b29a      	uxth	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2206      	movs	r2, #6
 800755a:	761a      	strb	r2, [r3, #24]
      break;
 800755c:	e0c1      	b.n	80076e2 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	795b      	ldrb	r3, [r3, #5]
 8007562:	4619      	mov	r1, r3
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fc4b 	bl	8007e00 <USBH_LL_GetURBState>
 800756a:	4603      	mov	r3, r0
 800756c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800756e:	7bbb      	ldrb	r3, [r7, #14]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d103      	bne.n	800757c <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2207      	movs	r2, #7
 8007578:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800757a:	e0ad      	b.n	80076d8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800757c:	7bbb      	ldrb	r3, [r7, #14]
 800757e:	2b05      	cmp	r3, #5
 8007580:	d105      	bne.n	800758e <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	220c      	movs	r2, #12
 8007586:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007588:	2303      	movs	r3, #3
 800758a:	73fb      	strb	r3, [r7, #15]
      break;
 800758c:	e0a4      	b.n	80076d8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800758e:	7bbb      	ldrb	r3, [r7, #14]
 8007590:	2b02      	cmp	r3, #2
 8007592:	d103      	bne.n	800759c <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2205      	movs	r2, #5
 8007598:	761a      	strb	r2, [r3, #24]
      break;
 800759a:	e09d      	b.n	80076d8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800759c:	7bbb      	ldrb	r3, [r7, #14]
 800759e:	2b04      	cmp	r3, #4
 80075a0:	f040 809a 	bne.w	80076d8 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	220b      	movs	r2, #11
 80075a8:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80075aa:	2302      	movs	r3, #2
 80075ac:	73fb      	strb	r3, [r7, #15]
      break;
 80075ae:	e093      	b.n	80076d8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	791b      	ldrb	r3, [r3, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	2100      	movs	r1, #0
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 f8d6 	bl	800776a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2208      	movs	r2, #8
 80075ce:	761a      	strb	r2, [r3, #24]

      break;
 80075d0:	e087      	b.n	80076e2 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	791b      	ldrb	r3, [r3, #4]
 80075d6:	4619      	mov	r1, r3
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fc11 	bl	8007e00 <USBH_LL_GetURBState>
 80075de:	4603      	mov	r3, r0
 80075e0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80075e2:	7bbb      	ldrb	r3, [r7, #14]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d105      	bne.n	80075f4 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	220d      	movs	r2, #13
 80075ec:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80075ee:	2300      	movs	r3, #0
 80075f0:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80075f2:	e073      	b.n	80076dc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 80075f4:	7bbb      	ldrb	r3, [r7, #14]
 80075f6:	2b04      	cmp	r3, #4
 80075f8:	d103      	bne.n	8007602 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	220b      	movs	r2, #11
 80075fe:	761a      	strb	r2, [r3, #24]
      break;
 8007600:	e06c      	b.n	80076dc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8007602:	7bbb      	ldrb	r3, [r7, #14]
 8007604:	2b05      	cmp	r3, #5
 8007606:	d169      	bne.n	80076dc <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8007608:	2303      	movs	r3, #3
 800760a:	73fb      	strb	r3, [r7, #15]
      break;
 800760c:	e066      	b.n	80076dc <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	795a      	ldrb	r2, [r3, #5]
 8007612:	2301      	movs	r3, #1
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	4613      	mov	r3, r2
 8007618:	2200      	movs	r2, #0
 800761a:	2100      	movs	r1, #0
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 f87f 	bl	8007720 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007628:	b29a      	uxth	r2, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	220a      	movs	r2, #10
 8007632:	761a      	strb	r2, [r3, #24]
      break;
 8007634:	e055      	b.n	80076e2 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	795b      	ldrb	r3, [r3, #5]
 800763a:	4619      	mov	r1, r3
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 fbdf 	bl	8007e00 <USBH_LL_GetURBState>
 8007642:	4603      	mov	r3, r0
 8007644:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007646:	7bbb      	ldrb	r3, [r7, #14]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d105      	bne.n	8007658 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800764c:	2300      	movs	r3, #0
 800764e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	220d      	movs	r2, #13
 8007654:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007656:	e043      	b.n	80076e0 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007658:	7bbb      	ldrb	r3, [r7, #14]
 800765a:	2b02      	cmp	r3, #2
 800765c:	d103      	bne.n	8007666 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2209      	movs	r2, #9
 8007662:	761a      	strb	r2, [r3, #24]
      break;
 8007664:	e03c      	b.n	80076e0 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8007666:	7bbb      	ldrb	r3, [r7, #14]
 8007668:	2b04      	cmp	r3, #4
 800766a:	d139      	bne.n	80076e0 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	220b      	movs	r2, #11
 8007670:	761a      	strb	r2, [r3, #24]
      break;
 8007672:	e035      	b.n	80076e0 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	7e5b      	ldrb	r3, [r3, #25]
 8007678:	3301      	adds	r3, #1
 800767a:	b2da      	uxtb	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	765a      	strb	r2, [r3, #25]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	7e5b      	ldrb	r3, [r3, #25]
 8007684:	2b02      	cmp	r3, #2
 8007686:	d806      	bhi.n	8007696 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2201      	movs	r2, #1
 8007692:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007694:	e025      	b.n	80076e2 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800769c:	2106      	movs	r1, #6
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	795b      	ldrb	r3, [r3, #5]
 80076ac:	4619      	mov	r1, r3
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f90c 	bl	80078cc <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	791b      	ldrb	r3, [r3, #4]
 80076b8:	4619      	mov	r1, r3
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f906 	bl	80078cc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80076c6:	2302      	movs	r3, #2
 80076c8:	73fb      	strb	r3, [r7, #15]
      break;
 80076ca:	e00a      	b.n	80076e2 <USBH_HandleControl+0x2e2>

    default:
      break;
 80076cc:	bf00      	nop
 80076ce:	e008      	b.n	80076e2 <USBH_HandleControl+0x2e2>
      break;
 80076d0:	bf00      	nop
 80076d2:	e006      	b.n	80076e2 <USBH_HandleControl+0x2e2>
      break;
 80076d4:	bf00      	nop
 80076d6:	e004      	b.n	80076e2 <USBH_HandleControl+0x2e2>
      break;
 80076d8:	bf00      	nop
 80076da:	e002      	b.n	80076e2 <USBH_HandleControl+0x2e2>
      break;
 80076dc:	bf00      	nop
 80076de:	e000      	b.n	80076e2 <USBH_HandleControl+0x2e2>
      break;
 80076e0:	bf00      	nop
  }

  return status;
 80076e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b088      	sub	sp, #32
 80076f0:	af04      	add	r7, sp, #16
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	4613      	mov	r3, r2
 80076f8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80076fa:	79f9      	ldrb	r1, [r7, #7]
 80076fc:	2300      	movs	r3, #0
 80076fe:	9303      	str	r3, [sp, #12]
 8007700:	2308      	movs	r3, #8
 8007702:	9302      	str	r3, [sp, #8]
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	9301      	str	r3, [sp, #4]
 8007708:	2300      	movs	r3, #0
 800770a:	9300      	str	r3, [sp, #0]
 800770c:	2300      	movs	r3, #0
 800770e:	2200      	movs	r2, #0
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f000 fb44 	bl	8007d9e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3710      	adds	r7, #16
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b088      	sub	sp, #32
 8007724:	af04      	add	r7, sp, #16
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	4611      	mov	r1, r2
 800772c:	461a      	mov	r2, r3
 800772e:	460b      	mov	r3, r1
 8007730:	80fb      	strh	r3, [r7, #6]
 8007732:	4613      	mov	r3, r2
 8007734:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800773c:	2b00      	cmp	r3, #0
 800773e:	d001      	beq.n	8007744 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007740:	2300      	movs	r3, #0
 8007742:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007744:	7979      	ldrb	r1, [r7, #5]
 8007746:	7e3b      	ldrb	r3, [r7, #24]
 8007748:	9303      	str	r3, [sp, #12]
 800774a:	88fb      	ldrh	r3, [r7, #6]
 800774c:	9302      	str	r3, [sp, #8]
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	9301      	str	r3, [sp, #4]
 8007752:	2301      	movs	r3, #1
 8007754:	9300      	str	r3, [sp, #0]
 8007756:	2300      	movs	r3, #0
 8007758:	2200      	movs	r2, #0
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f000 fb1f 	bl	8007d9e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b088      	sub	sp, #32
 800776e:	af04      	add	r7, sp, #16
 8007770:	60f8      	str	r0, [r7, #12]
 8007772:	60b9      	str	r1, [r7, #8]
 8007774:	4611      	mov	r1, r2
 8007776:	461a      	mov	r2, r3
 8007778:	460b      	mov	r3, r1
 800777a:	80fb      	strh	r3, [r7, #6]
 800777c:	4613      	mov	r3, r2
 800777e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007780:	7979      	ldrb	r1, [r7, #5]
 8007782:	2300      	movs	r3, #0
 8007784:	9303      	str	r3, [sp, #12]
 8007786:	88fb      	ldrh	r3, [r7, #6]
 8007788:	9302      	str	r3, [sp, #8]
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	9301      	str	r3, [sp, #4]
 800778e:	2301      	movs	r3, #1
 8007790:	9300      	str	r3, [sp, #0]
 8007792:	2300      	movs	r3, #0
 8007794:	2201      	movs	r2, #1
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	f000 fb01 	bl	8007d9e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800779c:	2300      	movs	r3, #0

}
 800779e:	4618      	mov	r0, r3
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b088      	sub	sp, #32
 80077aa:	af04      	add	r7, sp, #16
 80077ac:	60f8      	str	r0, [r7, #12]
 80077ae:	60b9      	str	r1, [r7, #8]
 80077b0:	4611      	mov	r1, r2
 80077b2:	461a      	mov	r2, r3
 80077b4:	460b      	mov	r3, r1
 80077b6:	80fb      	strh	r3, [r7, #6]
 80077b8:	4613      	mov	r3, r2
 80077ba:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d001      	beq.n	80077ca <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80077c6:	2300      	movs	r3, #0
 80077c8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80077ca:	7979      	ldrb	r1, [r7, #5]
 80077cc:	7e3b      	ldrb	r3, [r7, #24]
 80077ce:	9303      	str	r3, [sp, #12]
 80077d0:	88fb      	ldrh	r3, [r7, #6]
 80077d2:	9302      	str	r3, [sp, #8]
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	9301      	str	r3, [sp, #4]
 80077d8:	2301      	movs	r3, #1
 80077da:	9300      	str	r3, [sp, #0]
 80077dc:	2302      	movs	r3, #2
 80077de:	2200      	movs	r2, #0
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f000 fadc 	bl	8007d9e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b088      	sub	sp, #32
 80077f4:	af04      	add	r7, sp, #16
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	4611      	mov	r1, r2
 80077fc:	461a      	mov	r2, r3
 80077fe:	460b      	mov	r3, r1
 8007800:	80fb      	strh	r3, [r7, #6]
 8007802:	4613      	mov	r3, r2
 8007804:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007806:	7979      	ldrb	r1, [r7, #5]
 8007808:	2300      	movs	r3, #0
 800780a:	9303      	str	r3, [sp, #12]
 800780c:	88fb      	ldrh	r3, [r7, #6]
 800780e:	9302      	str	r3, [sp, #8]
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	9301      	str	r3, [sp, #4]
 8007814:	2301      	movs	r3, #1
 8007816:	9300      	str	r3, [sp, #0]
 8007818:	2302      	movs	r3, #2
 800781a:	2201      	movs	r2, #1
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f000 fabe 	bl	8007d9e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af04      	add	r7, sp, #16
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	4608      	mov	r0, r1
 8007836:	4611      	mov	r1, r2
 8007838:	461a      	mov	r2, r3
 800783a:	4603      	mov	r3, r0
 800783c:	70fb      	strb	r3, [r7, #3]
 800783e:	460b      	mov	r3, r1
 8007840:	70bb      	strb	r3, [r7, #2]
 8007842:	4613      	mov	r3, r2
 8007844:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007846:	7878      	ldrb	r0, [r7, #1]
 8007848:	78ba      	ldrb	r2, [r7, #2]
 800784a:	78f9      	ldrb	r1, [r7, #3]
 800784c:	8b3b      	ldrh	r3, [r7, #24]
 800784e:	9302      	str	r3, [sp, #8]
 8007850:	7d3b      	ldrb	r3, [r7, #20]
 8007852:	9301      	str	r3, [sp, #4]
 8007854:	7c3b      	ldrb	r3, [r7, #16]
 8007856:	9300      	str	r3, [sp, #0]
 8007858:	4603      	mov	r3, r0
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 fa51 	bl	8007d02 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3708      	adds	r7, #8
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b082      	sub	sp, #8
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
 8007872:	460b      	mov	r3, r1
 8007874:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007876:	78fb      	ldrb	r3, [r7, #3]
 8007878:	4619      	mov	r1, r3
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fa70 	bl	8007d60 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3708      	adds	r7, #8
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800788a:	b580      	push	{r7, lr}
 800788c:	b084      	sub	sp, #16
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
 8007892:	460b      	mov	r3, r1
 8007894:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f836 	bl	8007908 <USBH_GetFreePipe>
 800789c:	4603      	mov	r3, r0
 800789e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80078a0:	89fb      	ldrh	r3, [r7, #14]
 80078a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d00a      	beq.n	80078c0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80078aa:	78fa      	ldrb	r2, [r7, #3]
 80078ac:	89fb      	ldrh	r3, [r7, #14]
 80078ae:	f003 030f 	and.w	r3, r3, #15
 80078b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078b6:	6879      	ldr	r1, [r7, #4]
 80078b8:	33e0      	adds	r3, #224	; 0xe0
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	440b      	add	r3, r1
 80078be:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80078c0:	89fb      	ldrh	r3, [r7, #14]
 80078c2:	b2db      	uxtb	r3, r3
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3710      	adds	r7, #16
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	460b      	mov	r3, r1
 80078d6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80078d8:	78fb      	ldrb	r3, [r7, #3]
 80078da:	2b0a      	cmp	r3, #10
 80078dc:	d80d      	bhi.n	80078fa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80078de:	78fb      	ldrb	r3, [r7, #3]
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	33e0      	adds	r3, #224	; 0xe0
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	4413      	add	r3, r2
 80078e8:	685a      	ldr	r2, [r3, #4]
 80078ea:	78fb      	ldrb	r3, [r7, #3]
 80078ec:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80078f0:	6879      	ldr	r1, [r7, #4]
 80078f2:	33e0      	adds	r3, #224	; 0xe0
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	440b      	add	r3, r1
 80078f8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007910:	2300      	movs	r3, #0
 8007912:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007914:	2300      	movs	r3, #0
 8007916:	73fb      	strb	r3, [r7, #15]
 8007918:	e00f      	b.n	800793a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800791a:	7bfb      	ldrb	r3, [r7, #15]
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	33e0      	adds	r3, #224	; 0xe0
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	4413      	add	r3, r2
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800792a:	2b00      	cmp	r3, #0
 800792c:	d102      	bne.n	8007934 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800792e:	7bfb      	ldrb	r3, [r7, #15]
 8007930:	b29b      	uxth	r3, r3
 8007932:	e007      	b.n	8007944 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007934:	7bfb      	ldrb	r3, [r7, #15]
 8007936:	3301      	adds	r3, #1
 8007938:	73fb      	strb	r3, [r7, #15]
 800793a:	7bfb      	ldrb	r3, [r7, #15]
 800793c:	2b0a      	cmp	r3, #10
 800793e:	d9ec      	bls.n	800791a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007940:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007944:	4618      	mov	r0, r3
 8007946:	3714      	adds	r7, #20
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007954:	2201      	movs	r2, #1
 8007956:	490e      	ldr	r1, [pc, #56]	; (8007990 <MX_USB_HOST_Init+0x40>)
 8007958:	480e      	ldr	r0, [pc, #56]	; (8007994 <MX_USB_HOST_Init+0x44>)
 800795a:	f7fe fc9f 	bl	800629c <USBH_Init>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d001      	beq.n	8007968 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007964:	f7f9 f8ee 	bl	8000b44 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007968:	490b      	ldr	r1, [pc, #44]	; (8007998 <MX_USB_HOST_Init+0x48>)
 800796a:	480a      	ldr	r0, [pc, #40]	; (8007994 <MX_USB_HOST_Init+0x44>)
 800796c:	f7fe fd24 	bl	80063b8 <USBH_RegisterClass>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d001      	beq.n	800797a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007976:	f7f9 f8e5 	bl	8000b44 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800797a:	4806      	ldr	r0, [pc, #24]	; (8007994 <MX_USB_HOST_Init+0x44>)
 800797c:	f7fe fda8 	bl	80064d0 <USBH_Start>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d001      	beq.n	800798a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007986:	f7f9 f8dd 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800798a:	bf00      	nop
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	080079b1 	.word	0x080079b1
 8007994:	200001fc 	.word	0x200001fc
 8007998:	2000000c 	.word	0x2000000c

0800799c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80079a0:	4802      	ldr	r0, [pc, #8]	; (80079ac <MX_USB_HOST_Process+0x10>)
 80079a2:	f7fe fda5 	bl	80064f0 <USBH_Process>
}
 80079a6:	bf00      	nop
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	200001fc 	.word	0x200001fc

080079b0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	460b      	mov	r3, r1
 80079ba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80079bc:	78fb      	ldrb	r3, [r7, #3]
 80079be:	3b01      	subs	r3, #1
 80079c0:	2b04      	cmp	r3, #4
 80079c2:	d819      	bhi.n	80079f8 <USBH_UserProcess+0x48>
 80079c4:	a201      	add	r2, pc, #4	; (adr r2, 80079cc <USBH_UserProcess+0x1c>)
 80079c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ca:	bf00      	nop
 80079cc:	080079f9 	.word	0x080079f9
 80079d0:	080079e9 	.word	0x080079e9
 80079d4:	080079f9 	.word	0x080079f9
 80079d8:	080079f1 	.word	0x080079f1
 80079dc:	080079e1 	.word	0x080079e1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80079e0:	4b09      	ldr	r3, [pc, #36]	; (8007a08 <USBH_UserProcess+0x58>)
 80079e2:	2203      	movs	r2, #3
 80079e4:	701a      	strb	r2, [r3, #0]
  break;
 80079e6:	e008      	b.n	80079fa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80079e8:	4b07      	ldr	r3, [pc, #28]	; (8007a08 <USBH_UserProcess+0x58>)
 80079ea:	2202      	movs	r2, #2
 80079ec:	701a      	strb	r2, [r3, #0]
  break;
 80079ee:	e004      	b.n	80079fa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80079f0:	4b05      	ldr	r3, [pc, #20]	; (8007a08 <USBH_UserProcess+0x58>)
 80079f2:	2201      	movs	r2, #1
 80079f4:	701a      	strb	r2, [r3, #0]
  break;
 80079f6:	e000      	b.n	80079fa <USBH_UserProcess+0x4a>

  default:
  break;
 80079f8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80079fa:	bf00      	nop
 80079fc:	370c      	adds	r7, #12
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
 8007a08:	200000b4 	.word	0x200000b4

08007a0c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b08a      	sub	sp, #40	; 0x28
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a14:	f107 0314 	add.w	r3, r7, #20
 8007a18:	2200      	movs	r2, #0
 8007a1a:	601a      	str	r2, [r3, #0]
 8007a1c:	605a      	str	r2, [r3, #4]
 8007a1e:	609a      	str	r2, [r3, #8]
 8007a20:	60da      	str	r2, [r3, #12]
 8007a22:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a2c:	d147      	bne.n	8007abe <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a2e:	2300      	movs	r3, #0
 8007a30:	613b      	str	r3, [r7, #16]
 8007a32:	4b25      	ldr	r3, [pc, #148]	; (8007ac8 <HAL_HCD_MspInit+0xbc>)
 8007a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a36:	4a24      	ldr	r2, [pc, #144]	; (8007ac8 <HAL_HCD_MspInit+0xbc>)
 8007a38:	f043 0301 	orr.w	r3, r3, #1
 8007a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8007a3e:	4b22      	ldr	r3, [pc, #136]	; (8007ac8 <HAL_HCD_MspInit+0xbc>)
 8007a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a42:	f003 0301 	and.w	r3, r3, #1
 8007a46:	613b      	str	r3, [r7, #16]
 8007a48:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007a4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007a50:	2300      	movs	r3, #0
 8007a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a54:	2300      	movs	r3, #0
 8007a56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007a58:	f107 0314 	add.w	r3, r7, #20
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	481b      	ldr	r0, [pc, #108]	; (8007acc <HAL_HCD_MspInit+0xc0>)
 8007a60:	f7fa f8e0 	bl	8001c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007a64:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a6a:	2302      	movs	r3, #2
 8007a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a72:	2300      	movs	r3, #0
 8007a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007a76:	230a      	movs	r3, #10
 8007a78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a7a:	f107 0314 	add.w	r3, r7, #20
 8007a7e:	4619      	mov	r1, r3
 8007a80:	4812      	ldr	r0, [pc, #72]	; (8007acc <HAL_HCD_MspInit+0xc0>)
 8007a82:	f7fa f8cf 	bl	8001c24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007a86:	4b10      	ldr	r3, [pc, #64]	; (8007ac8 <HAL_HCD_MspInit+0xbc>)
 8007a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a8a:	4a0f      	ldr	r2, [pc, #60]	; (8007ac8 <HAL_HCD_MspInit+0xbc>)
 8007a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a90:	6353      	str	r3, [r2, #52]	; 0x34
 8007a92:	2300      	movs	r3, #0
 8007a94:	60fb      	str	r3, [r7, #12]
 8007a96:	4b0c      	ldr	r3, [pc, #48]	; (8007ac8 <HAL_HCD_MspInit+0xbc>)
 8007a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a9a:	4a0b      	ldr	r2, [pc, #44]	; (8007ac8 <HAL_HCD_MspInit+0xbc>)
 8007a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8007aa2:	4b09      	ldr	r3, [pc, #36]	; (8007ac8 <HAL_HCD_MspInit+0xbc>)
 8007aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007aaa:	60fb      	str	r3, [r7, #12]
 8007aac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007aae:	2200      	movs	r2, #0
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	2043      	movs	r0, #67	; 0x43
 8007ab4:	f7f9 ff85 	bl	80019c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007ab8:	2043      	movs	r0, #67	; 0x43
 8007aba:	f7f9 ff9e 	bl	80019fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007abe:	bf00      	nop
 8007ac0:	3728      	adds	r7, #40	; 0x28
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	40023800 	.word	0x40023800
 8007acc:	40020000 	.word	0x40020000

08007ad0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7ff f8d9 	bl	8006c96 <USBH_LL_IncTimer>
}
 8007ae4:	bf00      	nop
 8007ae6:	3708      	adds	r7, #8
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7ff f911 	bl	8006d22 <USBH_LL_Connect>
}
 8007b00:	bf00      	nop
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7ff f91a 	bl	8006d50 <USBH_LL_Disconnect>
}
 8007b1c:	bf00      	nop
 8007b1e:	3708      	adds	r7, #8
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	70fb      	strb	r3, [r7, #3]
 8007b30:	4613      	mov	r3, r2
 8007b32:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7ff f8cb 	bl	8006cea <USBH_LL_PortEnabled>
}
 8007b54:	bf00      	nop
 8007b56:	3708      	adds	r7, #8
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7ff f8cb 	bl	8006d06 <USBH_LL_PortDisabled>
}
 8007b70:	bf00      	nop
 8007b72:	3708      	adds	r7, #8
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d12a      	bne.n	8007be0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007b8a:	4a18      	ldr	r2, [pc, #96]	; (8007bec <USBH_LL_Init+0x74>)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a15      	ldr	r2, [pc, #84]	; (8007bec <USBH_LL_Init+0x74>)
 8007b96:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007b9a:	4b14      	ldr	r3, [pc, #80]	; (8007bec <USBH_LL_Init+0x74>)
 8007b9c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007ba0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007ba2:	4b12      	ldr	r3, [pc, #72]	; (8007bec <USBH_LL_Init+0x74>)
 8007ba4:	2208      	movs	r2, #8
 8007ba6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007ba8:	4b10      	ldr	r3, [pc, #64]	; (8007bec <USBH_LL_Init+0x74>)
 8007baa:	2201      	movs	r2, #1
 8007bac:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007bae:	4b0f      	ldr	r3, [pc, #60]	; (8007bec <USBH_LL_Init+0x74>)
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007bb4:	4b0d      	ldr	r3, [pc, #52]	; (8007bec <USBH_LL_Init+0x74>)
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007bba:	4b0c      	ldr	r3, [pc, #48]	; (8007bec <USBH_LL_Init+0x74>)
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007bc0:	480a      	ldr	r0, [pc, #40]	; (8007bec <USBH_LL_Init+0x74>)
 8007bc2:	f7fa f9fd 	bl	8001fc0 <HAL_HCD_Init>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d001      	beq.n	8007bd0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007bcc:	f7f8 ffba 	bl	8000b44 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007bd0:	4806      	ldr	r0, [pc, #24]	; (8007bec <USBH_LL_Init+0x74>)
 8007bd2:	f7fa fe01 	bl	80027d8 <HAL_HCD_GetCurrentFrame>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	4619      	mov	r1, r3
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f7ff f84c 	bl	8006c78 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3708      	adds	r7, #8
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	200005d4 	.word	0x200005d4

08007bf0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7fa fd6e 	bl	80026e8 <HAL_HCD_Start>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007c10:	7bfb      	ldrb	r3, [r7, #15]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f000 f95c 	bl	8007ed0 <USBH_Get_USB_Status>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007c26:	b580      	push	{r7, lr}
 8007c28:	b084      	sub	sp, #16
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007c32:	2300      	movs	r3, #0
 8007c34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7fa fd76 	bl	800272e <HAL_HCD_Stop>
 8007c42:	4603      	mov	r3, r0
 8007c44:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007c46:	7bfb      	ldrb	r3, [r7, #15]
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f000 f941 	bl	8007ed0 <USBH_Get_USB_Status>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c52:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007c64:	2301      	movs	r3, #1
 8007c66:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fa fdc0 	bl	80027f4 <HAL_HCD_GetCurrentSpeed>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d007      	beq.n	8007c8a <USBH_LL_GetSpeed+0x2e>
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d302      	bcc.n	8007c84 <USBH_LL_GetSpeed+0x28>
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d006      	beq.n	8007c90 <USBH_LL_GetSpeed+0x34>
 8007c82:	e008      	b.n	8007c96 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007c84:	2300      	movs	r3, #0
 8007c86:	73fb      	strb	r3, [r7, #15]
    break;
 8007c88:	e008      	b.n	8007c9c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	73fb      	strb	r3, [r7, #15]
    break;
 8007c8e:	e005      	b.n	8007c9c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007c90:	2302      	movs	r3, #2
 8007c92:	73fb      	strb	r3, [r7, #15]
    break;
 8007c94:	e002      	b.n	8007c9c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8007c96:	2301      	movs	r3, #1
 8007c98:	73fb      	strb	r3, [r7, #15]
    break;
 8007c9a:	bf00      	nop
  }
  return  speed;
 8007c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b084      	sub	sp, #16
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7fa fd53 	bl	8002768 <HAL_HCD_ResetPort>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007cc6:	7bfb      	ldrb	r3, [r7, #15]
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f000 f901 	bl	8007ed0 <USBH_Get_USB_Status>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3710      	adds	r7, #16
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007cee:	78fa      	ldrb	r2, [r7, #3]
 8007cf0:	4611      	mov	r1, r2
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7fa fd5b 	bl	80027ae <HAL_HCD_HC_GetXferCount>
 8007cf8:	4603      	mov	r3, r0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3708      	adds	r7, #8
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007d02:	b590      	push	{r4, r7, lr}
 8007d04:	b089      	sub	sp, #36	; 0x24
 8007d06:	af04      	add	r7, sp, #16
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	4608      	mov	r0, r1
 8007d0c:	4611      	mov	r1, r2
 8007d0e:	461a      	mov	r2, r3
 8007d10:	4603      	mov	r3, r0
 8007d12:	70fb      	strb	r3, [r7, #3]
 8007d14:	460b      	mov	r3, r1
 8007d16:	70bb      	strb	r3, [r7, #2]
 8007d18:	4613      	mov	r3, r2
 8007d1a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007d20:	2300      	movs	r3, #0
 8007d22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007d2a:	787c      	ldrb	r4, [r7, #1]
 8007d2c:	78ba      	ldrb	r2, [r7, #2]
 8007d2e:	78f9      	ldrb	r1, [r7, #3]
 8007d30:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007d32:	9302      	str	r3, [sp, #8]
 8007d34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007d38:	9301      	str	r3, [sp, #4]
 8007d3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007d3e:	9300      	str	r3, [sp, #0]
 8007d40:	4623      	mov	r3, r4
 8007d42:	f7fa f99f 	bl	8002084 <HAL_HCD_HC_Init>
 8007d46:	4603      	mov	r3, r0
 8007d48:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007d4a:	7bfb      	ldrb	r3, [r7, #15]
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f000 f8bf 	bl	8007ed0 <USBH_Get_USB_Status>
 8007d52:	4603      	mov	r3, r0
 8007d54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d56:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3714      	adds	r7, #20
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd90      	pop	{r4, r7, pc}

08007d60 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	460b      	mov	r3, r1
 8007d6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007d70:	2300      	movs	r3, #0
 8007d72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007d7a:	78fa      	ldrb	r2, [r7, #3]
 8007d7c:	4611      	mov	r1, r2
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7fa fa18 	bl	80021b4 <HAL_HCD_HC_Halt>
 8007d84:	4603      	mov	r3, r0
 8007d86:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007d88:	7bfb      	ldrb	r3, [r7, #15]
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f000 f8a0 	bl	8007ed0 <USBH_Get_USB_Status>
 8007d90:	4603      	mov	r3, r0
 8007d92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d94:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007d9e:	b590      	push	{r4, r7, lr}
 8007da0:	b089      	sub	sp, #36	; 0x24
 8007da2:	af04      	add	r7, sp, #16
 8007da4:	6078      	str	r0, [r7, #4]
 8007da6:	4608      	mov	r0, r1
 8007da8:	4611      	mov	r1, r2
 8007daa:	461a      	mov	r2, r3
 8007dac:	4603      	mov	r3, r0
 8007dae:	70fb      	strb	r3, [r7, #3]
 8007db0:	460b      	mov	r3, r1
 8007db2:	70bb      	strb	r3, [r7, #2]
 8007db4:	4613      	mov	r3, r2
 8007db6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007db8:	2300      	movs	r3, #0
 8007dba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007dc6:	787c      	ldrb	r4, [r7, #1]
 8007dc8:	78ba      	ldrb	r2, [r7, #2]
 8007dca:	78f9      	ldrb	r1, [r7, #3]
 8007dcc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007dd0:	9303      	str	r3, [sp, #12]
 8007dd2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007dd4:	9302      	str	r3, [sp, #8]
 8007dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd8:	9301      	str	r3, [sp, #4]
 8007dda:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007dde:	9300      	str	r3, [sp, #0]
 8007de0:	4623      	mov	r3, r4
 8007de2:	f7fa fa0b 	bl	80021fc <HAL_HCD_HC_SubmitRequest>
 8007de6:	4603      	mov	r3, r0
 8007de8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007dea:	7bfb      	ldrb	r3, [r7, #15]
 8007dec:	4618      	mov	r0, r3
 8007dee:	f000 f86f 	bl	8007ed0 <USBH_Get_USB_Status>
 8007df2:	4603      	mov	r3, r0
 8007df4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007df6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3714      	adds	r7, #20
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd90      	pop	{r4, r7, pc}

08007e00 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	460b      	mov	r3, r1
 8007e0a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007e12:	78fa      	ldrb	r2, [r7, #3]
 8007e14:	4611      	mov	r1, r2
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7fa fcb4 	bl	8002784 <HAL_HCD_HC_GetURBState>
 8007e1c:	4603      	mov	r3, r0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3708      	adds	r7, #8
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b082      	sub	sp, #8
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
 8007e2e:	460b      	mov	r3, r1
 8007e30:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d103      	bne.n	8007e44 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007e3c:	78fb      	ldrb	r3, [r7, #3]
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f000 f872 	bl	8007f28 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007e44:	20c8      	movs	r0, #200	; 0xc8
 8007e46:	f7f9 f905 	bl	8001054 <HAL_Delay>
  return USBH_OK;
 8007e4a:	2300      	movs	r3, #0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3708      	adds	r7, #8
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	70fb      	strb	r3, [r7, #3]
 8007e60:	4613      	mov	r3, r2
 8007e62:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007e6a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007e6c:	78fa      	ldrb	r2, [r7, #3]
 8007e6e:	68f9      	ldr	r1, [r7, #12]
 8007e70:	4613      	mov	r3, r2
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	4413      	add	r3, r2
 8007e76:	00db      	lsls	r3, r3, #3
 8007e78:	440b      	add	r3, r1
 8007e7a:	333b      	adds	r3, #59	; 0x3b
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00a      	beq.n	8007e98 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007e82:	78fa      	ldrb	r2, [r7, #3]
 8007e84:	68f9      	ldr	r1, [r7, #12]
 8007e86:	4613      	mov	r3, r2
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	4413      	add	r3, r2
 8007e8c:	00db      	lsls	r3, r3, #3
 8007e8e:	440b      	add	r3, r1
 8007e90:	3350      	adds	r3, #80	; 0x50
 8007e92:	78ba      	ldrb	r2, [r7, #2]
 8007e94:	701a      	strb	r2, [r3, #0]
 8007e96:	e009      	b.n	8007eac <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007e98:	78fa      	ldrb	r2, [r7, #3]
 8007e9a:	68f9      	ldr	r1, [r7, #12]
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	4413      	add	r3, r2
 8007ea2:	00db      	lsls	r3, r3, #3
 8007ea4:	440b      	add	r3, r1
 8007ea6:	3351      	adds	r3, #81	; 0x51
 8007ea8:	78ba      	ldrb	r2, [r7, #2]
 8007eaa:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3714      	adds	r7, #20
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b082      	sub	sp, #8
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f7f9 f8c6 	bl	8001054 <HAL_Delay>
}
 8007ec8:	bf00      	nop
 8007eca:	3708      	adds	r7, #8
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007eda:	2300      	movs	r3, #0
 8007edc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007ede:	79fb      	ldrb	r3, [r7, #7]
 8007ee0:	2b03      	cmp	r3, #3
 8007ee2:	d817      	bhi.n	8007f14 <USBH_Get_USB_Status+0x44>
 8007ee4:	a201      	add	r2, pc, #4	; (adr r2, 8007eec <USBH_Get_USB_Status+0x1c>)
 8007ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eea:	bf00      	nop
 8007eec:	08007efd 	.word	0x08007efd
 8007ef0:	08007f03 	.word	0x08007f03
 8007ef4:	08007f09 	.word	0x08007f09
 8007ef8:	08007f0f 	.word	0x08007f0f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007efc:	2300      	movs	r3, #0
 8007efe:	73fb      	strb	r3, [r7, #15]
    break;
 8007f00:	e00b      	b.n	8007f1a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007f02:	2302      	movs	r3, #2
 8007f04:	73fb      	strb	r3, [r7, #15]
    break;
 8007f06:	e008      	b.n	8007f1a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	73fb      	strb	r3, [r7, #15]
    break;
 8007f0c:	e005      	b.n	8007f1a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007f0e:	2302      	movs	r3, #2
 8007f10:	73fb      	strb	r3, [r7, #15]
    break;
 8007f12:	e002      	b.n	8007f1a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007f14:	2302      	movs	r3, #2
 8007f16:	73fb      	strb	r3, [r7, #15]
    break;
 8007f18:	bf00      	nop
  }
  return usb_status;
 8007f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3714      	adds	r7, #20
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	4603      	mov	r3, r0
 8007f30:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007f32:	79fb      	ldrb	r3, [r7, #7]
 8007f34:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007f36:	79fb      	ldrb	r3, [r7, #7]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d102      	bne.n	8007f42 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	73fb      	strb	r3, [r7, #15]
 8007f40:	e001      	b.n	8007f46 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8007f42:	2300      	movs	r3, #0
 8007f44:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007f46:	7bfb      	ldrb	r3, [r7, #15]
 8007f48:	461a      	mov	r2, r3
 8007f4a:	2101      	movs	r1, #1
 8007f4c:	4803      	ldr	r0, [pc, #12]	; (8007f5c <MX_DriverVbusFS+0x34>)
 8007f4e:	f7fa f803 	bl	8001f58 <HAL_GPIO_WritePin>
}
 8007f52:	bf00      	nop
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	40020800 	.word	0x40020800

08007f60 <__errno>:
 8007f60:	4b01      	ldr	r3, [pc, #4]	; (8007f68 <__errno+0x8>)
 8007f62:	6818      	ldr	r0, [r3, #0]
 8007f64:	4770      	bx	lr
 8007f66:	bf00      	nop
 8007f68:	2000002c 	.word	0x2000002c

08007f6c <__libc_init_array>:
 8007f6c:	b570      	push	{r4, r5, r6, lr}
 8007f6e:	4e0d      	ldr	r6, [pc, #52]	; (8007fa4 <__libc_init_array+0x38>)
 8007f70:	4c0d      	ldr	r4, [pc, #52]	; (8007fa8 <__libc_init_array+0x3c>)
 8007f72:	1ba4      	subs	r4, r4, r6
 8007f74:	10a4      	asrs	r4, r4, #2
 8007f76:	2500      	movs	r5, #0
 8007f78:	42a5      	cmp	r5, r4
 8007f7a:	d109      	bne.n	8007f90 <__libc_init_array+0x24>
 8007f7c:	4e0b      	ldr	r6, [pc, #44]	; (8007fac <__libc_init_array+0x40>)
 8007f7e:	4c0c      	ldr	r4, [pc, #48]	; (8007fb0 <__libc_init_array+0x44>)
 8007f80:	f000 f8ea 	bl	8008158 <_init>
 8007f84:	1ba4      	subs	r4, r4, r6
 8007f86:	10a4      	asrs	r4, r4, #2
 8007f88:	2500      	movs	r5, #0
 8007f8a:	42a5      	cmp	r5, r4
 8007f8c:	d105      	bne.n	8007f9a <__libc_init_array+0x2e>
 8007f8e:	bd70      	pop	{r4, r5, r6, pc}
 8007f90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f94:	4798      	blx	r3
 8007f96:	3501      	adds	r5, #1
 8007f98:	e7ee      	b.n	8007f78 <__libc_init_array+0xc>
 8007f9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f9e:	4798      	blx	r3
 8007fa0:	3501      	adds	r5, #1
 8007fa2:	e7f2      	b.n	8007f8a <__libc_init_array+0x1e>
 8007fa4:	08008194 	.word	0x08008194
 8007fa8:	08008194 	.word	0x08008194
 8007fac:	08008194 	.word	0x08008194
 8007fb0:	08008198 	.word	0x08008198

08007fb4 <malloc>:
 8007fb4:	4b02      	ldr	r3, [pc, #8]	; (8007fc0 <malloc+0xc>)
 8007fb6:	4601      	mov	r1, r0
 8007fb8:	6818      	ldr	r0, [r3, #0]
 8007fba:	f000 b861 	b.w	8008080 <_malloc_r>
 8007fbe:	bf00      	nop
 8007fc0:	2000002c 	.word	0x2000002c

08007fc4 <free>:
 8007fc4:	4b02      	ldr	r3, [pc, #8]	; (8007fd0 <free+0xc>)
 8007fc6:	4601      	mov	r1, r0
 8007fc8:	6818      	ldr	r0, [r3, #0]
 8007fca:	f000 b80b 	b.w	8007fe4 <_free_r>
 8007fce:	bf00      	nop
 8007fd0:	2000002c 	.word	0x2000002c

08007fd4 <memset>:
 8007fd4:	4402      	add	r2, r0
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d100      	bne.n	8007fde <memset+0xa>
 8007fdc:	4770      	bx	lr
 8007fde:	f803 1b01 	strb.w	r1, [r3], #1
 8007fe2:	e7f9      	b.n	8007fd8 <memset+0x4>

08007fe4 <_free_r>:
 8007fe4:	b538      	push	{r3, r4, r5, lr}
 8007fe6:	4605      	mov	r5, r0
 8007fe8:	2900      	cmp	r1, #0
 8007fea:	d045      	beq.n	8008078 <_free_r+0x94>
 8007fec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ff0:	1f0c      	subs	r4, r1, #4
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	bfb8      	it	lt
 8007ff6:	18e4      	addlt	r4, r4, r3
 8007ff8:	f000 f8ac 	bl	8008154 <__malloc_lock>
 8007ffc:	4a1f      	ldr	r2, [pc, #124]	; (800807c <_free_r+0x98>)
 8007ffe:	6813      	ldr	r3, [r2, #0]
 8008000:	4610      	mov	r0, r2
 8008002:	b933      	cbnz	r3, 8008012 <_free_r+0x2e>
 8008004:	6063      	str	r3, [r4, #4]
 8008006:	6014      	str	r4, [r2, #0]
 8008008:	4628      	mov	r0, r5
 800800a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800800e:	f000 b8a2 	b.w	8008156 <__malloc_unlock>
 8008012:	42a3      	cmp	r3, r4
 8008014:	d90c      	bls.n	8008030 <_free_r+0x4c>
 8008016:	6821      	ldr	r1, [r4, #0]
 8008018:	1862      	adds	r2, r4, r1
 800801a:	4293      	cmp	r3, r2
 800801c:	bf04      	itt	eq
 800801e:	681a      	ldreq	r2, [r3, #0]
 8008020:	685b      	ldreq	r3, [r3, #4]
 8008022:	6063      	str	r3, [r4, #4]
 8008024:	bf04      	itt	eq
 8008026:	1852      	addeq	r2, r2, r1
 8008028:	6022      	streq	r2, [r4, #0]
 800802a:	6004      	str	r4, [r0, #0]
 800802c:	e7ec      	b.n	8008008 <_free_r+0x24>
 800802e:	4613      	mov	r3, r2
 8008030:	685a      	ldr	r2, [r3, #4]
 8008032:	b10a      	cbz	r2, 8008038 <_free_r+0x54>
 8008034:	42a2      	cmp	r2, r4
 8008036:	d9fa      	bls.n	800802e <_free_r+0x4a>
 8008038:	6819      	ldr	r1, [r3, #0]
 800803a:	1858      	adds	r0, r3, r1
 800803c:	42a0      	cmp	r0, r4
 800803e:	d10b      	bne.n	8008058 <_free_r+0x74>
 8008040:	6820      	ldr	r0, [r4, #0]
 8008042:	4401      	add	r1, r0
 8008044:	1858      	adds	r0, r3, r1
 8008046:	4282      	cmp	r2, r0
 8008048:	6019      	str	r1, [r3, #0]
 800804a:	d1dd      	bne.n	8008008 <_free_r+0x24>
 800804c:	6810      	ldr	r0, [r2, #0]
 800804e:	6852      	ldr	r2, [r2, #4]
 8008050:	605a      	str	r2, [r3, #4]
 8008052:	4401      	add	r1, r0
 8008054:	6019      	str	r1, [r3, #0]
 8008056:	e7d7      	b.n	8008008 <_free_r+0x24>
 8008058:	d902      	bls.n	8008060 <_free_r+0x7c>
 800805a:	230c      	movs	r3, #12
 800805c:	602b      	str	r3, [r5, #0]
 800805e:	e7d3      	b.n	8008008 <_free_r+0x24>
 8008060:	6820      	ldr	r0, [r4, #0]
 8008062:	1821      	adds	r1, r4, r0
 8008064:	428a      	cmp	r2, r1
 8008066:	bf04      	itt	eq
 8008068:	6811      	ldreq	r1, [r2, #0]
 800806a:	6852      	ldreq	r2, [r2, #4]
 800806c:	6062      	str	r2, [r4, #4]
 800806e:	bf04      	itt	eq
 8008070:	1809      	addeq	r1, r1, r0
 8008072:	6021      	streq	r1, [r4, #0]
 8008074:	605c      	str	r4, [r3, #4]
 8008076:	e7c7      	b.n	8008008 <_free_r+0x24>
 8008078:	bd38      	pop	{r3, r4, r5, pc}
 800807a:	bf00      	nop
 800807c:	200000b8 	.word	0x200000b8

08008080 <_malloc_r>:
 8008080:	b570      	push	{r4, r5, r6, lr}
 8008082:	1ccd      	adds	r5, r1, #3
 8008084:	f025 0503 	bic.w	r5, r5, #3
 8008088:	3508      	adds	r5, #8
 800808a:	2d0c      	cmp	r5, #12
 800808c:	bf38      	it	cc
 800808e:	250c      	movcc	r5, #12
 8008090:	2d00      	cmp	r5, #0
 8008092:	4606      	mov	r6, r0
 8008094:	db01      	blt.n	800809a <_malloc_r+0x1a>
 8008096:	42a9      	cmp	r1, r5
 8008098:	d903      	bls.n	80080a2 <_malloc_r+0x22>
 800809a:	230c      	movs	r3, #12
 800809c:	6033      	str	r3, [r6, #0]
 800809e:	2000      	movs	r0, #0
 80080a0:	bd70      	pop	{r4, r5, r6, pc}
 80080a2:	f000 f857 	bl	8008154 <__malloc_lock>
 80080a6:	4a21      	ldr	r2, [pc, #132]	; (800812c <_malloc_r+0xac>)
 80080a8:	6814      	ldr	r4, [r2, #0]
 80080aa:	4621      	mov	r1, r4
 80080ac:	b991      	cbnz	r1, 80080d4 <_malloc_r+0x54>
 80080ae:	4c20      	ldr	r4, [pc, #128]	; (8008130 <_malloc_r+0xb0>)
 80080b0:	6823      	ldr	r3, [r4, #0]
 80080b2:	b91b      	cbnz	r3, 80080bc <_malloc_r+0x3c>
 80080b4:	4630      	mov	r0, r6
 80080b6:	f000 f83d 	bl	8008134 <_sbrk_r>
 80080ba:	6020      	str	r0, [r4, #0]
 80080bc:	4629      	mov	r1, r5
 80080be:	4630      	mov	r0, r6
 80080c0:	f000 f838 	bl	8008134 <_sbrk_r>
 80080c4:	1c43      	adds	r3, r0, #1
 80080c6:	d124      	bne.n	8008112 <_malloc_r+0x92>
 80080c8:	230c      	movs	r3, #12
 80080ca:	6033      	str	r3, [r6, #0]
 80080cc:	4630      	mov	r0, r6
 80080ce:	f000 f842 	bl	8008156 <__malloc_unlock>
 80080d2:	e7e4      	b.n	800809e <_malloc_r+0x1e>
 80080d4:	680b      	ldr	r3, [r1, #0]
 80080d6:	1b5b      	subs	r3, r3, r5
 80080d8:	d418      	bmi.n	800810c <_malloc_r+0x8c>
 80080da:	2b0b      	cmp	r3, #11
 80080dc:	d90f      	bls.n	80080fe <_malloc_r+0x7e>
 80080de:	600b      	str	r3, [r1, #0]
 80080e0:	50cd      	str	r5, [r1, r3]
 80080e2:	18cc      	adds	r4, r1, r3
 80080e4:	4630      	mov	r0, r6
 80080e6:	f000 f836 	bl	8008156 <__malloc_unlock>
 80080ea:	f104 000b 	add.w	r0, r4, #11
 80080ee:	1d23      	adds	r3, r4, #4
 80080f0:	f020 0007 	bic.w	r0, r0, #7
 80080f4:	1ac3      	subs	r3, r0, r3
 80080f6:	d0d3      	beq.n	80080a0 <_malloc_r+0x20>
 80080f8:	425a      	negs	r2, r3
 80080fa:	50e2      	str	r2, [r4, r3]
 80080fc:	e7d0      	b.n	80080a0 <_malloc_r+0x20>
 80080fe:	428c      	cmp	r4, r1
 8008100:	684b      	ldr	r3, [r1, #4]
 8008102:	bf16      	itet	ne
 8008104:	6063      	strne	r3, [r4, #4]
 8008106:	6013      	streq	r3, [r2, #0]
 8008108:	460c      	movne	r4, r1
 800810a:	e7eb      	b.n	80080e4 <_malloc_r+0x64>
 800810c:	460c      	mov	r4, r1
 800810e:	6849      	ldr	r1, [r1, #4]
 8008110:	e7cc      	b.n	80080ac <_malloc_r+0x2c>
 8008112:	1cc4      	adds	r4, r0, #3
 8008114:	f024 0403 	bic.w	r4, r4, #3
 8008118:	42a0      	cmp	r0, r4
 800811a:	d005      	beq.n	8008128 <_malloc_r+0xa8>
 800811c:	1a21      	subs	r1, r4, r0
 800811e:	4630      	mov	r0, r6
 8008120:	f000 f808 	bl	8008134 <_sbrk_r>
 8008124:	3001      	adds	r0, #1
 8008126:	d0cf      	beq.n	80080c8 <_malloc_r+0x48>
 8008128:	6025      	str	r5, [r4, #0]
 800812a:	e7db      	b.n	80080e4 <_malloc_r+0x64>
 800812c:	200000b8 	.word	0x200000b8
 8008130:	200000bc 	.word	0x200000bc

08008134 <_sbrk_r>:
 8008134:	b538      	push	{r3, r4, r5, lr}
 8008136:	4c06      	ldr	r4, [pc, #24]	; (8008150 <_sbrk_r+0x1c>)
 8008138:	2300      	movs	r3, #0
 800813a:	4605      	mov	r5, r0
 800813c:	4608      	mov	r0, r1
 800813e:	6023      	str	r3, [r4, #0]
 8008140:	f7f8 fea0 	bl	8000e84 <_sbrk>
 8008144:	1c43      	adds	r3, r0, #1
 8008146:	d102      	bne.n	800814e <_sbrk_r+0x1a>
 8008148:	6823      	ldr	r3, [r4, #0]
 800814a:	b103      	cbz	r3, 800814e <_sbrk_r+0x1a>
 800814c:	602b      	str	r3, [r5, #0]
 800814e:	bd38      	pop	{r3, r4, r5, pc}
 8008150:	20000898 	.word	0x20000898

08008154 <__malloc_lock>:
 8008154:	4770      	bx	lr

08008156 <__malloc_unlock>:
 8008156:	4770      	bx	lr

08008158 <_init>:
 8008158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800815a:	bf00      	nop
 800815c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800815e:	bc08      	pop	{r3}
 8008160:	469e      	mov	lr, r3
 8008162:	4770      	bx	lr

08008164 <_fini>:
 8008164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008166:	bf00      	nop
 8008168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800816a:	bc08      	pop	{r3}
 800816c:	469e      	mov	lr, r3
 800816e:	4770      	bx	lr
